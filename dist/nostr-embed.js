/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={187:(e,t)=>{"use strict";function n(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function r(...e){const t=(e,t)=>n=>e(t(n));return{encode:Array.from(e).reverse().reduce(((e,n)=>e?t(e,n.encode):n.encode),void 0),decode:e.reduce(((e,n)=>e?t(e,n.decode):n.decode),void 0)}}function o(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("alphabet.encode input should be an array of numbers");return t.map((t=>{if(n(t),t<0||t>=e.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]}))},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("alphabet.decode input should be array of strings");return t.map((t=>{if("string"!=typeof t)throw new Error(`alphabet.decode: not string element=${t}`);const n=e.indexOf(t);if(-1===n)throw new Error(`Unknown letter: "${t}". Allowed: ${e}`);return n}))}}}function i(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw new Error("join.decode input should be string");return t.split(e)}}}function a(e,t="="){if(n(e),"string"!=typeof t)throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;n.length*e%8;)n.push(t);return n},decode(n){if(!Array.isArray(n)||n.length&&"string"!=typeof n[0])throw new Error("padding.encode input should be array of strings");for(let e of n)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let r=n.length;if(r*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;r>0&&n[r-1]===t;r--)if(!((r-1)*e%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,r)}}}function s(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:t=>e(t)}}function c(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let o=0;const i=[],a=Array.from(e);for(a.forEach((e=>{if(n(e),e<0||e>=t)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,n=!0;for(let i=o;i<a.length;i++){const s=a[i],c=t*e+s;if(!Number.isSafeInteger(c)||t*e/t!==e||c-s!=t*e)throw new Error("convertRadix: carry overflow");if(e=c%r,a[i]=Math.floor(c/r),!Number.isSafeInteger(a[i])||a[i]*r+e!==c)throw new Error("convertRadix: carry overflow");n&&(a[i]?n=!1:o=i)}if(i.push(e),n)break}for(let t=0;t<e.length-1&&0===e[t];t++)i.push(0);return i.reverse()}Object.defineProperty(t,"__esModule",{value:!0}),t.bytes=t.stringToBytes=t.str=t.bytesToString=t.hex=t.utf8=t.bech32m=t.bech32=t.base58check=t.base58xmr=t.base58xrp=t.base58flickr=t.base58=t.base64url=t.base64=t.base32crockford=t.base32hex=t.base32=t.base16=t.utils=t.assertNumber=void 0,t.assertNumber=n;const l=(e,t)=>t?l(t,e%t):e,u=(e,t)=>e+(t-l(e,t));function f(e,t,r,o){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(u(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${u(t,r)}`);let i=0,a=0;const s=2**r-1,c=[];for(const o of e){if(n(o),o>=2**t)throw new Error(`convertRadix2: invalid data word=${o} from=${t}`);if(i=i<<t|o,a+t>32)throw new Error(`convertRadix2: carry overflow pos=${a} from=${t}`);for(a+=t;a>=r;a-=r)c.push((i>>a-r&s)>>>0);i&=2**a-1}if(i=i<<r-a&s,!o&&a>=t)throw new Error("Excess padding");if(!o&&i)throw new Error(`Non-zero padding: ${i}`);return o&&a>0&&c.push(i>>>0),c}function d(e){return n(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return c(Array.from(t),256,e)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix.decode input should be array of strings");return Uint8Array.from(c(t,e,256))}}}function p(e,t=!1){if(n(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(u(8,e)>32||u(e,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!(n instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return f(Array.from(n),8,e,!t)},decode:n=>{if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(f(n,e,8,t))}}}function A(e){if("function"!=typeof e)throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch(e){}}}function h(e,t){if(n(e),"function"!=typeof t)throw new Error("checksum fn should be function");return{encode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.encode: input should be Uint8Array");const r=t(n).slice(0,e),o=new Uint8Array(n.length+e);return o.set(n),o.set(r,n.length),o},decode(n){if(!(n instanceof Uint8Array))throw new Error("checksum.decode: input should be Uint8Array");const r=n.slice(0,-e),o=t(r).slice(0,e),i=n.slice(-e);for(let t=0;t<e;t++)if(o[t]!==i[t])throw new Error("Invalid checksum");return r}}}t.utils={alphabet:o,chain:r,checksum:h,radix:d,radix2:p,join:i,padding:a},t.base16=r(p(4),o("0123456789ABCDEF"),i("")),t.base32=r(p(5),o("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),a(5),i("")),t.base32hex=r(p(5),o("0123456789ABCDEFGHIJKLMNOPQRSTUV"),a(5),i("")),t.base32crockford=r(p(5),o("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),i(""),s((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")))),t.base64=r(p(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),a(6),i("")),t.base64url=r(p(6),o("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),a(6),i(""));const y=e=>r(d(58),o(e),i(""));t.base58=y("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),t.base58flickr=y("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"),t.base58xrp=y("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const m=[0,2,3,5,6,7,9,10,11];t.base58xmr={encode(e){let n="";for(let r=0;r<e.length;r+=8){const o=e.subarray(r,r+8);n+=t.base58.encode(o).padStart(m[o.length],"1")}return n},decode(e){let n=[];for(let r=0;r<e.length;r+=11){const o=e.slice(r,r+11),i=m.indexOf(o.length),a=t.base58.decode(o);for(let e=0;e<a.length-i;e++)if(0!==a[e])throw new Error("base58xmr: wrong padding");n=n.concat(Array.from(a.slice(a.length-i)))}return Uint8Array.from(n)}};t.base58check=e=>r(h(4,(t=>e(e(t)))),t.base58);const g=r(o("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),i("")),v=[996825010,642813549,513874426,1027748829,705979059];function w(e){const t=e>>25;let n=(33554431&e)<<5;for(let e=0;e<v.length;e++)1==(t>>e&1)&&(n^=v[e]);return n}function _(e,t,n=1){const r=e.length;let o=1;for(let t=0;t<r;t++){const n=e.charCodeAt(t);if(n<33||n>126)throw new Error(`Invalid prefix (${e})`);o=w(o)^n>>5}o=w(o);for(let t=0;t<r;t++)o=w(o)^31&e.charCodeAt(t);for(let e of t)o=w(o)^e;for(let e=0;e<6;e++)o=w(o);return o^=n,g.encode(f([o%2**30],30,5,!1))}function b(e){const t="bech32"===e?1:734539939,n=p(5),r=n.decode,o=n.encode,i=A(r);function a(e,n=90){if("string"!=typeof e)throw new Error("bech32.decode input should be string, not "+typeof e);if(e.length<8||!1!==n&&e.length>n)throw new TypeError(`Wrong string length: ${e.length} (${e}). Expected (8..${n})`);const r=e.toLowerCase();if(e!==r&&e!==e.toUpperCase())throw new Error("String must be lowercase or uppercase");const o=(e=r).lastIndexOf("1");if(0===o||-1===o)throw new Error('Letter "1" must be present between prefix and data only');const i=e.slice(0,o),a=e.slice(o+1);if(a.length<6)throw new Error("Data must be at least 6 characters long");const s=g.decode(a).slice(0,-6),c=_(i,s,t);if(!a.endsWith(c))throw new Error(`Invalid checksum in ${e}: expected "${c}"`);return{prefix:i,words:s}}return{encode:function(e,n,r=90){if("string"!=typeof e)throw new Error("bech32.encode prefix should be string, not "+typeof e);if(!Array.isArray(n)||n.length&&"number"!=typeof n[0])throw new Error("bech32.encode words should be array of numbers, not "+typeof n);const o=e.length+7+n.length;if(!1!==r&&o>r)throw new TypeError(`Length ${o} exceeds limit ${r}`);return`${e=e.toLowerCase()}1${g.encode(n)}${_(e,n,t)}`},decode:a,decodeToBytes:function(e){const{prefix:t,words:n}=a(e,!1);return{prefix:t,words:n,bytes:r(n)}},decodeUnsafe:A(a),fromWords:r,fromWordsUnsafe:i,toWords:o}}t.bech32=b("bech32"),t.bech32m=b("bech32m"),t.utf8={encode:e=>(new TextDecoder).decode(e),decode:e=>(new TextEncoder).encode(e)},t.hex=r(p(4),o("0123456789abcdef"),i(""),s((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})));const C={utf8:t.utf8,hex:t.hex,base16:t.base16,base32:t.base32,base64:t.base64,base64url:t.base64url,base58:t.base58,base58xmr:t.base58xmr},k=`Invalid encoding type. Available types: ${Object.keys(C).join(", ")}`;t.bytesToString=(e,t)=>{if("string"!=typeof e||!C.hasOwnProperty(e))throw new TypeError(k);if(!(t instanceof Uint8Array))throw new TypeError("bytesToString() expects Uint8Array");return C[e].encode(t)},t.str=t.bytesToString;t.stringToBytes=(e,t)=>{if(!C.hasOwnProperty(e))throw new TypeError(k);if("string"!=typeof t)throw new TypeError("stringToBytes() expects string");return C[e].decode(t)},t.bytes=t.stringToBytes},715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<32;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function a(e,t,n,r){let o=0,i=0;const a=(1<<n)-1,s=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,s.push(o>>i&a);if(r)i>0&&s.push(o<<n-i&a);else{if(i>=t)return"Excess padding";if(o<<n-i&a)return"Non-zero padding"}return s}function s(e){return a(e,8,5,!0)}function c(e){const t=a(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=a(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function u(e){let t;function a(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const a=e.toLowerCase(),s=e.toUpperCase();if(e!==a&&e!==s)return"Mixed-case string "+e;const c=(e=a).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),u=e.slice(c+1);if(u.length<6)return"Data too short";let f=i(l);if("string"==typeof f)return f;const d=[];for(let e=0;e<u.length;++e){const t=u.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;f=o(f)^n,e+6>=u.length||d.push(n)}return f!==t?"Invalid checksum for "+e:{prefix:l,words:d}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=a(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=a(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,a){if(a=a||90,e.length+7+r.length>a)throw new TypeError("Exceeds length limit");let s=i(e=e.toLowerCase());if("string"==typeof s)throw new Error(s);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");s=o(s)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)s=o(s);s^=t;for(let e=0;e<6;++e){c+=n.charAt(s>>5*(5-e)&31)}return c},toWords:s,fromWordsUnsafe:c,fromWords:l}}t.gW=u("bech32"),u("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-m-0{margin:0}.ne-ms-\\[-25px\\]{margin-left:-25px}.ne-ms-\\[25px\\]{margin-left:25px}.ne-mt-8{margin-top:2rem}.ne-block{display:block}.ne-inline-block{display:inline-block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-h-\\[40px\\]{height:40px}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-\\[40px\\]{width:40px}.ne-w-full{width:100%}.ne-cursor-pointer{cursor:pointer}.ne-list-none{list-style-type:none}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-flex-wrap{flex-wrap:wrap}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-gap-6{gap:1.5rem}.ne-break-words{word-wrap:break-word}.ne-rounded-full{border-radius:9999px}.ne-rounded-lg{border-radius:.5rem}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgba(252,252,252,var(--tw-bg-opacity))}.ne-object-cover{-o-object-fit:cover;object-fit:cover}.ne-p-0{padding:0}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-font-sans{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-sm{font-size:.875rem;line-height:1.25rem}.ne-font-bold{font-weight:700}.ne-text-black{--tw-text-opacity:1;color:#000;color:rgba(0,0,0,var(--tw-text-opacity))}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgba(17,24,39,var(--tw-text-opacity))}.ne-text-red-800{--tw-text-opacity:1;color:#991b1b;color:rgba(153,27,27,var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.ne-opacity-30{opacity:.3}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgba(252,252,252,var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;text-align:left}.cardContent{word-wrap:break-word;font-size:1.125rem;line-height:1.75rem;white-space:pre-line}.cardContentMedia{text-align:center}.cardContentMedia>iframe,.cardContentMedia>img,.cardContentMedia>video{border-radius:15px;width:50%}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.followedProdileImg{border-radius:9999px;height:40px;margin-left:-25px;-o-object-fit:cover;object-fit:cover;position:relative;width:40px}.followedProdileImg:hover{z-index:999}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profileName a{--tw-text-opacity:1;color:#111827;color:rgba(17,24,39,var(--tw-text-opacity));text-decoration-line:none}.profileName a:hover{--tw-text-opacity:1;color:#4b5563;color:rgba(75,85,99,var(--tw-text-opacity))}.profilePkey{align-items:center;flex-direction:row}.cardMeta,.profilePkey{display:flex;gap:.25rem}.cardMeta{flex-direction:column}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{border-color:#ddd;margin:.25rem;opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:2.5rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{display:block;height:1.25rem;width:1.25rem}.copyIcon,.heartIcon,.linkCopyBtn,.linkIcon,.linkLink,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgba(17,24,39,var(--tw-text-opacity))}.linkCopyBtn,.linkLink{align-items:center;background-color:transparent;border:0;cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgba(75,85,99,var(--tw-text-opacity))}.linkCopyBtn.green,.linkCopyBtn.green .copyIcon{--tw-text-opacity:1;color:#16a34a;color:rgba(22,163,74,var(--tw-text-opacity))}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}.nostrichLink{display:flex;flex-grow:1;justify-content:flex-end}.cardTitle{margin:0}.cardDescription{margin-top:0}.cardList{display:flex;flex-direction:column;gap:20px;margin-top:10px}.profileWithoutImg{background-color:#e9e9e9;border-radius:50%;height:50px;width:50px}.diffProfiles{font-size:1.2rem;font-weight:700}.hover\\:ne-z-\\[999\\]:hover{z-index:999}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans ne-text-left;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg ne-break-words ne-whitespace-pre-line;\n}\n\n.cardContentMedia {\n  text-align: center;\n}\n\n.cardContentMedia > video,\n.cardContentMedia > img,\n.cardContentMedia > iframe {\n  border-radius: 15px;\n  width: 50%;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.followedProdileImg {\n  @apply ne-w-[40px] ne-h-[40px] ne-rounded-full ne-ms-[-25px] ne-object-cover hover:ne-z-[999] ne-relative ;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profileName a {\n  @apply ne-no-underline ne-text-gray-900;\n}\n.profileName a:hover {\n  @apply ne-text-gray-600;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-1 ne-items-center;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30 ne-m-1;\n  border-color: #ddd;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-10;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn,\n.linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n  border: 0;\n  background-color: transparent;\n}\n\n.linkCopyBtn:hover,\n.linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.linkCopyBtn.green,\n.linkCopyBtn.green .copyIcon {\n  @apply ne-text-green-600;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n\n.nostrichLink {\n  @apply ne-flex;\n  flex-grow: 1;\n  justify-content: flex-end;\n}\n\n.cardTitle {\n  margin: 0;\n}\n\n.cardDescription {\n  margin-top: 0;\n}\n\n.cardList {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 10px;\n}\n\n.profileWithoutImg {\n  width: 50px;\n  height: 50px;\n  background-color: #e9e9e9;\n  border-radius: 50%;\n}\n\n.diffProfiles {\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n",null],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},632:(e,t,n)=>{const{bech32:r,hex:o,utf8:i}=n(187),a={bech32:"bc",pubKeyHash:0,scriptHash:5,validWitnessVersions:[0]},s={bech32:"tb",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},c={bech32:"bcrt",pubKeyHash:111,scriptHash:196,validWitnessVersions:[0]},l={bech32:"sb",pubKeyHash:63,scriptHash:123,validWitnessVersions:[0]},u=["option_data_loss_protect","initial_routing_sync","option_upfront_shutdown_script","gossip_queries","var_onion_optin","gossip_queries_ex","option_static_remotekey","payment_secret","basic_mpp","option_support_large_channel"],f={m:BigInt(1e3),u:BigInt(1e6),n:BigInt(1e9),p:BigInt(1e12)},d=BigInt("2100000000000000000"),p=BigInt(1e11),A={payment_hash:1,payment_secret:16,description:13,payee:19,description_hash:23,expiry:6,min_final_cltv_expiry:24,fallback_address:9,route_hint:3,feature_bits:5,metadata:27},h={};for(let e=0,t=Object.keys(A);e<t.length;e++){const n=t[e],r=A[t[e]].toString();h[r]=n}const y={1:e=>o.encode(r.fromWordsUnsafe(e)),16:e=>o.encode(r.fromWordsUnsafe(e)),13:e=>i.encode(r.fromWordsUnsafe(e)),19:e=>o.encode(r.fromWordsUnsafe(e)),23:e=>o.encode(r.fromWordsUnsafe(e)),27:e=>o.encode(r.fromWordsUnsafe(e)),6:g,24:g,3:function(e){const t=[];let n,i,a,s,c,l=r.fromWordsUnsafe(e);for(;l.length>0;)n=o.encode(l.slice(0,33)),i=o.encode(l.slice(33,41)),a=parseInt(o.encode(l.slice(41,45)),16),s=parseInt(o.encode(l.slice(45,49)),16),c=parseInt(o.encode(l.slice(49,51)),16),l=l.slice(51),t.push({pubkey:n,short_channel_id:i,fee_base_msat:a,fee_proportional_millionths:s,cltv_expiry_delta:c});return t},5:function(e){const t=e.slice().reverse().map((e=>[!!(1&e),!!(2&e),!!(4&e),!!(8&e),!!(16&e)])).reduce(((e,t)=>e.concat(t)),[]);for(;t.length<2*u.length;)t.push(!1);const n={};u.forEach(((e,r)=>{let o;o=t[2*r]?"required":t[2*r+1]?"supported":"unsupported",n[e]=o}));const r=t.slice(2*u.length);return n.extra_bits={start_bit:2*u.length,bits:r,has_required:r.reduce(((e,t,n)=>n%2!=0?e||!1:e||t),!1)},n}};function m(e){return t=>({tagCode:parseInt(e),words:r.encode("unknown",t,Number.MAX_SAFE_INTEGER)})}function g(e){return e.reverse().reduce(((e,t,n)=>e+t*Math.pow(32,n)),0)}function v(e,t){let n,r;if(e.slice(-1).match(/^[munp]$/))n=e.slice(-1),r=e.slice(0,-1);else{if(e.slice(-1).match(/^[^munp0-9]$/))throw new Error("Not a valid multiplier for the amount");r=e}if(!r.match(/^\d+$/))throw new Error("Not a valid human readable amount");const o=BigInt(r),i=n?o*p/f[n]:o*p;if("p"===n&&o%BigInt(10)!==BigInt(0)||i>d)throw new Error("Amount is outside of valid range");return t?i.toString():i}e.exports={decode:function(e,t){if("string"!=typeof e)throw new Error("Lightning Payment Request must be string");if("ln"!==e.slice(0,2).toLowerCase())throw new Error("Not a proper lightning payment request");const n=[],i=r.decode(e,Number.MAX_SAFE_INTEGER);e=e.toLowerCase();const u=i.prefix;let f=i.words,d=e.slice(u.length+1),p=f.slice(-104);f=f.slice(0,-104);let w=u.match(/^ln(\S+?)(\d*)([a-zA-Z]?)$/);if(w&&!w[2]&&(w=u.match(/^ln(\S+)$/)),!w)throw new Error("Not a proper lightning payment request");n.push({name:"lightning_network",letters:"ln"});const _=w[1];let b;if(t){if(void 0===t.bech32||void 0===t.pubKeyHash||void 0===t.scriptHash||!Array.isArray(t.validWitnessVersions))throw new Error("Invalid network");b=t}else switch(_){case a.bech32:b=a;break;case s.bech32:b=s;break;case c.bech32:b=c;break;case l.bech32:b=l}if(!b||b.bech32!==_)throw new Error("Unknown coin bech32 prefix");n.push({name:"coin_network",letters:_,value:b});const C=w[2];let k;if(C){k=v(C+w[3],!0),n.push({name:"amount",letters:w[2]+w[3],value:k})}else k=null;n.push({name:"separator",letters:"1"});const x=g(f.slice(0,7));let B,E,S,I;for(f=f.slice(7),n.push({name:"timestamp",letters:d.slice(0,7),value:x}),d=d.slice(7);f.length>0;){const e=f[0].toString();B=h[e]||"unknown_tag",E=y[e]||m(e),f=f.slice(1),S=g(f.slice(0,2)),f=f.slice(2),I=f.slice(0,S),f=f.slice(S),n.push({name:B,tag:d[0],letters:d.slice(0,3+S),value:E(I)}),d=d.slice(3+S)}n.push({name:"signature",letters:d.slice(0,104),value:o.encode(r.fromWordsUnsafe(p))}),d=d.slice(104),n.push({name:"checksum",letters:d});let N={paymentRequest:e,sections:n,get expiry(){let e=n.find((e=>"expiry"===e.name));if(e)return P("timestamp")+e.value},get route_hints(){return n.filter((e=>"route_hint"===e.name)).map((e=>e.value))}};for(let e in A)"route_hint"!==e&&Object.defineProperty(N,e,{get:()=>P(e)});return N;function P(e){let t=n.find((t=>t.name===e));return t?t.value:void 0}},hrpToMillisat:v}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=i[l]||0,f="".concat(l," ").concat(u);i[l]=u+1;var d=n(f),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var A=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:A,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>Nn});var e,t,n,r,a,s,c,l={},u=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,d=Array.isArray;function p(e,t){for(var n in t)e[n]=t[n];return e}function A(e){var t=e.parentNode;t&&t.removeChild(e)}function h(t,n,r){var o,i,a,s={};for(a in n)"key"==a?o=n[a]:"ref"==a?i=n[a]:s[a]=n[a];if(arguments.length>2&&(s.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(a in t.defaultProps)void 0===s[a]&&(s[a]=t.defaultProps[a]);return y(t,s,o,i,null)}function y(e,r,o,i,a){var s={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==a?++n:a};return null==a&&null!=t.vnode&&t.vnode(s),s}function m(e){return e.children}function g(e,t){this.props=e,this.context=t}function v(e,t){if(null==t)return e.__?v(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?v(e):null}function w(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return w(e)}}function _(e){(!e.__d&&(e.__d=!0)&&r.push(e)&&!b.__r++||a!==t.debounceRendering)&&((a=t.debounceRendering)||s)(b)}function b(){var e,t,n,o,i,a,s,l,u;for(r.sort(c);e=r.shift();)e.__d&&(t=r.length,o=void 0,i=void 0,a=void 0,l=(s=(n=e).__v).__e,(u=n.__P)&&(o=[],i=[],(a=p({},s)).__v=s.__v+1,P(u,s,a,n.__n,void 0!==u.ownerSVGElement,null!=s.__h?[l]:null,o,null==l?v(s):l,s.__h,i),T(o,s,i),s.__e!=l&&w(s)),r.length>t&&r.sort(c));b.__r=0}function C(e,t,n,r,o,i,a,s,c,f,p){var A,h,g,v,w,_,b,C,E,S,I=0,N=r&&r.__k||u,T=N.length,j=T,O=t.length;for(n.__k=[],A=0;A<O;A++)null!=(v=n.__k[A]=null==(v=t[A])||"boolean"==typeof v||"function"==typeof v?null:"string"==typeof v||"number"==typeof v||"bigint"==typeof v?y(null,v,null,null,v):d(v)?y(m,{children:v},null,null,null):v.__b>0?y(v.type,v.props,v.key,v.ref?v.ref:null,v.__v):v)&&(v.__=n,v.__b=n.__b+1,-1===(C=B(v,N,b=A+I,j))?g=l:(g=N[C]||l,N[C]=void 0,j--),P(e,v,g,o,i,a,s,c,f,p),w=v.__e,(h=v.ref)&&g.ref!=h&&(g.ref&&U(g.ref,null,v),p.push(h,v.__c||w,v)),null!=w&&(null==_&&(_=w),S=!(E=g===l||null===g.__v)&&C===b,E?-1==C&&I--:C!==b&&(C===b+1?(I++,S=!0):C>b?j>O-b?(I+=C-b,S=!0):I--:I=C<b&&C==b-1?C-b:0),b=A+I,S=S||C==A&&!E,"function"!=typeof v.type||C===b&&g.__k!==v.__k?"function"==typeof v.type||S?void 0!==v.__d?(c=v.__d,v.__d=void 0):c=w.nextSibling:c=x(e,w,c):c=k(v,c,e),"function"==typeof n.type&&(n.__d=c)));for(n.__e=_,A=T;A--;)null!=N[A]&&("function"==typeof n.type&&null!=N[A].__e&&N[A].__e==n.__d&&(n.__d=N[A].__e.nextSibling),L(N[A],N[A]))}function k(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?k(r,t,n):x(n,r.__e,t));return t}function x(e,t,n){return null==n||n.parentNode!==e?e.insertBefore(t,null):t==n&&null!=t.parentNode||e.insertBefore(t,n),t.nextSibling}function B(e,t,n,r){var o=e.key,i=e.type,a=n-1,s=n+1,c=t[n];if(null===c||c&&o==c.key&&i===c.type)return n;if(r>(null!=c?1:0))for(;a>=0||s<t.length;){if(a>=0){if((c=t[a])&&o==c.key&&i===c.type)return a;a--}if(s<t.length){if((c=t[s])&&o==c.key&&i===c.type)return s;s++}}return-1}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function S(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?N:I,i):e.removeEventListener(t,i?N:I,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function I(e){return this.l[e.type+!1](t.event?t.event(e):e)}function N(e){return this.l[e.type+!0](t.event?t.event(e):e)}function P(e,n,r,o,i,a,s,c,l,u){var f,A,h,y,v,w,_,b,k,x,B,E,S,I,N,P=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,a=[c]),(f=t.__b)&&f(n);try{e:if("function"==typeof P){if(b=n.props,k=(f=P.contextType)&&o[f.__c],x=f?k?k.props.value:f.__:o,r.__c?_=(A=n.__c=r.__c).__=A.__E:("prototype"in P&&P.prototype.render?n.__c=A=new P(b,x):(n.__c=A=new g(b,x),A.constructor=P,A.render=O),k&&k.sub(A),A.props=b,A.state||(A.state={}),A.context=x,A.__n=o,h=A.__d=!0,A.__h=[],A._sb=[]),null==A.__s&&(A.__s=A.state),null!=P.getDerivedStateFromProps&&(A.__s==A.state&&(A.__s=p({},A.__s)),p(A.__s,P.getDerivedStateFromProps(b,A.__s))),y=A.props,v=A.state,A.__v=n,h)null==P.getDerivedStateFromProps&&null!=A.componentWillMount&&A.componentWillMount(),null!=A.componentDidMount&&A.__h.push(A.componentDidMount);else{if(null==P.getDerivedStateFromProps&&b!==y&&null!=A.componentWillReceiveProps&&A.componentWillReceiveProps(b,x),!A.__e&&(null!=A.shouldComponentUpdate&&!1===A.shouldComponentUpdate(b,A.__s,x)||n.__v===r.__v)){for(n.__v!==r.__v&&(A.props=b,A.state=A.__s,A.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),B=0;B<A._sb.length;B++)A.__h.push(A._sb[B]);A._sb=[],A.__h.length&&s.push(A);break e}null!=A.componentWillUpdate&&A.componentWillUpdate(b,A.__s,x),null!=A.componentDidUpdate&&A.__h.push((function(){A.componentDidUpdate(y,v,w)}))}if(A.context=x,A.props=b,A.__P=e,A.__e=!1,E=t.__r,S=0,"prototype"in P&&P.prototype.render){for(A.state=A.__s,A.__d=!1,E&&E(n),f=A.render(A.props,A.state,A.context),I=0;I<A._sb.length;I++)A.__h.push(A._sb[I]);A._sb=[]}else do{A.__d=!1,E&&E(n),f=A.render(A.props,A.state,A.context),A.state=A.__s}while(A.__d&&++S<25);A.state=A.__s,null!=A.getChildContext&&(o=p(p({},o),A.getChildContext())),h||null==A.getSnapshotBeforeUpdate||(w=A.getSnapshotBeforeUpdate(y,v)),C(e,d(N=null!=f&&f.type===m&&null==f.key?f.props.children:f)?N:[N],n,r,o,i,a,s,c,l,u),A.base=n.__e,n.__h=null,A.__h.length&&s.push(A),_&&(A.__E=A.__=null)}else null==a&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=j(r.__e,n,r,o,i,a,s,l,u);(f=t.diffed)&&f(n)}catch(e){n.__v=null,(l||null!=a)&&(n.__e=c,n.__h=!!l,a[a.indexOf(c)]=null),t.__e(e,n,r)}}function T(e,n,r){for(var o=0;o<r.length;o++)U(r[o],r[++o],r[++o]);t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function j(t,n,r,o,i,a,s,c,u){var f,p,h,y=r.props,m=n.props,g=n.type,w=0;if("svg"===g&&(i=!0),null!=a)for(;w<a.length;w++)if((f=a[w])&&"setAttribute"in f==!!g&&(g?f.localName===g:3===f.nodeType)){t=f,a[w]=null;break}if(null==t){if(null===g)return document.createTextNode(m);t=i?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,m.is&&m),a=null,c=!1}if(null===g)y===m||c&&t.data===m||(t.data=m);else{if(a=a&&e.call(t.childNodes),p=(y=r.props||l).dangerouslySetInnerHTML,h=m.dangerouslySetInnerHTML,!c){if(null!=a)for(y={},w=0;w<t.attributes.length;w++)y[t.attributes[w].name]=t.attributes[w].value;(h||p)&&(h&&(p&&h.__html==p.__html||h.__html===t.innerHTML)||(t.innerHTML=h&&h.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||S(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||S(e,i,t[i],n[i],r)}(t,m,y,i,c),h)n.__k=[];else if(C(t,d(w=n.props.children)?w:[w],n,r,o,i&&"foreignObject"!==g,a,s,a?a[0]:r.__k&&v(r,0),c,u),null!=a)for(w=a.length;w--;)null!=a[w]&&A(a[w]);c||("value"in m&&void 0!==(w=m.value)&&(w!==t.value||"progress"===g&&!w||"option"===g&&w!==y.value)&&S(t,"value",w,y.value,!1),"checked"in m&&void 0!==(w=m.checked)&&w!==t.checked&&S(t,"checked",w,y.checked,!1))}return t}function U(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function L(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||U(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&L(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||A(e.__e),e.__=e.__e=e.__d=void 0}function O(e,t,n){return this.constructor(e,n)}function D(n,r,o){var i,a,s,c;t.__&&t.__(n,r),a=(i="function"==typeof o)?null:o&&o.__k||r.__k,s=[],c=[],P(r,n=(!i&&o||r).__k=h(m,null,[n]),a||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:a?null:r.firstChild?e.call(r.childNodes):null,s,!i&&o?o:a?a.__e:r.firstChild,i,c),T(s,n,c)}e=u.slice,t={__e:function(e,t,n,r){for(var o,i,a;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),a=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),a=o.__d),a)return o.__E=o}catch(t){e=t}throw e}},n=0,g.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(p({},n),this.props)),e&&p(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),_(this))},g.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),_(this))},g.prototype.render=m,r=[],s="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=function(e,t){return e.__v.__b-t.__v.__b},b.__r=0;var H=o(856),M=o.t(H,2);const W=BigInt(0),R=BigInt(1),z=BigInt(2),$=BigInt(3),G=BigInt(8),F=Object.freeze({a:W,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:R,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),q=(e,t)=>(e+t/z)/t,V={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=F,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-R*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,a=BigInt("0x100000000000000000000000000000000"),s=q(i*e,t),c=q(-r*e,t);let l=_e(e-s*n-c*o,t),u=_e(-s*r-c*i,t);const f=l>a,d=u>a;if(f&&(l=t-l),d&&(u=t-u),l>a||u>a)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:f,k1:l,k2neg:d,k2:u}}},Y=32,Z=32,K=Y+1,J=2*Y+1;function Q(e){const{a:t,b:n}=F,r=_e(e*e),o=_e(r*e);return _e(o+t*e+n)}const X=F.a===W;class ee extends Error{constructor(e){super(e)}}function te(e){if(!(e instanceof ne))throw new TypeError("JacobianPoint expected")}class ne{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof ie))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(ie.ZERO)?ne.ZERO:new ne(e.x,e.y,R)}static toAffineBatch(e){const t=function(e,t=F.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===W?e:(n[o]=e,_e(e*r,t))),R),o=Ce(r,t);return e.reduceRight(((e,r,o)=>r===W?e:(n[o]=_e(e*n[o],t),_e(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return ne.toAffineBatch(e).map(ne.fromAffine)}equals(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:a}=e,s=_e(r*r),c=_e(a*a),l=_e(t*c),u=_e(o*s),f=_e(_e(n*a)*c),d=_e(_e(i*r)*s);return l===u&&f===d}negate(){return new ne(this.x,_e(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=_e(e*e),o=_e(t*t),i=_e(o*o),a=e+o,s=_e(z*(_e(a*a)-r-i)),c=_e($*r),l=_e(c*c),u=_e(l-z*s),f=_e(c*(s-u)-G*i),d=_e(z*t*n);return new ne(u,f,d)}add(e){te(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:a}=e;if(o===W||i===W)return this;if(t===W||n===W)return e;const s=_e(r*r),c=_e(a*a),l=_e(t*c),u=_e(o*s),f=_e(_e(n*a)*c),d=_e(_e(i*r)*s),p=_e(u-l),A=_e(d-f);if(p===W)return A===W?this.double():ne.ZERO;const h=_e(p*p),y=_e(p*h),m=_e(l*h),g=_e(A*A-y-z*m),v=_e(A*(m-g)-f*y),w=_e(r*a*p);return new ne(g,v,w)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=ne.ZERO;if("bigint"==typeof e&&e===W)return t;let n=we(e);if(n===R)return this;if(!X){let e=t,r=this;for(;n>W;)n&R&&(e=e.add(r)),r=r.double(),n>>=R;return e}let{k1neg:r,k1:o,k2neg:i,k2:a}=V.splitScalar(n),s=t,c=t,l=this;for(;o>W||a>W;)o&R&&(s=s.add(l)),a&R&&(c=c.add(l)),l=l.double(),o>>=R,a>>=R;return r&&(s=s.negate()),i&&(c=c.negate()),c=new ne(_e(c.x*V.beta),c.y,c.z),s.add(c)}precomputeWindow(e){const t=X?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(ne.BASE)&&(t=ie.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&oe.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=ne.normalizeZ(r),oe.set(t,r)));let o=ne.ZERO,i=ne.BASE;const a=1+(X?128/n:256/n),s=2**(n-1),c=BigInt(2**n-1),l=2**n,u=BigInt(n);for(let t=0;t<a;t++){const n=t*s;let a=Number(e&c);e>>=u,a>s&&(a-=l,e+=R);const f=n,d=n+Math.abs(a)-1,p=t%2!=0,A=a<0;0===a?i=i.add(re(p,r[f])):o=o.add(re(A,r[d]))}return{p:o,f:i}}multiply(e,t){let n,r,o=we(e);if(X){const{k1neg:e,k1:i,k2neg:a,k2:s}=V.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:u,f}=this.wNAF(s,t);c=re(e,c),u=re(a,u),u=new ne(_e(u.x*V.beta),u.y,u.z),n=c.add(u),r=l.add(f)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return ne.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(ne.ZERO);null==e&&(e=o?G:Ce(r));const i=e,a=_e(i*i),s=_e(a*i),c=_e(t*a),l=_e(n*s),u=_e(r*i);if(o)return ie.ZERO;if(u!==R)throw new Error("invZ was invalid");return new ie(c,l)}}function re(e,t){const n=t.negate();return e?n:t}ne.BASE=new ne(F.Gx,F.Gy,R),ne.ZERO=new ne(W,R,W);const oe=new WeakMap;class ie{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,oe.delete(this)}hasEvenY(){return this.y%z===W}static fromCompressedHex(e){const t=32===e.length,n=ge(t?e:e.subarray(1));if(!Se(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=F,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),a=BigInt(44),s=BigInt(88),c=e*e*e%t,l=c*c*e%t,u=be(l,$)*l%t,f=be(u,$)*l%t,d=be(f,z)*c%t,p=be(d,r)*d%t,A=be(p,o)*p%t,h=be(A,a)*A%t,y=be(h,s)*h%t,m=be(y,a)*A%t,g=be(m,$)*l%t,v=be(g,i)*p%t,w=be(v,n)*c%t,_=be(w,z),b=_*_%t;if(b!==e)throw new Error("Cannot find square root");return _}(Q(n));const o=(r&R)===R;if(t)o&&(r=_e(-r));else{1==(1&e[0])!==o&&(r=_e(-r))}const i=new ie(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=ge(e.subarray(1,Y+1)),n=ge(e.subarray(Y+1,2*Y+1)),r=new ie(t,n);return r.assertValidity(),r}static fromHex(e){const t=ve(e),n=t.length,r=t[0];if(n===Y)return this.fromCompressedHex(t);if(n===K&&(2===r||3===r))return this.fromCompressedHex(t);if(n===J&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${K} compressed bytes or ${J} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return ie.BASE.multiply(Ie(e))}static fromSignature(e,t,n){const{r,s:o}=Pe(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=ke(ve(e)),{n:a}=F,s=2===n||3===n?r+a:r,c=Ce(s,a),l=_e(-i*c,a),u=_e(o*c,a),f=1&n?"03":"02",d=ie.fromHex(f+pe(s)),p=ie.BASE.multiplyAndAddUnsafe(d,l,u);if(!p)throw new Error("Cannot recover signature: point at infinify");return p.assertValidity(),p}toRawBytes(e=!1){return me(this.toHex(e))}toHex(e=!1){const t=pe(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${pe(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Se(t)||!Se(n))throw new Error(e);const r=_e(n*n);if(_e(r-Q(t))!==W)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new ie(this.x,_e(-this.y))}double(){return ne.fromAffine(this).double().toAffine()}add(e){return ne.fromAffine(this).add(ne.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return ne.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=ne.fromAffine(this),o=t===W||t===R||this!==ie.BASE?r.multiplyUnsafe(t):r.multiply(t),i=ne.fromAffine(e).multiplyUnsafe(n),a=o.add(i);return a.equals(ne.ZERO)?void 0:a.toAffine()}}function ae(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function se(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${fe(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:ge(n),left:e.subarray(t+2)}}ie.BASE=new ie(F.Gx,F.Gy),ie.ZERO=new ie(W,W);class ce{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?fe(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new ce(ye(r.slice(0,64)),ye(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${fe(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=se(e.subarray(2)),{data:r,left:o}=se(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${fe(o)}`);return{r:t,s:r}}(t?e:me(e));return new ce(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Ee(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ee(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=F.n>>R;return this.s>e}normalizeS(){return this.hasHighS()?new ce(this.r,_e(-this.s,F.n)):this}toDERRawBytes(){return me(this.toDERHex())}toDERHex(){const e=ae(he(this.s)),t=ae(he(this.r)),n=e.length/2,r=t.length/2,o=he(n),i=he(r);return`30${he(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return me(this.toCompactHex())}toCompactHex(){return pe(this.r)+pe(this.s)}}function le(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const ue=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function fe(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=ue[e[n]];return t}const de=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function pe(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(W<=e&&e<de))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function Ae(e){const t=me(pe(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function he(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ye(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function me(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function ge(e){return ye(fe(e))}function ve(e){return e instanceof Uint8Array?Uint8Array.from(e):me(e)}function we(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Ee(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function _e(e,t=F.P){const n=e%t;return n>=W?n:t+n}function be(e,t){const{P:n}=F;let r=e;for(;t-- >W;)r*=r,r%=n;return r}function Ce(e,t=F.P){if(e===W||t<=W)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=_e(e,t),r=t,o=W,i=R,a=R,s=W;for(;n!==W;){const e=r/n,t=r%n,c=o-a*e,l=i-s*e;r=n,n=t,o=a,i=s,a=c,s=l}if(r!==R)throw new Error("invert: does not exist");return _e(o,t)}function ke(e,t=!1){const n=function(e){const t=8*e.length-8*Z,n=ge(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=F;return n>=r?n-r:n}let xe,Be;function Ee(e){return W<e&&e<F.n}function Se(e){return W<e&&e<F.P}function Ie(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*Z)throw new Error("Expected 32 bytes of private key");t=ye(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==Z)throw new Error("Expected 32 bytes of private key");t=ge(e)}if(!Ee(t))throw new Error("Expected private key: 0 < key < n");return t}function Ne(e){return e instanceof ie?(e.assertValidity(),e):ie.fromHex(e)}function Pe(e){if(e instanceof ce)return e.assertValidity(),e;try{return ce.fromDER(e)}catch(t){return ce.fromCompact(e)}}function Te(e){return _e(ge(e),F.n)}class je{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=ve(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=ge(t.subarray(0,32)),r=ge(t.subarray(32,64));return new je(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Se(e)||!Ee(t))throw new Error("Invalid signature")}toHex(){return pe(this.r)+pe(this.s)}toRawBytes(){return me(this.toHex())}}class Ue{constructor(e,t,n=$e.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=ve(e);const{x:r,scalar:o}=this.getScalar(Ie(t));if(this.px=r,this.d=o,this.rand=ve(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=ie.fromPrivateKey(e),n=t.hasEvenY()?e:F.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return Ae(e^ge(t))}finalizeNonce(e){const t=_e(ge(e),F.n);if(t===W)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new je(e.x,_e(t+n*r,F.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=$e.taggedHash,i=this.initNonce(t,await o(Re.aux,r)),{R:a,rx:s,k:c}=this.finalizeNonce(await o(Re.nonce,i,n,e)),l=Te(await o(Re.challenge,s,n,e)),u=this.finalizeSig(a,c,l,t);return await De(u,e,n)||this.error(),u}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=$e.taggedHashSync,i=this.initNonce(t,o(Re.aux,r)),{R:a,rx:s,k:c}=this.finalizeNonce(o(Re.nonce,i,n,e)),l=Te(o(Re.challenge,s,n,e)),u=this.finalizeSig(a,c,l,t);return He(u,e,n)||this.error(),u}}function Le(e,t,n){const r=e instanceof je,o=r?e:je.fromHex(e);return r&&o.assertValidity(),{...o,m:ve(t),P:Ne(n)}}function Oe(e,t,n,r){const o=ie.BASE.multiplyAndAddUnsafe(t,Ie(n),_e(-r,F.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function De(e,t,n){try{const{r,s:o,m:i,P:a}=Le(e,t,n),s=Te(await $e.taggedHash(Re.challenge,Ae(r),a.toRawX(),i));return Oe(r,a,o,s)}catch(e){return!1}}function He(e,t,n){try{const{r,s:o,m:i,P:a}=Le(e,t,n),s=Te($e.taggedHashSync(Re.challenge,Ae(r),a.toRawX(),i));return Oe(r,a,o,s)}catch(e){if(e instanceof ee)throw e;return!1}}const Me={Signature:je,getPublicKey:function(e){return ie.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new Ue(e,t,n).calc()},verify:De,signSync:function(e,t,n){return new Ue(e,t,n).calcSync()},verifySync:He};ie.BASE._setWindowSize(8);const We={node:M,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},Re={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},ze={},$e={bytesToHex:fe,hexToBytes:me,concatBytes:le,mod:_e,invert:Ce,isValidPrivateKey(e){try{return Ie(e),!0}catch(e){return!1}},_bigintTo32Bytes:Ae,_normalizePrivateKey:Ie,hashToPrivateKey:e=>{e=ve(e);const t=Z+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return Ae(_e(ge(e),F.n-R)+R)},randomBytes:(e=32)=>{if(We.web)return We.web.getRandomValues(new Uint8Array(e));if(We.node){const{randomBytes:t}=We.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>$e.hashToPrivateKey($e.randomBytes(Z+8)),precompute(e=8,t=ie.BASE){const n=t===ie.BASE?t:new ie(t.x,t.y);return n._setWindowSize(e),n.multiply($),n},sha256:async(...e)=>{if(We.web){const t=await We.web.subtle.digest("SHA-256",le(...e));return new Uint8Array(t)}if(We.node){const{createHash:t}=We.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(We.web){const n=await We.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=le(...t),o=await We.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(We.node){const{createHmac:n}=We.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=ze[e];if(void 0===n){const t=await $e.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),ze[e]=n}return $e.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof xe)throw new ee("sha256Sync is undefined, you need to set it");let n=ze[e];if(void 0===n){const t=xe(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=le(t,t),ze[e]=n}return xe(n,...t)},_JacobianPoint:ne};Object.defineProperties($e,{sha256Sync:{configurable:!1,get:()=>xe,set(e){xe||(xe=e)}},hmacSha256Sync:{configurable:!1,get:()=>Be,set(e){Be||(Be=e)}}});var Ge=o(632),Fe=o(715),qe=new TextDecoder("utf-8"),Ve=Array.from({length:256},(function(e,t){return t.toString(16).padStart(2,"0")}));function Ye(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}function Ze(e){var t=Ye(e),n=Fe.gW.toWords(t);return Fe.gW.encode("note",n,120)}function Ke(e){var t=Ye(e),n=Fe.gW.toWords(t);return Fe.gW.encode("npub",n,120)}function Je(e){return Fe.gW.fromWords(e).map((function(e){return e.toString(16).padStart(2,"0")})).join("")}function Qe(e){var t=Fe.gW.decode(e,120);return"npub"!=t.prefix?"":Je(t.words)}function Xe(e){return"".concat(e.slice(0,12),"...").concat(e.slice(-4))}function et(e){return(e/=1e3)>=1e6?Math.round(e/1e5)/10+"M":e>=1e3?Math.round(e/100)/10+"K":e}function tt(e){for(var t={},n=e;n.length>0;){var r=n[0],o=n[1],i=n.slice(2,2+o);n=n.slice(2+o),i.length<o||(t[r]=t[r]||[],t[r].push(i))}return t}function nt(e){if(!(e instanceof Uint8Array))throw new Error("Uint8Array expected");for(var t="",n=0;n<e.length;n++)t+=Ve[e[n]];return t}var rt,ot,it,at,st=0,ct=[],lt=[],ut=t.__b,ft=t.__r,dt=t.diffed,pt=t.__c,At=t.unmount;function ht(e,n){t.__h&&t.__h(ot,e,st||n),st=0;var r=ot.__H||(ot.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:lt}),r.__[e]}function yt(e){return st=1,function(e,t,n){var r=ht(rt++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):bt(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=ot,!ot.u)){var o=function(e,t,n){if(!r.__c.__H)return!0;var o=r.__c.__H.__.filter((function(e){return e.__c}));if(o.every((function(e){return!e.__N})))return!i||i.call(this,e,t,n);var a=!1;return o.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(a=!0)}})),!(!a&&r.__c.props===e)&&(!i||i.call(this,e,t,n))};ot.u=!0;var i=ot.shouldComponentUpdate,a=ot.componentWillUpdate;ot.componentWillUpdate=function(e,t,n){if(this.__e){var r=i;i=void 0,o(e,t,n),i=r}a&&a.call(this,e,t,n)},ot.shouldComponentUpdate=o}return r.__N||r.__}(bt,e)}function mt(){for(var e;e=ct.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(wt),e.__H.__h.forEach(_t),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){ot=null,ut&&ut(e)},t.__r=function(e){ft&&ft(e),rt=0;var t=(ot=e.__c).__H;t&&(it===ot?(t.__h=[],ot.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=lt,e.__N=e.i=void 0}))):(t.__h.forEach(wt),t.__h.forEach(_t),t.__h=[],rt=0)),it=ot},t.diffed=function(e){dt&&dt(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==ct.push(n)&&at===t.requestAnimationFrame||((at=t.requestAnimationFrame)||vt)(mt)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==lt&&(e.__=e.__V),e.i=void 0,e.__V=lt}))),it=ot=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(wt),e.__h=e.__h.filter((function(e){return!e.__||_t(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),pt&&pt(e,n)},t.unmount=function(e){At&&At(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{wt(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var gt="function"==typeof requestAnimationFrame;function vt(e){var t,n=function(){clearTimeout(r),gt&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);gt&&(t=requestAnimationFrame(n))}function wt(e){var t=ot,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),ot=t}function _t(e){var t=ot;e.__c=e.__(),ot=t}function bt(e,t){return"function"==typeof t?t(e):t}var Ct=0;function kt(e,n,r,o,i,a){var s,c,l={};for(c in n)"ref"==c?s=n[c]:l[c]=n[c];var u={type:e,props:l,key:r,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--Ct,__source:i,__self:a};if("function"==typeof e&&(s=e.defaultProps))for(c in s)void 0===l[c]&&(l[c]=s[c]);return t.vnode&&t.vnode(u),u}const xt=function(e){var t=e.additionalClasses,n="copyIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};var Bt=o(379),Et=o.n(Bt),St=o(795),It=o.n(St),Nt=o(569),Pt=o.n(Nt),Tt=o(565),jt=o.n(Tt),Ut=o(216),Lt=o.n(Ut),Ot=o(589),Dt=o.n(Ot),Ht=o(218),Mt={};Mt.styleTagTransform=Dt(),Mt.setAttributes=jt(),Mt.insert=Pt().bind(null,"head"),Mt.domAPI=It(),Mt.insertStyleElement=Lt();Et()(Ht.Z,Mt);Ht.Z&&Ht.Z.locals&&Ht.Z.locals;function Wt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,s=[],c=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Rt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Rt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const zt=function(e){var t=e.iconClasses,n=e.displayText,r=e.copyText,o=Wt(yt("linkCopyBtn"),2),i=o[0],a=o[1];return kt("button",{class:i,onClick:function(){return function(){try{navigator.clipboard.writeText(r),a("".concat(i," green")),setTimeout((function(){a(i.replace("green","").trim())}),500)}catch(e){console.error("Failed to copy: ",e)}}()},children:[kt(xt,{additionalClasses:t}),n&&kt("span",{class:"displayText",children:n}),kt("span",{class:"copyText",children:r})]})};const $t=function(e){var t=e.additionalClasses,n="keyIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};const Gt=function(e){var t=e.additionalClasses,n="nostrichIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{width:"3rem",height:"3rem",viewBox:"0 0 674 769",xmlns:"http://www.w3.org/2000/svg",class:n,children:kt("path",{d:"M567.729 324.967C582.946 428.084 475.795 449.465 415.027 447.318C411.705 447.2 408.57 448.819 406.631 451.519C400.387 460.214 389.956 472.017 381.958 472.017C373.127 472.017 365.191 489.217 361.675 499.621C361.36 500.555 362.279 501.414 363.216 501.11C459.852 469.719 497.737 458.954 514.046 461.974C527.194 464.409 551.785 508.438 562.437 530.148C535.959 531.67 527.133 507.931 521.046 503.67C516.176 500.261 514.35 515.844 514.046 524.061C508.263 521.018 500.959 516.757 500.35 503.67C499.741 490.583 493.046 493.931 487.872 494.539C482.698 495.148 403.263 520.713 391.393 524.061C379.523 527.409 365.828 531.974 354.567 539.887C335.697 549.018 323.523 542.626 320.175 527.105C317.497 514.687 334.886 476.481 343.915 458.93C332.755 463.09 309.584 471.53 306.175 472.017C302.854 472.492 260.547 505.172 238.203 522.707C237.091 523.58 236.38 524.849 236.134 526.241C232.627 546.054 221.157 551.516 201.175 561.8C185.117 570.066 128.822 656.684 100.272 702.803C98.5858 705.526 96.1126 707.629 93.4202 709.363C74.9686 721.249 56.0179 753.013 48.3915 768.453C37.6784 737.532 51.6379 710.931 59.9568 701.497C56.3046 698.331 47.8843 700.178 44.1306 701.497C54.4785 665.888 90.6961 665.888 89.4787 665.888C96.1744 660.105 174.696 547.8 176.523 542.626C178.336 537.488 175.346 513.436 214.962 500.287C215.495 500.11 216.024 499.866 216.497 499.563C247.306 479.802 270.423 447.869 278.175 434.278C236.462 431.409 188.596 407.816 164.366 393.152C159.873 390.432 155.077 388.105 149.871 387.407C115.764 382.835 81.3285 404.791 67.5655 417.235C61.9655 409.443 68.2757 386.8 72.1308 376.452C58.4959 374.504 38.4495 394.307 30.1306 404.452C21.1218 390.33 29.0146 365.089 34.0871 354.234C16.0696 354.721 3.85509 362.959 0 367.017C14.9131 255.93 128.984 288.237 130.261 289.712C124.174 283.382 124.682 275.104 125.696 271.756C194.783 273.582 227.045 262.017 247.436 250.147C408.132 160.364 477.372 215.451 502.937 229.299C528.502 243.147 574.916 248.777 607.025 235.995C645.373 218.647 639.599 173.93 631.829 156.864C623.307 138.146 575.22 112.276 558.176 79.5591C541.133 46.8422 555.825 5.93789 575.728 1.51061C594.802 -2.73213 607.975 2.37383 618.285 11.6891C625.159 17.8994 644.46 22.3413 652.525 25.2326C660.59 28.1239 673.981 31.9283 673.221 34.2109C672.46 36.4935 659.548 36.1889 657.547 36.1889C653.438 36.1889 648.568 36.7976 653.438 39.0802C659.243 41.4348 668.053 44.8745 672.095 47.088C672.549 47.3366 672.454 47.9791 671.955 48.1156C643.858 55.798 618.768 40.1108 600.177 58.102C581.307 76.363 621.481 90.363 642.177 112.276C662.873 134.189 684.177 160.363 667.134 220.016C653.874 266.424 598.093 305.848 569.654 321.045C568.255 321.793 567.497 323.398 567.729 324.967Z",fill:"#7A3BFF"})})};function Ft(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,s=[],c=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return qt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return qt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Vt=function(e){var t=e.thumbnail,n=e.fullImage,r=e.isProfileImage,o=void 0===r||r,i=Ft(yt(!1),2),a=i[0],s=i[1],c=Ft(yt(t),2),l=c[0],u=c[1];return l?kt("img",{className:o?"profileImg ":"followedProdileImg",src:l,onError:function(){a?u(null):(u(n),s(!0))}}):kt("div",{class:"profileWithoutImg"})};const Yt=function(e){var t,n,r,o=e.profilePkey,i=e.profile,a=e.options;return o&&(n=Ke(o),r="".concat(Xe(n)),t="https://media.nostr.band/thumbs/".concat(o.slice(-4),"/").concat(o,"-picture-64")),kt("div",{className:"cardProfile",children:[t&&i.picture?kt(Vt,{thumbnail:t,fullImage:i.picture}):kt("div",{className:"profileWithoutImg"}),kt("div",{className:"profileDetails",children:[kt("div",{className:"profileName",children:kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://nostr.band/".concat(n),children:(null==i?void 0:i.display_name)||(null==i?void 0:i.name)||"Loading..."})}),kt("div",{className:"profilePkey",children:[kt($t,{additionalClasses:"w-4 h-4"}),kt("span",{className:"pkey",children:r||"npub..."}),kt(zt,{iconClasses:"w-4 h-4",copyText:n})]})]}),a&&!a.hideNostrich?kt("div",{className:"nostrichLink",children:kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://njump.me",className:"linkLink",children:kt(Gt,{additionalClasses:"w-4 h-4"})})}):null]})};const Zt=function(e){var t=e.additionalClasses,n="boltIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z"})})};const Kt=function(e){var t=e.additionalClasses,n="heartIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Jt=function(e){var t=e.additionalClasses,n="linkIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Qt=function(e){var t=e.additionalClasses,n="replyIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const Xt=function(e){var t=e.additionalClasses,n="repostIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const en=function(e){var t,n,r,o=e.note,i=e.profilesList,a=e.repliesCount,s=e.repostsCount,c=e.likesCount,l=e.zapAmount,u=e.options,f=o?o.created_at:i?i.created_at:null;return f&&(n=new Date(1e3*f).toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"})),o&&o.id&&(t=Ze(o.id)),i&&(t=i.id),r=et(l),kt("div",{className:"cardMeta",children:[kt("div",{className:"cardDate",children:n}),kt("hr",{}),kt("div",{className:"cardInteractions",children:[null!=u&&u.hideCounters?null:kt(m,{children:[u&&u.showZaps?kt("div",{className:"interactionContainer",title:"Total sats zapped",children:[kt(Zt,{additionalClasses:"w-5 h-5"}),kt("span",{className:"zapAmount",children:r})]}):null,kt("div",{className:"interactionContainer",title:"Number of replies",children:[kt(Qt,{additionalClasses:"w-5 h-5"}),kt("span",{className:"repliesCount",children:a})]}),kt("div",{className:"interactionContainer",title:"Number of reposts",children:[kt(Xt,{additionalClasses:"w-5 h-5"}),kt("span",{className:"repostsCount",children:s})]}),kt("div",{className:"interactionContainer",title:"Number of likes",children:[kt(Kt,{additionalClasses:"w-5 h-5"}),kt("span",{className:"likesCount",children:c})]})]}),kt("div",{className:"interactionContainer",children:kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:o?"https://nostr.band/".concat(t):"https://listr.lol/a/".concat(i.naddr),className:"linkLink",children:[kt(Jt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),kt("span",{className:"displayText",children:"Open"})]})}),u&&u.showCopyAddr?kt("div",{className:"interactionContainer",children:kt(zt,{iconClasses:"w-5 h-5",displayText:o?"Copy Note ID":"Copy ID",copyText:o||i.naddr})}):null]})]})};var tn=[".jpg",".jpeg",".png",".webp",".gif"],nn=[".mov",".mp4"],rn=["youtube"],on=9735;function an(e){var t=e.state,n=e.props;return kt("div",{className:"nostrEmbedCard",children:[kt(Yt,{profilePkey:null==t?void 0:t.id.data.pubkey,profile:null==t?void 0:t.profile,options:null==n?void 0:n.options}),kt("div",{children:[kt("h3",{className:"cardTitle",children:[3!==(null==t?void 0:t.kind)&&null!=t&&t.profilesList.name?null==t?void 0:t.profilesList.name:null==t?void 0:t.profilesList.d,3===(null==t?void 0:t.kind)&&"Following ","(",null!=t&&t.taggedProfiles?null==t?void 0:t.countTaggedProfiles:0,")"]}),3!==(null==t?void 0:t.kind)&&kt("p",{className:"cardDescription",children:null==t?void 0:t.profilesList.description}),kt("div",{className:"cardList",children:[Object.keys(null==t?void 0:t.taggedProfiles).map((function(e){return kt("div",{children:kt(Yt,{profilePkey:e,profile:null==t?void 0:t.taggedProfiles[e]})},e+"taggedProfile")})),(null==t?void 0:t.countTaggedProfiles)>0&&(null==t?void 0:t.countTaggedProfiles)>Object.keys(null==t?void 0:t.taggedProfiles).length?kt("div",{className:"diffProfiles",children:["And ",sn(t)," more profiles."]}):null]}),(null==t?void 0:t.profilesList.error)&&kt("div",{className:"cardContent ne-text-red-800",children:null==t?void 0:t.profilesList.content})]}),kt(en,{profilesList:null==t?void 0:t.profilesList,likesCount:null==t?void 0:t.likesCount,repliesCount:null==t?void 0:t.repliesCount,repostsCount:null==t?void 0:t.repostsCount,zapAmount:null==t?void 0:t.zapAmount,options:null==n?void 0:n.options})]})}function sn(e){var t;return Object.keys(null==e?void 0:e.taggedProfiles).length>0&&null!=e&&e.countTaggedProfiles&&(t=(null==e?void 0:e.countTaggedProfiles)-Object.keys(null==e?void 0:e.taggedProfiles).length),t}const cn=function(e){var t=e.additionalClasses,n="followersIcon";if(t){var r=t.split(" ");r.push(n),n=r.join(" ")}return kt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:kt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"})})};const ln=function(e){var t,n,r=e.profile,o=e.followersCount,i=e.zapAmount,a=e.options;return r&&r.pubkey&&(t=Ke(r.pubkey),n=et(i)),kt("div",{className:"cardMeta",children:[kt("hr",{}),kt("div",{className:"cardInteractions",children:[null!=a&&a.hideCounters?null:kt(m,{children:[a&&a.showZaps?kt("div",{className:"interactionContainer",title:"Total sats zapped",children:[kt(Zt,{additionalClasses:"w-5 h-5"}),kt("span",{className:"zapAmount",children:n})]}):null,kt("div",{className:"interactionContainer",title:"Number of followers",children:[kt(cn,{additionalClasses:"w-5 h-5"}),kt("span",{className:"followersCount",children:o})]})]}),kt("div",{className:"interactionContainer",children:kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://nostr.band/".concat(t),className:"linkLink",children:[kt(Jt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),kt("span",{className:"displayText",children:"Open"})]})}),a&&a.showCopyAddr?kt("div",{className:"interactionContainer",children:kt(zt,{iconClasses:"w-5 h-5",displayText:"Copy Npub",copyText:t})}):null]})]})};const un=function(e){var t,n,r,o,i,a,s=e.follows,c=void 0===s?[]:s,l=e.options;if(null==l||!l.showFollowing)return kt(m,{});var u=c.slice(0,10).map((function(e){var t,n=JSON.parse(e.content);return{id:null==e?void 0:e.id,npubLink:"https://nostr.band/".concat(Ke(null==e?void 0:e.pubkey)),display_name:null==n?void 0:n.display_name,picture:null==n?void 0:n.picture,cachedImage:(t=null==e?void 0:e.pubkey,"https://media.nostr.band/thumbs/".concat(t.slice(-4),"/").concat(t,"-picture-64")),name:null==n?void 0:n.name}})),f=u.filter((function(e){return e.name&&e.display_name}));return kt("div",{children:[kt("hr",{}),kt("div",{className:"ne-flex ne-gap-6 ne-flex-wrap ne-items-center ne-mt-8",children:[kt("ul",{className:"ne-list-none ne-p-0 ne-flex ne-ms-[25px] ne-m-0 ne-items-center",children:u.map((function(e){return kt("li",{children:kt("a",{className:"ne-inline-block",rel:"noopener noreferrer nofollow",target:"_blank",href:e.npubLink,children:kt(Vt,{fullImage:null==e?void 0:e.picture,thumbnail:null==e?void 0:e.cachedImage,isProfileImage:!1})})},null==e?void 0:e.id)}))}),kt("div",{children:[kt("h2",{className:"ne-m-0 ne-font-bold ne-text-lg",children:["Follows ",c.length," profiles"]}),kt("div",{className:"ne-m-0 ne-text-sm",children:["Including "," ",kt("a",{rel:"noopener noreferrer nofollow",target:"_blank",className:"ne-text-black",href:null===(t=f[0])||void 0===t?void 0:t.npubLink,children:null===(n=f[0])||void 0===n?void 0:n.display_name}),f[1]?", ":"",kt("a",{rel:"noopener noreferrer nofollow",target:"_blank",className:"ne-text-black",href:null===(r=f[1])||void 0===r?void 0:r.npubLink,children:null===(o=f[1])||void 0===o?void 0:o.display_name}),f[2]?" and ":"",kt("a",{rel:"noopener noreferrer nofollow",target:"_blank",className:"ne-text-black",href:null===(i=f[2])||void 0===i?void 0:i.npubLink,children:null===(a=f[2])||void 0===a?void 0:a.display_name})]})]})]})]})};function fn(e){var t,n,r,o,i=e.state,a=e.props;return kt("div",{className:"nostrEmbedCard",children:[kt(Yt,{profilePkey:null==i?void 0:i.id,profile:null==i?void 0:i.profile,options:null==a?void 0:a.options}),kt("div",{className:null!=i&&i.profile.error?"cardContent ne-text-red-800":"cardContent",children:[null!=i&&null!==(t=i.profile)&&void 0!==t&&t.website?kt("p",{children:["Website:"," ",kt("a",{href:null==i||null===(n=i.profile)||void 0===n?void 0:n.website,target:"_blank",rel:"noopener noreferrer nofollow",children:null==i||null===(r=i.profile)||void 0===r?void 0:r.website})]}):"",(null==i||null===(o=i.profile)||void 0===o?void 0:o.about)||"Loading..."]}),Boolean(null==i?void 0:i.follows.length)&&kt(un,{follows:null==i?void 0:i.follows,options:null==a?void 0:a.options}),kt(ln,{profile:null==i?void 0:i.profile,followersCount:null==i?void 0:i.followersCount,zapAmount:null==i?void 0:i.zapAmount,options:null==a?void 0:a.options})]})}function dn(e){var t=e.state;return kt("div",{className:"nostrEmbedCard",children:["Zap content: ",JSON.stringify(null==t?void 0:t.event)]})}function pn(e){if(null==e||!e.event.content)return"";var t=function(e){var t,n="".concat((t=e).slice(0,10),"...").concat(t.slice(-4));return kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://nostr.band/".concat(e),children:n})},n=function(t,n){var r=Xe(t);if(n in(null==e?void 0:e.taggedProfiles)){var o=null==e?void 0:e.taggedProfiles[n];r=(null==o?void 0:o.name)||(null==o?void 0:o.display_name)||r}return kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://nostr.band/".concat(t),children:["@",r]})},r=null==e?void 0:e.event,o=r.content.split(/(#\[\d+\])/gi).map((function(e){var o=e.match(/#\[(\d+)\]/);if(o&&2===o.length){var i=parseInt(o[1]);if(i<r.tags.length&&r.tags[i].length>=2){var a=r.tags[i];switch(a[0]){case"p":return n(Ke(a[1]),a[1]);case"e":return t(Ze(a[1]));case"t":return kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:"https://nostr.band/?q=%23".concat(a[1]),children:["#",a[1]]})}}return e}return e.split(/(nostr:[a-z0-9]+)/gi).map((function(e){var r=e.match(/nostr:([a-z0-9]+)/);if(r&&2===r.length){if(r[1].startsWith("note1")||r[1].startsWith("nevent1")||r[1].startsWith("naddr1"))return t(r[1]);if(r[1].startsWith("npub1")){var o=r[1],i=Qe(r[1]);if(i)return n(o,i)}else if(r[1].startsWith("nprofile1")){var a=function(e){var t,n=Fe.gW.decode(e,300);if("nprofile"!=n.prefix)return null;var r=tt(new Uint8Array(Fe.gW.fromWords(n.words)));if(null===(t=r[0])||void 0===t||!t[0])throw new Error("missing TLV 0 for nprofile");if(32!==r[0][0].length)throw new Error("TLV 0 should be 32 bytes");return{type:"nprofile",data:{pubkey:nt(r[0][0]),relays:r[1]?r[1].map((function(e){return qe.decode(e)})):[]}}}(r[1]),s=(a.type,a.data);if(s){var c=Ke(s.pubkey);return n(c,s.pubkey)}}return e}return e.split(/((?:http|ftp|https):\/\/(?:[\w+?.\w+])+(?:[a-zA-Z0-9~!@#$%^&*()_\-=+\\/?.:;',]*)?(?:[-A-Za-z0-9+&@#/%=~_|]))/i).map((function(e){return e.match(/^https?:\/\//)?function(e){return function(e){var t=yn(hn(e),0);return An(t,nn)}(e)?kt("div",{className:"cardContentMedia",children:kt("video",{src:e,controls:!0})}):function(e){var t=yn(hn(e),0);return An(t,tn)}(e)?kt("div",{className:"cardContentMedia",children:kt("img",{className:"cardContentImage",src:e,alt:""})}):function(e){var t=yn(hn(e),0);return function(e,t){return t.some((function(t){return e.includes(t)}))}(t,rn)}(e)?(e.includes("/watch")&&(e=(e=e.replace("/watch","/embed")).replace("?v=","/")),kt("div",{className:"cardContentMedia",children:kt("iframe",{src:e})})):kt("a",{target:"_blank",rel:"noopener noreferrer nofollow",href:e,children:e})}(e):e}))}))}));return o}function An(e,t){return t.some((function(t){return e.endsWith(t)}))}function hn(e){return e.toLowerCase()}function yn(e,t){var n=e.split("?");return n.length>t?n[t]:e}function mn(e){var t=e.state,n=e.props;return kt("div",{className:"nostrEmbedCard",children:[kt(Yt,{profilePkey:null==t?void 0:t.profilePkey,profile:null==t?void 0:t.profile,options:null==n?void 0:n.options}),kt("div",{className:null!=t&&t.event.error?"cardContent ne-text-red-800":"cardContent",children:pn(t)}),kt(en,{note:null==t?void 0:t.event,likesCount:null==t?void 0:t.likesCount,repliesCount:null==t?void 0:t.repliesCount,repostsCount:null==t?void 0:t.repostsCount,zapAmount:null==t?void 0:t.zapAmount,options:null==n?void 0:n.options})]})}function gn(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return vn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return vn(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function vn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function wn(e){return wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wn(e)}function _n(){_n=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function l(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),s=new x(o||[]);return r(a,"_invoke",{value:_(e,n,s)}),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f={};function d(){}function p(){}function A(){}var h={};c(h,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(B([])));m&&m!==t&&n.call(m,i)&&(h=m);var g=A.prototype=d.prototype=Object.create(h);function v(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,i,a,s){var c=u(e[r],e,i);if("throw"!==c.type){var l=c.arg,f=l.value;return f&&"object"==wn(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,s)}),(function(e){o("throw",e,a,s)})):t.resolve(f).then((function(e){l.value=e,a(l)}),(function(e){return o("throw",e,a,s)}))}s(c.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function _(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return E()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=b(a,n);if(s){if(s===f)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=u(e,t,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===f)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}function b(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=u(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function B(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:E}}function E(){return{value:void 0,done:!0}}return p.prototype=A,r(g,"constructor",{value:A,configurable:!0}),r(A,"constructor",{value:p,configurable:!0}),p.displayName=c(A,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,c(e,s,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},v(w.prototype),c(w.prototype,a,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new w(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(g),c(g,s,"Generator"),c(g,i,(function(){return this})),c(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=B,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:B(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function bn(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function Cn(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){bn(i,r,o,a,s,"next",e)}function s(e){bn(i,r,o,a,s,"throw",e)}a(void 0)}))}}function kn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=r.key,i=void 0,i=function(e,t){if("object"!==wn(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==wn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===wn(i)?i:String(i)),r)}var o,i}function xn(e,t){return xn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},xn(e,t)}function Bn(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=En(e);if(t){var o=En(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"===wn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function En(e){return En=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},En(e)}var Sn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&xn(e,t)}(c,e);var t,n,r,o,i,a,s=Bn(c);function c(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),t=s.call(this,e);var n=e.id,r=1;return e.id.startsWith("npub1")?(n=Qe(e.id),r=0):e.id.startsWith("note1")?n=function(e){var t=Fe.gW.decode(e,120);return"note"!=t.prefix?"":Je(t.words)}(e.id):e.id.startsWith("naddr")&&(n=function(e){var t,n,r;if(e){var o=Fe.gW.decode(e,300),i=tt(new Uint8Array(Fe.gW.fromWords(o.words)));if(null===(t=i[0])||void 0===t||!t[0])throw new Error("missing TLV 0 for naddr");if(null===(n=i[2])||void 0===n||!n[0])throw new Error("missing TLV 2 for naddr");if(32!==i[2][0].length)throw new Error("TLV 2 should be 32 bytes");if(null===(r=i[3])||void 0===r||!r[0])throw new Error("missing TLV 3 for naddr");if(4!==i[3][0].length)throw new Error("TLV 3 should be 4 bytes");return{type:"naddr",data:{identifier:qe.decode(i[0][0]),pubkey:nt(i[2][0]),kind:parseInt(nt(i[3][0]),16),relays:i[1]?i[1].map((function(e){return qe.decode(e)})):[]}}}}(e.id),r=3),t.state={id:n,kind:r,relay:e.relay,event:{},profile:{},profilesList:{},taggedProfiles:{},follows:[],profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0,zapAmount:0,followersCount:0,countTaggedProfiles:0},t}return t=c,n=[{key:"sha256",value:function(e){var t=(new TextEncoder).encode(e);return $e.sha256(t).then((function(e){return Array.from(new Uint8Array(e)).map((function(e){return e.toString(16).padStart(2,"0")})).join("")}))}},{key:"getNostrEventID",value:(a=Cn(_n().mark((function e(t){var n,r;return _n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=[0,t.pubkey,t.created_at,t.kind,t.tags,t.content],r=JSON.stringify(n),e.next=4,this.sha256(r);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"verifyNostrSignature",value:function(e){return Me.verify(e.sig,e.id,e.pubkey)}},{key:"validateNostrEvent",value:(i=Cn(_n().mark((function e(t){var n,r,o;return _n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t.id,e.next=3,this.getNostrEventID(t);case 3:if(e.t1=e.sent,e.t0===e.t1){e.next=6;break}return e.abrupt("return",!1);case 6:if("string"==typeof t.content){e.next=8;break}return e.abrupt("return",!1);case 8:if("number"==typeof t.created_at){e.next=10;break}return e.abrupt("return",!1);case 10:if(Array.isArray(t.tags)){e.next=12;break}return e.abrupt("return",!1);case 12:n=0;case 13:if(!(n<t.tags.length)){e.next=27;break}if(r=t.tags[n],Array.isArray(r)){e.next=17;break}return e.abrupt("return",!1);case 17:o=0;case 18:if(!(o<r.length)){e.next=24;break}if("object"!==wn(r[o])){e.next=21;break}return e.abrupt("return",!1);case 21:o++,e.next=18;break;case 24:n++,e.next=13;break;case 27:return e.abrupt("return",!0);case 28:case"end":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:"isValidEvent",value:(o=Cn(_n().mark((function e(t){return _n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t1=t.id&&t.pubkey&&t.sig,!e.t1){e.next=5;break}return e.next=4,this.validateNostrEvent(t);case 4:e.t1=e.sent;case 5:if(e.t0=e.t1,!e.t0){e.next=8;break}e.t0=this.verifyNostrSignature(t);case 8:return e.abrupt("return",e.t0);case 9:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"componentDidMount",value:function(){var e=this,t=function(t){switch(e.state.kind){case 0:return e.fetchProfile({socket:t,profilePkey:e.state.id});case 1:return e.fetchEvent({socket:t,noteId:e.state.id});case 3:return e.fetchNaddr({socket:t,data:e.state.id.data})}};window.__nostrEmbed||(window.__nostrEmbed={sockets:{}});var n=null;if(this.state.relay in window.__nostrEmbed.sockets&&(1==(n=window.__nostrEmbed.sockets[this.state.relay]).readyState?t(n):0==n.readyState?n.starts.push(t):n=null),!n){n=new WebSocket(this.state.relay),window.__nostrEmbed.sockets[this.state.relay]=n,n.starts=[t],n.onopen=function(){console.log("Connected to Nostr relay: ".concat(n.url));var e,t=gn(n.starts);try{for(t.s();!(e=t.n()).done;)(0,e.value)(n)}catch(e){t.e(e)}finally{t.f()}n.starts=null},n.onerror=function(e){console.log("Failed to connect to Nostr relay: ".concat(n.url,"}"))};var r={};n.onmessage=function(e){try{var t=JSON.parse(e.data);if(!t||!t.length)throw"Bad reply from relay";if("NOTICE"==t[0]&&2==t.length)return void console.log("notice from",n.url,t[1]);if("EOSE"==t[0]&&t.length>1)return void(t[1]in r&&r[t[1]].on_event(null));if("COUNT"==t[0]&&3==t.length)return void(t[1]in r&&r[t[1]].on_count(t[2]));if("EVENT"!=t[0]||t.length<3)throw"Unknown reply from relay";t[1]in r&&r[t[1]].on_event(t[2])}catch(t){console.log("relay",n.url,"bad message",e,"error",t),err(t)}},n.subscribe=function(t){var o=t.type,i=t.sub,a=t.ok,s=t.err,c="embed-"+Math.random(),l=[o,c,i];n.send(JSON.stringify(l));var u=function(){var e=c;c=null,n.send(JSON.stringify(["CLOSE",e])),delete r[e]},f=[],d=[],p=function(){c&&(clearTimeout(A),u(),a(f))},A=setTimeout((function(){u(),f.length||d.length?h(null):s("timeout on relay",n.url)}),i.limit&&1==i.limit?2e3:6e3),h=function(){var t=Cn(_n().mark((function t(n){return _n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(d.push(n),!(d.length>1)){t.next=3;break}return t.abrupt("return");case 3:if(!d.length){t.next=19;break}if(n=d[0],t.t0=n,!t.t0){t.next=10;break}return t.next=9,e.isValidEvent(n);case 9:t.t0=t.sent;case 10:if(!t.t0){t.next=12;break}f.push(n);case 12:if(d.shift(),n&&(!i.limit||i.limit!=f.length)){t.next=17;break}return d.splice(0,d.length),p(),t.abrupt("break",19);case 17:t.next=3;break;case 19:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),y=function(){var e=Cn(_n().mark((function e(t){return _n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("COUNT"==o){e.next=2;break}return e.abrupt("return");case 2:f.push(t),p();case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();r[c]={ok:a,err:s,on_event:h,on_count:y}},n.listEvents=function(e){var t=e.sub,r=e.ok,o=e.err;n.subscribe({type:"REQ",sub:t,ok:r,err:o})},n.countEvents=function(e){var t=e.sub,r=e.ok,o=e.err;n.subscribe({type:"COUNT",sub:t,ok:function(e){r(e.length?e[0]:null)},err:o})}}}},{key:"getEvent",value:function(e){var t=e.socket,n=e.sub;return e.ok,e.err,new Promise((function(e,r){n.limit=1,t.listEvents({sub:n,ok:function(t){e(t?t[0]:null)},err:r})}))}},{key:"listEvents",value:function(e){var t=e.socket,n=e.sub;return new Promise((function(e,r){t.listEvents({sub:n,ok:e,err:r})}))}},{key:"countEvents",value:function(e){var t=e.socket,n=e.sub;return new Promise((function(e,r){t.countEvents({sub:n,ok:e,err:r})}))}},{key:"fetchEvent",value:function(e){var t=this,n=e.socket,r=e.noteId,o={ids:[r]};this.getEvent({socket:n,sub:o}).then((function(e){if(!e)throw console.log("Error: We can't find that note on this relay"),"Event not found";t.setState({event:e,kind:e.kind,profilePkey:e.pubkey}),t.fetchProfile({socket:n,profilePkey:e.pubkey}),1==e.kind?(t.fetchMeta({socket:n,noteId:r}),t.fetchTags({socket:n,tags:e.tags})):e.kind})).catch((function(e){console.log("Error fetching note: ".concat(e)),t.setState({event:{id:r,error:!0,content:"Sorry, we weren't able to find and parse this note on the specified relay."}})}))}},{key:"fetchProfile",value:function(e){var t=this,n=e.socket,r=e.profilePkey,o={kinds:[0],authors:[r]};this.getEvent({socket:n,sub:o}).then((function(e){if(!e)throw"Event not found";var o,i=JSON.parse(e.content);i.pubkey=r,t.setState({profilePkey:r,profile:i}),0==t.state.kind&&(t.fetchProfileMeta({socket:n,pubkey:r}),null!==(o=t.props.options)&&void 0!==o&&o.showFollowing&&t.fetchFollows({socket:n,pubkey:r}))})).catch((function(e){console.log("Error fetching profile: ".concat(e)),t.setState({profile:{pubkey:r,error:!0,about:"Sorry, we weren't able to find this profile on the specified relay."}})}))}},{key:"fetchFollows",value:function(e){var t=this,n=e.socket,r={kinds:[3],authors:[e.pubkey]},o=[];this.getEvent({socket:n,sub:r}).then((function(e){if(!e)throw"Event not found";null==e||e.tags.forEach((function(e){"p"===e[0]&&o.push(e[1])})),t.fetchFollowProfiles({socket:n,pubkeys:o})})).catch((function(e){console.error("Error fetching follows: ".concat(e))}))}},{key:"fetchFollowProfiles",value:function(e){var t=this,n=e.socket,r={kinds:[0],authors:e.pubkeys};this.listEvents({socket:n,sub:r}).then((function(e){e&&t.setState({follows:e})})).catch((function(e){console.error("Error fetching follow profiles: ".concat(e))}))}},{key:"fetchNaddr",value:function(e){var t=this,n=e.socket,r=e.data,o={kinds:[r.kind],"#d":[r.identifier],authors:[r.pubkey]};this.getEvent({socket:n,sub:o}).then((function(e){if(!e)throw"Event not found";if(t.setState({event:e,kind:e.kind}),t.fetchProfile({socket:n,profilePkey:e.pubkey}),3==e.kind||3e4==e.kind){var o=t.getProfilesListObj(e.tags);o.created_at=e.created_at,o.id="".concat(r.kind,":").concat(r.pubkey,":").concat(r.identifier),o.naddr=t.props.id,t.setState({profilesList:o}),t.fetchTags({socket:n,tags:e.tags}),t.fetchMeta({socket:n,data:r})}})).catch((function(e){console.log("Error fetching event by naddr: ".concat(e)),t.setState({profilesList:{error:!0,content:"Sorry, we weren't able to find this event on the specified relay."}})}))}},{key:"fetchTags",value:function(e){var t,n=this,r=e.socket,o=e.tags,i={kinds:[0],authors:[]},a=0,s=gn(o);try{for(s.s();!(t=s.n()).done;){var c=t.value;i.authors.length<100&&c.length>=2&&"p"==c[0]&&i.authors.push(c[1]),c.length>=2&&"p"==c[0]&&a++}}catch(e){s.e(e)}finally{s.f()}this.setState((function(e){return{countTaggedProfiles:e.countTaggedProfiles+a}})),i.authors.length&&this.listEvents({socket:r,sub:i}).then((function(e){var t,r={},o=gn(e);try{for(o.s();!(t=o.n()).done;){var i=t.value;try{var a=JSON.parse(i.content);r[i.pubkey]=a}catch(e){console.log("Error bad event content",e,i.content)}}}catch(e){o.e(e)}finally{o.f()}n.setState({taggedProfiles:r})})).catch((function(e){console.log("Error fetching tagged profiles: ".concat(e))}))}},{key:"getProfilesListObj",value:function(e){var t={};return e.forEach((function(e){e&&e[0]&&("name"===e[0]&&(t.name=e[1]),"d"===e[0]&&(t.d=e[1]),"description"===e[0]&&(t.description=e[1]))})),t}},{key:"getZapAmount",value:function(e){try{var t,n=gn(e.tags);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.length>=2&&"bolt11"==r[0]){var o,i=gn((0,Ge.decode)(r[1]).sections);try{for(i.s();!(o=i.n()).done;){var a=o.value;if("amount"==a.name)return parseInt(a.value)}}catch(e){i.e(e)}finally{i.f()}break}}}catch(e){n.e(e)}finally{n.f()}}catch(t){console.log("Error bad zap",t,e)}return 0}},{key:"onListMetaEvents",value:function(e){var t,n=this,r=gn(e);try{var o=function(){var e=t.value;switch(e.kind){case KIND_REPOST:n.setState((function(e){return{repostsCount:e.repostsCount+1}}));break;case KIND_REACTION:n.setState((function(e){return{likesCount:e.likesCount+1}}));break;case 1:n.setState((function(e){return{repliesCount:e.repliesCount+1}}));break;case on:n.setState((function(t){return{zapAmount:t.zapAmount+n.getZapAmount(e)}}));break;default:console.log("Unknown note kind")}};for(r.s();!(t=r.n()).done;)o()}catch(e){r.e(e)}finally{r.f()}}},{key:"fetchMeta",value:function(e){var t,n=e.socket,r=e.noteId,o=e.data;if(null===(t=this.props.options)||void 0===t||!t.hideCounters)return n.url.includes("wss://relay.nostr.band")?this.fetchMetaCount({socket:n,noteId:r,data:o}):this.fetchMetaList({socket:n,noteId:r,data:o})}},{key:"fetchMetaCount",value:function(e){var t=this,n=e.socket,r=e.noteId,o=e.data,i=function(e){return r?{kinds:[e],"#e":[r]}:o?{kinds:[e],"#a":["".concat(o.kind,":").concat(o.pubkey,":").concat(o.identifier)]}:void 0};this.countEvents({socket:n,sub:i(1)}).then((function(e){t.setState((function(t){return{repliesCount:e?e.count:0}}))})),this.countEvents({socket:n,sub:i(KIND_REPOST)}).then((function(e){t.setState((function(t){return{repostsCount:e?e.count:0}}))})),this.countEvents({socket:n,sub:i(KIND_REACTION)}).then((function(e){t.setState((function(t){return{likesCount:e?e.count:0}}))})),this.listEvents({socket:n,sub:i(on)}).then((function(e){t.onListMetaEvents(e)}))}},{key:"fetchMetaList",value:function(e){var t=this,n=e.socket,r=e.noteId,o=e.data,i=this.getSubOnFetchMetaList({noteId:r,data:o});this.listEvents({socket:n,sub:i}).then((function(e){t.onListMetaEvents(e)}))}},{key:"getSubOnFetchMetaList",value:function(e){var t=e.noteId,n=e.data;return t?{kinds:[1,KIND_REPOST,KIND_REACTION,on],"#e":[t]}:n?{kinds:[1,KIND_REPOST,KIND_REACTION,on],"#a":["".concat(n.kind,":").concat(n.pubkey,":").concat(n.identifier)]}:void 0}},{key:"onListProfileMetaEvents",value:function(e){var t,n=this,r=gn(e);try{var o=function(){var e=t.value;switch(e.kind){case 3:n.setState((function(e){return{followersCount:e.followersCount+1}}));break;case on:n.setState((function(t){return{zapAmount:t.zapAmount+n.getZapAmount(e)}}));break;default:console.log("Unknown event kind")}};for(r.s();!(t=r.n()).done;)o()}catch(e){r.e(e)}finally{r.f()}}},{key:"fetchProfileMetaCount",value:function(e){var t=this,n=e.socket,r=e.pubkey,o=function(e){return{kinds:[e],"#p":[r]}};this.countEvents({socket:n,sub:o(3)}).then((function(e){t.setState((function(t){return{followersCount:e?e.count:0}}))})),this.listEvents({socket:n,sub:o(on)}).then((function(e){t.onListProfileMetaEvents(e)}))}},{key:"fetchProfileMetaList",value:function(e){var t=this,n=e.socket,r=e.pubkey,o={kinds:[3,on],"#p":[r]};this.listEvents({socket:n,sub:o}).then((function(e){t.onListProfileMetaEvents(e)}))}},{key:"fetchProfileMeta",value:function(e){var t,n,r=e.socket,o=e.pubkey;if(console.log(null===(t=this.props.options)||void 0===t?void 0:t.hideCounters),null===(n=this.props.options)||void 0===n||!n.hideCounters)return r.url.includes("wss://relay.nostr.band")?this.fetchProfileMetaCount({socket:r,pubkey:o}):this.fetchProfileMetaList({socket:r,pubkey:o})}},{key:"render",value:function(){switch(this.state.kind){case 0:return kt(fn,{props:this.props,state:this.state});case 3:case 3e4:return kt(an,{props:this.props,state:this.state});case on:return kt(dn,{state:this.state});default:return kt(mn,{props:this.props,state:this.state})}}}],n&&kn(t.prototype,n),r&&kn(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(g);const In=Sn;function Nn(e,t,n,r){n||(n="wss://relay.nostr.band/");var o=document.querySelector(t)?document.querySelector(t):document.querySelector("body");D(h(In,{id:e,relay:n,options:r}),o)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RWhDLElBNW5CRjRvQixHQUFBN0IsR0FBQTRCLEVBQUF2c0IsVUFBQXdzQixHQUFBQyxHQUFBOUIsR0FBQTRCLEVBQUFFLEdBQUF2L0IsT0FBQUMsZUFBQW8vQixFQUFBLGFBQUFySCxVQUFBLElBNG5CR2dILENBQUEsQ0FubkJhLENBQVMySixHQXNuQnpCLFlDN25CTyxTQUFTQyxHQUFLL2hDLEVBQUlnaUMsRUFBU3pJLEVBQU9qeUIsR0FFbENpeUIsSUFDSEEsRUFBUSwyQkFFVixJQUFNMEksRUFBZ0I5NEIsU0FBU0MsY0FBYzQ0QixHQUN6Qzc0QixTQUFTQyxjQUFjNDRCLEdBQ3ZCNzRCLFNBQVNDLGNBQWMsUUFFM0JzRyxFQUFPbkQsRUFBRTRyQixHQUFZLENBQUVuNEIsR0FBQUEsRUFBSXU1QixNQUFBQSxFQUFPanlCLFFBQUFBLElBQVkyNkIsRUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvQHNjdXJlL2Jhc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvYmVjaDMyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9saWdodC1ib2x0MTEtZGVjb2Rlci9ib2x0MTEuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9Abm9ibGUvc2VjcDI1NmsxL2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy91dGlscy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvanN4LXJ1bnRpbWUvZGlzdC9qc3hSdW50aW1lLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvY29weUljb24uanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9zdHlsZS5jc3M/ZmM3YyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvY29weVRleHQuanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9pY29ucy9rZXlJY29uLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvbm9zdHJpY2hJY29uLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZUltYWdlLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS5qc3giLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2JvbHRJY29uLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvaGVhcnRJY29uLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvbGlua0ljb24uanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9pY29ucy9yZXBseUljb24uanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9pY29ucy9yZXBvc3RJY29uLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvbWV0YS5qc3giLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb25maWcvY29uZmlnLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvbWFpbi9jb21wb25lbnRzL1Byb2ZpbGVzTGlzdC5qc3giLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2ZvbGxvd2Vyc0ljb24uanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9wcm9maWxlTWV0YS5qc3giLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGVGb2xsb3dzLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL21haW4vY29tcG9uZW50cy9Qcm9maWxlLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL21haW4vY29tcG9uZW50cy9aYXAuanN4Iiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvdXRpbHMvZm9ybWF0Q29udGVudC5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL21haW4vY29tcG9uZW50cy9Ob3RlLmpzeCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL21haW4vTm9zdHJFbWJlZC5qc3giLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJub3N0ckVtYmVkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm5vc3RyRW1iZWRcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiEgc2N1cmUtYmFzZSAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ieXRlcyA9IGV4cG9ydHMuc3RyaW5nVG9CeXRlcyA9IGV4cG9ydHMuc3RyID0gZXhwb3J0cy5ieXRlc1RvU3RyaW5nID0gZXhwb3J0cy5oZXggPSBleHBvcnRzLnV0ZjggPSBleHBvcnRzLmJlY2gzMm0gPSBleHBvcnRzLmJlY2gzMiA9IGV4cG9ydHMuYmFzZTU4Y2hlY2sgPSBleHBvcnRzLmJhc2U1OHhtciA9IGV4cG9ydHMuYmFzZTU4eHJwID0gZXhwb3J0cy5iYXNlNThmbGlja3IgPSBleHBvcnRzLmJhc2U1OCA9IGV4cG9ydHMuYmFzZTY0dXJsID0gZXhwb3J0cy5iYXNlNjQgPSBleHBvcnRzLmJhc2UzMmNyb2NrZm9yZCA9IGV4cG9ydHMuYmFzZTMyaGV4ID0gZXhwb3J0cy5iYXNlMzIgPSBleHBvcnRzLmJhc2UxNiA9IGV4cG9ydHMudXRpbHMgPSBleHBvcnRzLmFzc2VydE51bWJlciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGFzc2VydE51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBpbnRlZ2VyOiAke259YCk7XG59XG5leHBvcnRzLmFzc2VydE51bWJlciA9IGFzc2VydE51bWJlcjtcbmZ1bmN0aW9uIGNoYWluKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB3cmFwID0gKGEsIGIpID0+IChjKSA9PiBhKGIoYykpO1xuICAgIGNvbnN0IGVuY29kZSA9IEFycmF5LmZyb20oYXJncylcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAucmVkdWNlKChhY2MsIGkpID0+IChhY2MgPyB3cmFwKGFjYywgaS5lbmNvZGUpIDogaS5lbmNvZGUpLCB1bmRlZmluZWQpO1xuICAgIGNvbnN0IGRlY29kZSA9IGFyZ3MucmVkdWNlKChhY2MsIGkpID0+IChhY2MgPyB3cmFwKGFjYywgaS5kZWNvZGUpIDogaS5kZWNvZGUpLCB1bmRlZmluZWQpO1xuICAgIHJldHVybiB7IGVuY29kZSwgZGVjb2RlIH07XG59XG5mdW5jdGlvbiBhbHBoYWJldChhbHBoYWJldCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZTogKGRpZ2l0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRpZ2l0cykgfHwgKGRpZ2l0cy5sZW5ndGggJiYgdHlwZW9mIGRpZ2l0c1swXSAhPT0gJ251bWJlcicpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWxwaGFiZXQuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhbiBhcnJheSBvZiBudW1iZXJzJyk7XG4gICAgICAgICAgICByZXR1cm4gZGlnaXRzLm1hcCgoaSkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydE51bWJlcihpKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSBhbHBoYWJldC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlnaXQgaW5kZXggb3V0c2lkZSBhbHBoYWJldDogJHtpfSAoYWxwaGFiZXQ6ICR7YWxwaGFiZXQubGVuZ3RofSlgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxwaGFiZXRbaV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgKGlucHV0Lmxlbmd0aCAmJiB0eXBlb2YgaW5wdXRbMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscGhhYmV0LmRlY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0Lm1hcCgobGV0dGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZXR0ZXIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFscGhhYmV0LmRlY29kZTogbm90IHN0cmluZyBlbGVtZW50PSR7bGV0dGVyfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxwaGFiZXQuaW5kZXhPZihsZXR0ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsZXR0ZXI6IFwiJHtsZXR0ZXJ9XCIuIEFsbG93ZWQ6ICR7YWxwaGFiZXR9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yID0gJycpIHtcbiAgICBpZiAodHlwZW9mIHNlcGFyYXRvciAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignam9pbiBzZXBhcmF0b3Igc2hvdWxkIGJlIHN0cmluZycpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZTogKGZyb20pID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmcm9tKSB8fCAoZnJvbS5sZW5ndGggJiYgdHlwZW9mIGZyb21bMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpIG9mIGZyb20pXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBqb2luLmVuY29kZTogbm9uLXN0cmluZyBpbnB1dD0ke2l9YCk7XG4gICAgICAgICAgICByZXR1cm4gZnJvbS5qb2luKHNlcGFyYXRvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKHRvKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICAgICAgICAgIHJldHVybiB0by5zcGxpdChzZXBhcmF0b3IpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBwYWRkaW5nKGJpdHMsIGNociA9ICc9Jykge1xuICAgIGFzc2VydE51bWJlcihiaXRzKTtcbiAgICBpZiAodHlwZW9mIGNociAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncGFkZGluZyBjaHIgc2hvdWxkIGJlIHN0cmluZycpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgfHwgKGRhdGEubGVuZ3RoICYmIHR5cGVvZiBkYXRhWzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBvZiBkYXRhKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFkZGluZy5lbmNvZGU6IG5vbi1zdHJpbmcgaW5wdXQ9JHtpfWApO1xuICAgICAgICAgICAgd2hpbGUgKChkYXRhLmxlbmd0aCAqIGJpdHMpICUgOClcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goY2hyKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgKGlucHV0Lmxlbmd0aCAmJiB0eXBlb2YgaW5wdXRbMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRpbmcuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpIG9mIGlucHV0KVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFkZGluZy5kZWNvZGU6IG5vbi1zdHJpbmcgaW5wdXQ9JHtpfWApO1xuICAgICAgICAgICAgbGV0IGVuZCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIGlmICgoZW5kICogYml0cykgJSA4KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYWRkaW5nOiBzdHJpbmcgc2hvdWxkIGhhdmUgd2hvbGUgbnVtYmVyIG9mIGJ5dGVzJyk7XG4gICAgICAgICAgICBmb3IgKDsgZW5kID4gMCAmJiBpbnB1dFtlbmQgLSAxXSA9PT0gY2hyOyBlbmQtLSkge1xuICAgICAgICAgICAgICAgIGlmICghKCgoZW5kIC0gMSkgKiBiaXRzKSAlIDgpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFkZGluZzogc3RyaW5nIGhhcyB0b28gbXVjaCBwYWRkaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2UoMCwgZW5kKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3JtYWxpemUgZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gICAgcmV0dXJuIHsgZW5jb2RlOiAoZnJvbSkgPT4gZnJvbSwgZGVjb2RlOiAodG8pID0+IGZuKHRvKSB9O1xufVxuZnVuY3Rpb24gY29udmVydFJhZGl4KGRhdGEsIGZyb20sIHRvKSB7XG4gICAgaWYgKGZyb20gPCAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDogd3JvbmcgZnJvbT0ke2Zyb219LCBiYXNlIGNhbm5vdCBiZSBsZXNzIHRoYW4gMmApO1xuICAgIGlmICh0byA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4OiB3cm9uZyB0bz0ke3RvfSwgYmFzZSBjYW5ub3QgYmUgbGVzcyB0aGFuIDJgKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4OiBkYXRhIHNob3VsZCBiZSBhcnJheScpO1xuICAgIGlmICghZGF0YS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBjb25zdCBkaWdpdHMgPSBBcnJheS5mcm9tKGRhdGEpO1xuICAgIGRpZ2l0cy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGFzc2VydE51bWJlcihkKTtcbiAgICAgICAgaWYgKGQgPCAwIHx8IGQgPj0gZnJvbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgaW50ZWdlcjogJHtkfWApO1xuICAgIH0pO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCBjYXJyeSA9IDA7XG4gICAgICAgIGxldCBkb25lID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGlnaXQgPSBkaWdpdHNbaV07XG4gICAgICAgICAgICBjb25zdCBkaWdpdEJhc2UgPSBmcm9tICogY2FycnkgKyBkaWdpdDtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoZGlnaXRCYXNlKSB8fFxuICAgICAgICAgICAgICAgIChmcm9tICogY2FycnkpIC8gZnJvbSAhPT0gY2FycnkgfHxcbiAgICAgICAgICAgICAgICBkaWdpdEJhc2UgLSBkaWdpdCAhPT0gZnJvbSAqIGNhcnJ5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb252ZXJ0UmFkaXg6IGNhcnJ5IG92ZXJmbG93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXJyeSA9IGRpZ2l0QmFzZSAlIHRvO1xuICAgICAgICAgICAgZGlnaXRzW2ldID0gTWF0aC5mbG9vcihkaWdpdEJhc2UgLyB0byk7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGRpZ2l0c1tpXSkgfHwgZGlnaXRzW2ldICogdG8gKyBjYXJyeSAhPT0gZGlnaXRCYXNlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4OiBjYXJyeSBvdmVyZmxvdycpO1xuICAgICAgICAgICAgaWYgKCFkb25lKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoIWRpZ2l0c1tpXSlcbiAgICAgICAgICAgICAgICBwb3MgPSBpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjYXJyeSk7XG4gICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggLSAxICYmIGRhdGFbaV0gPT09IDA7IGkrKylcbiAgICAgICAgcmVzLnB1c2goMCk7XG4gICAgcmV0dXJuIHJlcy5yZXZlcnNlKCk7XG59XG5jb25zdCBnY2QgPSAoYSwgYikgPT4gKCFiID8gYSA6IGdjZChiLCBhICUgYikpO1xuY29uc3QgcmFkaXgyY2FycnkgPSAoZnJvbSwgdG8pID0+IGZyb20gKyAodG8gLSBnY2QoZnJvbSwgdG8pKTtcbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeDIoZGF0YSwgZnJvbSwgdG8sIHBhZGRpbmcpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4MjogZGF0YSBzaG91bGQgYmUgYXJyYXknKTtcbiAgICBpZiAoZnJvbSA8PSAwIHx8IGZyb20gPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiB3cm9uZyBmcm9tPSR7ZnJvbX1gKTtcbiAgICBpZiAodG8gPD0gMCB8fCB0byA+IDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIHRvPSR7dG99YCk7XG4gICAgaWYgKHJhZGl4MmNhcnJ5KGZyb20sIHRvKSA+IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogY2Fycnkgb3ZlcmZsb3cgZnJvbT0ke2Zyb219IHRvPSR7dG99IGNhcnJ5Qml0cz0ke3JhZGl4MmNhcnJ5KGZyb20sIHRvKX1gKTtcbiAgICB9XG4gICAgbGV0IGNhcnJ5ID0gMDtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBjb25zdCBtYXNrID0gMiAqKiB0byAtIDE7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgZm9yIChjb25zdCBuIG9mIGRhdGEpIHtcbiAgICAgICAgYXNzZXJ0TnVtYmVyKG4pO1xuICAgICAgICBpZiAobiA+PSAyICoqIGZyb20pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGludmFsaWQgZGF0YSB3b3JkPSR7bn0gZnJvbT0ke2Zyb219YCk7XG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IDw8IGZyb20pIHwgbjtcbiAgICAgICAgaWYgKHBvcyArIGZyb20gPiAzMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogY2Fycnkgb3ZlcmZsb3cgcG9zPSR7cG9zfSBmcm9tPSR7ZnJvbX1gKTtcbiAgICAgICAgcG9zICs9IGZyb207XG4gICAgICAgIGZvciAoOyBwb3MgPj0gdG87IHBvcyAtPSB0bylcbiAgICAgICAgICAgIHJlcy5wdXNoKCgoY2FycnkgPj4gKHBvcyAtIHRvKSkgJiBtYXNrKSA+Pj4gMCk7XG4gICAgICAgIGNhcnJ5ICY9IDIgKiogcG9zIC0gMTtcbiAgICB9XG4gICAgY2FycnkgPSAoY2FycnkgPDwgKHRvIC0gcG9zKSkgJiBtYXNrO1xuICAgIGlmICghcGFkZGluZyAmJiBwb3MgPj0gZnJvbSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlc3MgcGFkZGluZycpO1xuICAgIGlmICghcGFkZGluZyAmJiBjYXJyeSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb24temVybyBwYWRkaW5nOiAke2NhcnJ5fWApO1xuICAgIGlmIChwYWRkaW5nICYmIHBvcyA+IDApXG4gICAgICAgIHJlcy5wdXNoKGNhcnJ5ID4+PiAwKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gcmFkaXgobnVtKSB7XG4gICAgYXNzZXJ0TnVtYmVyKG51bSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoYnl0ZXMpID0+IHtcbiAgICAgICAgICAgIGlmICghKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeC5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJ0UmFkaXgoQXJyYXkuZnJvbShieXRlcyksIDIgKiogOCwgbnVtKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoZGlnaXRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlnaXRzKSB8fCAoZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSAnbnVtYmVyJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeC5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oY29udmVydFJhZGl4KGRpZ2l0cywgbnVtLCAyICoqIDgpKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmFkaXgyKGJpdHMsIHJldlBhZGRpbmcgPSBmYWxzZSkge1xuICAgIGFzc2VydE51bWJlcihiaXRzKTtcbiAgICBpZiAoYml0cyA8PSAwIHx8IGJpdHMgPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDI6IGJpdHMgc2hvdWxkIGJlIGluICgwLi4zMl0nKTtcbiAgICBpZiAocmFkaXgyY2FycnkoOCwgYml0cykgPiAzMiB8fCByYWRpeDJjYXJyeShiaXRzLCA4KSA+IDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4MjogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChieXRlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCEoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4Mi5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJ0UmFkaXgyKEFycmF5LmZyb20oYnl0ZXMpLCA4LCBiaXRzLCAhcmV2UGFkZGluZyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKGRpZ2l0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRpZ2l0cykgfHwgKGRpZ2l0cy5sZW5ndGggJiYgdHlwZW9mIGRpZ2l0c1swXSAhPT0gJ251bWJlcicpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXgyLmRlY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShjb252ZXJ0UmFkaXgyKGRpZ2l0cywgYml0cywgOCwgcmV2UGFkZGluZykpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiB1bnNhZmVXcmFwcGVyKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnNhZmVXcmFwcGVyIGZuIHNob3VsZCBiZSBmdW5jdGlvbicpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tzdW0obGVuLCBmbikge1xuICAgIGFzc2VydE51bWJlcihsZW4pO1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0gZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWNrc3VtLmVuY29kZTogaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrc3VtID0gZm4oZGF0YSkuc2xpY2UoMCwgbGVuKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoICsgbGVuKTtcbiAgICAgICAgICAgIHJlcy5zZXQoZGF0YSk7XG4gICAgICAgICAgICByZXMuc2V0KGNoZWNrc3VtLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0uZGVjb2RlOiBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGRhdGEuc2xpY2UoMCwgLWxlbik7XG4gICAgICAgICAgICBjb25zdCBuZXdDaGVja3N1bSA9IGZuKHBheWxvYWQpLnNsaWNlKDAsIGxlbik7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGVja3N1bSA9IGRhdGEuc2xpY2UoLWxlbik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGVja3N1bVtpXSAhPT0gb2xkQ2hlY2tzdW1baV0pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaGVja3N1bScpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMudXRpbHMgPSB7IGFscGhhYmV0LCBjaGFpbiwgY2hlY2tzdW0sIHJhZGl4LCByYWRpeDIsIGpvaW4sIHBhZGRpbmcgfTtcbmV4cG9ydHMuYmFzZTE2ID0gY2hhaW4ocmFkaXgyKDQpLCBhbHBoYWJldCgnMDEyMzQ1Njc4OUFCQ0RFRicpLCBqb2luKCcnKSk7XG5leHBvcnRzLmJhc2UzMiA9IGNoYWluKHJhZGl4Mig1KSwgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3JyksIHBhZGRpbmcoNSksIGpvaW4oJycpKTtcbmV4cG9ydHMuYmFzZTMyaGV4ID0gY2hhaW4ocmFkaXgyKDUpLCBhbHBoYWJldCgnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVYnKSwgcGFkZGluZyg1KSwgam9pbignJykpO1xuZXhwb3J0cy5iYXNlMzJjcm9ja2ZvcmQgPSBjaGFpbihyYWRpeDIoNSksIGFscGhhYmV0KCcwMTIzNDU2Nzg5QUJDREVGR0hKS01OUFFSU1RWV1hZWicpLCBqb2luKCcnKSwgbm9ybWFsaXplKChzKSA9PiBzLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvTy9nLCAnMCcpLnJlcGxhY2UoL1tJTF0vZywgJzEnKSkpO1xuZXhwb3J0cy5iYXNlNjQgPSBjaGFpbihyYWRpeDIoNiksIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJyksIHBhZGRpbmcoNiksIGpvaW4oJycpKTtcbmV4cG9ydHMuYmFzZTY0dXJsID0gY2hhaW4ocmFkaXgyKDYpLCBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXycpLCBwYWRkaW5nKDYpLCBqb2luKCcnKSk7XG5jb25zdCBnZW5CYXNlNTggPSAoYWJjKSA9PiBjaGFpbihyYWRpeCg1OCksIGFscGhhYmV0KGFiYyksIGpvaW4oJycpKTtcbmV4cG9ydHMuYmFzZTU4ID0gZ2VuQmFzZTU4KCcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6Jyk7XG5leHBvcnRzLmJhc2U1OGZsaWNrciA9IGdlbkJhc2U1OCgnMTIzNDU2Nzg5YWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ekFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWicpO1xuZXhwb3J0cy5iYXNlNTh4cnAgPSBnZW5CYXNlNTgoJ3Jwc2huYWYzOXdCVURORUdISktMTTRQUVJTVDdWV1hZWjJiY2RlQ2c2NWprbThvRnFpMXR1dkF4eXonKTtcbmNvbnN0IFhNUl9CTE9DS19MRU4gPSBbMCwgMiwgMywgNSwgNiwgNywgOSwgMTAsIDExXTtcbmV4cG9ydHMuYmFzZTU4eG1yID0ge1xuICAgIGVuY29kZShkYXRhKSB7XG4gICAgICAgIGxldCByZXMgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA4KSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGRhdGEuc3ViYXJyYXkoaSwgaSArIDgpO1xuICAgICAgICAgICAgcmVzICs9IGV4cG9ydHMuYmFzZTU4LmVuY29kZShibG9jaykucGFkU3RhcnQoWE1SX0JMT0NLX0xFTltibG9jay5sZW5ndGhdLCAnMScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgICBkZWNvZGUoc3RyKSB7XG4gICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDExKSB7XG4gICAgICAgICAgICBjb25zdCBzbGljZSA9IHN0ci5zbGljZShpLCBpICsgMTEpO1xuICAgICAgICAgICAgY29uc3QgYmxvY2tMZW4gPSBYTVJfQkxPQ0tfTEVOLmluZGV4T2Yoc2xpY2UubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gZXhwb3J0cy5iYXNlNTguZGVjb2RlKHNsaWNlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmxvY2subGVuZ3RoIC0gYmxvY2tMZW47IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChibG9ja1tqXSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYXNlNTh4bXI6IHdyb25nIHBhZGRpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQoQXJyYXkuZnJvbShibG9jay5zbGljZShibG9jay5sZW5ndGggLSBibG9ja0xlbikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHJlcyk7XG4gICAgfSxcbn07XG5jb25zdCBiYXNlNThjaGVjayA9IChzaGEyNTYpID0+IGNoYWluKGNoZWNrc3VtKDQsIChkYXRhKSA9PiBzaGEyNTYoc2hhMjU2KGRhdGEpKSksIGV4cG9ydHMuYmFzZTU4KTtcbmV4cG9ydHMuYmFzZTU4Y2hlY2sgPSBiYXNlNThjaGVjaztcbmNvbnN0IEJFQ0hfQUxQSEFCRVQgPSBjaGFpbihhbHBoYWJldCgncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnKSwgam9pbignJykpO1xuY29uc3QgUE9MWU1PRF9HRU5FUkFUT1JTID0gWzB4M2I2YTU3YjIsIDB4MjY1MDhlNmQsIDB4MWVhMTE5ZmEsIDB4M2Q0MjMzZGQsIDB4MmExNDYyYjNdO1xuZnVuY3Rpb24gYmVjaDMyUG9seW1vZChwcmUpIHtcbiAgICBjb25zdCBiID0gcHJlID4+IDI1O1xuICAgIGxldCBjaGsgPSAocHJlICYgMHgxZmZmZmZmKSA8PCA1O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUE9MWU1PRF9HRU5FUkFUT1JTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgoKGIgPj4gaSkgJiAxKSA9PT0gMSlcbiAgICAgICAgICAgIGNoayBePSBQT0xZTU9EX0dFTkVSQVRPUlNbaV07XG4gICAgfVxuICAgIHJldHVybiBjaGs7XG59XG5mdW5jdGlvbiBiZWNoQ2hlY2tzdW0ocHJlZml4LCB3b3JkcywgZW5jb2RpbmdDb25zdCA9IDEpIHtcbiAgICBjb25zdCBsZW4gPSBwcmVmaXgubGVuZ3RoO1xuICAgIGxldCBjaGsgPSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgYyA9IHByZWZpeC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcHJlZml4ICgke3ByZWZpeH0pYCk7XG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIChjID4+IDUpO1xuICAgIH1cbiAgICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoayk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspIF4gKHByZWZpeC5jaGFyQ29kZUF0KGkpICYgMHgxZik7XG4gICAgZm9yIChsZXQgdiBvZiB3b3JkcylcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspIF4gdjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKylcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICAgIGNoayBePSBlbmNvZGluZ0NvbnN0O1xuICAgIHJldHVybiBCRUNIX0FMUEhBQkVULmVuY29kZShjb252ZXJ0UmFkaXgyKFtjaGsgJSAyICoqIDMwXSwgMzAsIDUsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBnZW5CZWNoMzIoZW5jb2RpbmcpIHtcbiAgICBjb25zdCBFTkNPRElOR19DT05TVCA9IGVuY29kaW5nID09PSAnYmVjaDMyJyA/IDEgOiAweDJiYzgzMGEzO1xuICAgIGNvbnN0IF93b3JkcyA9IHJhZGl4Mig1KTtcbiAgICBjb25zdCBmcm9tV29yZHMgPSBfd29yZHMuZGVjb2RlO1xuICAgIGNvbnN0IHRvV29yZHMgPSBfd29yZHMuZW5jb2RlO1xuICAgIGNvbnN0IGZyb21Xb3Jkc1Vuc2FmZSA9IHVuc2FmZVdyYXBwZXIoZnJvbVdvcmRzKTtcbiAgICBmdW5jdGlvbiBlbmNvZGUocHJlZml4LCB3b3JkcywgbGltaXQgPSA5MCkge1xuICAgICAgICBpZiAodHlwZW9mIHByZWZpeCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5lbmNvZGUgcHJlZml4IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBwcmVmaXh9YCk7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh3b3JkcykgfHwgKHdvcmRzLmxlbmd0aCAmJiB0eXBlb2Ygd29yZHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmVjaDMyLmVuY29kZSB3b3JkcyBzaG91bGQgYmUgYXJyYXkgb2YgbnVtYmVycywgbm90ICR7dHlwZW9mIHdvcmRzfWApO1xuICAgICAgICBjb25zdCBhY3R1YWxMZW5ndGggPSBwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxpbWl0ICE9PSBmYWxzZSAmJiBhY3R1YWxMZW5ndGggPiBsaW1pdClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYExlbmd0aCAke2FjdHVhbExlbmd0aH0gZXhjZWVkcyBsaW1pdCAke2xpbWl0fWApO1xuICAgICAgICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0xJHtCRUNIX0FMUEhBQkVULmVuY29kZSh3b3Jkcyl9JHtiZWNoQ2hlY2tzdW0ocHJlZml4LCB3b3JkcywgRU5DT0RJTkdfQ09OU1QpfWA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZShzdHIsIGxpbWl0ID0gOTApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoIDwgOCB8fCAobGltaXQgIT09IGZhbHNlICYmIHN0ci5sZW5ndGggPiBsaW1pdCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBXcm9uZyBzdHJpbmcgbGVuZ3RoOiAke3N0ci5sZW5ndGh9ICgke3N0cn0pLiBFeHBlY3RlZCAoOC4uJHtsaW1pdH0pYCk7XG4gICAgICAgIGNvbnN0IGxvd2VyZWQgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHN0ciAhPT0gbG93ZXJlZCAmJiBzdHIgIT09IHN0ci50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdHJpbmcgbXVzdCBiZSBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlYCk7XG4gICAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICAgIGNvbnN0IHNlcEluZGV4ID0gc3RyLmxhc3RJbmRleE9mKCcxJyk7XG4gICAgICAgIGlmIChzZXBJbmRleCA9PT0gMCB8fCBzZXBJbmRleCA9PT0gLTEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExldHRlciBcIjFcIiBtdXN0IGJlIHByZXNlbnQgYmV0d2VlbiBwcmVmaXggYW5kIGRhdGEgb25seWApO1xuICAgICAgICBjb25zdCBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc2VwSW5kZXgpO1xuICAgICAgICBjb25zdCBfd29yZHMgPSBzdHIuc2xpY2Uoc2VwSW5kZXggKyAxKTtcbiAgICAgICAgaWYgKF93b3Jkcy5sZW5ndGggPCA2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcnKTtcbiAgICAgICAgY29uc3Qgd29yZHMgPSBCRUNIX0FMUEhBQkVULmRlY29kZShfd29yZHMpLnNsaWNlKDAsIC02KTtcbiAgICAgICAgY29uc3Qgc3VtID0gYmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKTtcbiAgICAgICAgaWYgKCFfd29yZHMuZW5kc1dpdGgoc3VtKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjaGVja3N1bSBpbiAke3N0cn06IGV4cGVjdGVkIFwiJHtzdW19XCJgKTtcbiAgICAgICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICAgIH1cbiAgICBjb25zdCBkZWNvZGVVbnNhZmUgPSB1bnNhZmVXcmFwcGVyKGRlY29kZSk7XG4gICAgZnVuY3Rpb24gZGVjb2RlVG9CeXRlcyhzdHIpIHtcbiAgICAgICAgY29uc3QgeyBwcmVmaXgsIHdvcmRzIH0gPSBkZWNvZGUoc3RyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMsIGJ5dGVzOiBmcm9tV29yZHMod29yZHMpIH07XG4gICAgfVxuICAgIHJldHVybiB7IGVuY29kZSwgZGVjb2RlLCBkZWNvZGVUb0J5dGVzLCBkZWNvZGVVbnNhZmUsIGZyb21Xb3JkcywgZnJvbVdvcmRzVW5zYWZlLCB0b1dvcmRzIH07XG59XG5leHBvcnRzLmJlY2gzMiA9IGdlbkJlY2gzMignYmVjaDMyJyk7XG5leHBvcnRzLmJlY2gzMm0gPSBnZW5CZWNoMzIoJ2JlY2gzMm0nKTtcbmV4cG9ydHMudXRmOCA9IHtcbiAgICBlbmNvZGU6IChkYXRhKSA9PiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGF0YSksXG4gICAgZGVjb2RlOiAoc3RyKSA9PiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSxcbn07XG5leHBvcnRzLmhleCA9IGNoYWluKHJhZGl4Mig0KSwgYWxwaGFiZXQoJzAxMjM0NTY3ODlhYmNkZWYnKSwgam9pbignJyksIG5vcm1hbGl6ZSgocykgPT4ge1xuICAgIGlmICh0eXBlb2YgcyAhPT0gJ3N0cmluZycgfHwgcy5sZW5ndGggJSAyKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBoZXguZGVjb2RlOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiBzfSB3aXRoIGxlbmd0aCAke3MubGVuZ3RofWApO1xuICAgIHJldHVybiBzLnRvTG93ZXJDYXNlKCk7XG59KSk7XG5jb25zdCBDT0RFUlMgPSB7XG4gICAgdXRmODogZXhwb3J0cy51dGY4LCBoZXg6IGV4cG9ydHMuaGV4LCBiYXNlMTY6IGV4cG9ydHMuYmFzZTE2LCBiYXNlMzI6IGV4cG9ydHMuYmFzZTMyLCBiYXNlNjQ6IGV4cG9ydHMuYmFzZTY0LCBiYXNlNjR1cmw6IGV4cG9ydHMuYmFzZTY0dXJsLCBiYXNlNTg6IGV4cG9ydHMuYmFzZTU4LCBiYXNlNTh4bXI6IGV4cG9ydHMuYmFzZTU4eG1yXG59O1xuY29uc3QgY29kZXJUeXBlRXJyb3IgPSBgSW52YWxpZCBlbmNvZGluZyB0eXBlLiBBdmFpbGFibGUgdHlwZXM6ICR7T2JqZWN0LmtleXMoQ09ERVJTKS5qb2luKCcsICcpfWA7XG5jb25zdCBieXRlc1RvU3RyaW5nID0gKHR5cGUsIGJ5dGVzKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJyB8fCAhQ09ERVJTLmhhc093blByb3BlcnR5KHR5cGUpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvZGVyVHlwZUVycm9yKTtcbiAgICBpZiAoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdieXRlc1RvU3RyaW5nKCkgZXhwZWN0cyBVaW50OEFycmF5Jyk7XG4gICAgcmV0dXJuIENPREVSU1t0eXBlXS5lbmNvZGUoYnl0ZXMpO1xufTtcbmV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGJ5dGVzVG9TdHJpbmc7XG5leHBvcnRzLnN0ciA9IGV4cG9ydHMuYnl0ZXNUb1N0cmluZztcbmNvbnN0IHN0cmluZ1RvQnl0ZXMgPSAodHlwZSwgc3RyKSA9PiB7XG4gICAgaWYgKCFDT0RFUlMuaGFzT3duUHJvcGVydHkodHlwZSkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29kZXJUeXBlRXJyb3IpO1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5nVG9CeXRlcygpIGV4cGVjdHMgc3RyaW5nJyk7XG4gICAgcmV0dXJuIENPREVSU1t0eXBlXS5kZWNvZGUoc3RyKTtcbn07XG5leHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuZXhwb3J0cy5ieXRlcyA9IGV4cG9ydHMuc3RyaW5nVG9CeXRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmVjaDMybSA9IGV4cG9ydHMuYmVjaDMyID0gdm9pZCAwO1xuY29uc3QgQUxQSEFCRVQgPSAncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnO1xuY29uc3QgQUxQSEFCRVRfTUFQID0ge307XG5mb3IgKGxldCB6ID0gMDsgeiA8IEFMUEhBQkVULmxlbmd0aDsgeisrKSB7XG4gICAgY29uc3QgeCA9IEFMUEhBQkVULmNoYXJBdCh6KTtcbiAgICBBTFBIQUJFVF9NQVBbeF0gPSB6O1xufVxuZnVuY3Rpb24gcG9seW1vZFN0ZXAocHJlKSB7XG4gICAgY29uc3QgYiA9IHByZSA+PiAyNTtcbiAgICByZXR1cm4gKCgocHJlICYgMHgxZmZmZmZmKSA8PCA1KSBeXG4gICAgICAgICgtKChiID4+IDApICYgMSkgJiAweDNiNmE1N2IyKSBeXG4gICAgICAgICgtKChiID4+IDEpICYgMSkgJiAweDI2NTA4ZTZkKSBeXG4gICAgICAgICgtKChiID4+IDIpICYgMSkgJiAweDFlYTExOWZhKSBeXG4gICAgICAgICgtKChiID4+IDMpICYgMSkgJiAweDNkNDIzM2RkKSBeXG4gICAgICAgICgtKChiID4+IDQpICYgMSkgJiAweDJhMTQ2MmIzKSk7XG59XG5mdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KSB7XG4gICAgbGV0IGNoayA9IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgYyA9IHByZWZpeC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpXG4gICAgICAgICAgICByZXR1cm4gJ0ludmFsaWQgcHJlZml4ICgnICsgcHJlZml4ICsgJyknO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKGMgPj4gNSk7XG4gICAgfVxuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgdiA9IHByZWZpeC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKHYgJiAweDFmKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaztcbn1cbmZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgaW5CaXRzLCBvdXRCaXRzLCBwYWQpIHtcbiAgICBsZXQgdmFsdWUgPSAwO1xuICAgIGxldCBiaXRzID0gMDtcbiAgICBjb25zdCBtYXhWID0gKDEgPDwgb3V0Qml0cykgLSAxO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA8PCBpbkJpdHMpIHwgZGF0YVtpXTtcbiAgICAgICAgYml0cyArPSBpbkJpdHM7XG4gICAgICAgIHdoaWxlIChiaXRzID49IG91dEJpdHMpIHtcbiAgICAgICAgICAgIGJpdHMgLT0gb3V0Qml0cztcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh2YWx1ZSA+PiBiaXRzKSAmIG1heFYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYWQpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGJpdHMgPj0gaW5CaXRzKVxuICAgICAgICAgICAgcmV0dXJuICdFeGNlc3MgcGFkZGluZyc7XG4gICAgICAgIGlmICgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKVxuICAgICAgICAgICAgcmV0dXJuICdOb24temVybyBwYWRkaW5nJztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvV29yZHMoYnl0ZXMpIHtcbiAgICByZXR1cm4gY29udmVydChieXRlcywgOCwgNSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUod29yZHMpIHtcbiAgICBjb25zdCByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcykge1xuICAgIGNvbnN0IHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xufVxuZnVuY3Rpb24gZ2V0TGlicmFyeUZyb21FbmNvZGluZyhlbmNvZGluZykge1xuICAgIGxldCBFTkNPRElOR19DT05TVDtcbiAgICBpZiAoZW5jb2RpbmcgPT09ICdiZWNoMzInKSB7XG4gICAgICAgIEVOQ09ESU5HX0NPTlNUID0gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIEVOQ09ESU5HX0NPTlNUID0gMHgyYmM4MzBhMztcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlKHByZWZpeCwgd29yZHMsIExJTUlUKSB7XG4gICAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aCA+IExJTUlUKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhjZWVkcyBsZW5ndGggbGltaXQnKTtcbiAgICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIGRldGVybWluZSBjaGsgbW9kXG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNoayk7XG4gICAgICAgIGxldCByZXN1bHQgPSBwcmVmaXggKyAnMSc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSB3b3Jkc1tpXTtcbiAgICAgICAgICAgIGlmICh4ID4+IDUgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24gNS1iaXQgd29yZCcpO1xuICAgICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHg7XG4gICAgICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQuY2hhckF0KHgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgICAgICB9XG4gICAgICAgIGNoayBePSBFTkNPRElOR19DT05TVDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoY2hrID4+ICgoNSAtIGkpICogNSkpICYgMHgxZjtcbiAgICAgICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQodik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gX19kZWNvZGUoc3RyLCBMSU1JVCkge1xuICAgICAgICBMSU1JVCA9IExJTUlUIHx8IDkwO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA8IDgpXG4gICAgICAgICAgICByZXR1cm4gc3RyICsgJyB0b28gc2hvcnQnO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IExJTUlUKVxuICAgICAgICAgICAgcmV0dXJuICdFeGNlZWRzIGxlbmd0aCBsaW1pdCc7XG4gICAgICAgIC8vIGRvbid0IGFsbG93IG1peGVkIGNhc2VcbiAgICAgICAgY29uc3QgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB1cHBlcmVkID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSB1cHBlcmVkKVxuICAgICAgICAgICAgcmV0dXJuICdNaXhlZC1jYXNlIHN0cmluZyAnICsgc3RyO1xuICAgICAgICBzdHIgPSBsb3dlcmVkO1xuICAgICAgICBjb25zdCBzcGxpdCA9IHN0ci5sYXN0SW5kZXhPZignMScpO1xuICAgICAgICBpZiAoc3BsaXQgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuICdObyBzZXBhcmF0b3IgY2hhcmFjdGVyIGZvciAnICsgc3RyO1xuICAgICAgICBpZiAoc3BsaXQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gJ01pc3NpbmcgcHJlZml4IGZvciAnICsgc3RyO1xuICAgICAgICBjb25zdCBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3BsaXQpO1xuICAgICAgICBjb25zdCB3b3JkQ2hhcnMgPSBzdHIuc2xpY2Uoc3BsaXQgKyAxKTtcbiAgICAgICAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KVxuICAgICAgICAgICAgcmV0dXJuICdEYXRhIHRvbyBzaG9ydCc7XG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGNoaztcbiAgICAgICAgY29uc3Qgd29yZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3JkQ2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB3b3JkQ2hhcnMuY2hhckF0KGkpO1xuICAgICAgICAgICAgY29uc3QgdiA9IEFMUEhBQkVUX01BUFtjXTtcbiAgICAgICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdVbmtub3duIGNoYXJhY3RlciAnICsgYztcbiAgICAgICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB2O1xuICAgICAgICAgICAgLy8gbm90IGluIHRoZSBjaGVja3N1bT9cbiAgICAgICAgICAgIGlmIChpICsgNiA+PSB3b3JkQ2hhcnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgd29yZHMucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hrICE9PSBFTkNPRElOR19DT05TVClcbiAgICAgICAgICAgIHJldHVybiAnSW52YWxpZCBjaGVja3N1bSBmb3IgJyArIHN0cjtcbiAgICAgICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gX19kZWNvZGUoc3RyLCBMSU1JVCk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkZWNvZGVVbnNhZmUsXG4gICAgICAgIGRlY29kZSxcbiAgICAgICAgZW5jb2RlLFxuICAgICAgICB0b1dvcmRzLFxuICAgICAgICBmcm9tV29yZHNVbnNhZmUsXG4gICAgICAgIGZyb21Xb3JkcyxcbiAgICB9O1xufVxuZXhwb3J0cy5iZWNoMzIgPSBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKCdiZWNoMzInKTtcbmV4cG9ydHMuYmVjaDMybSA9IGdldExpYnJhcnlGcm9tRW5jb2RpbmcoJ2JlY2gzMm0nKTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqLDphZnRlciw6YmVmb3Jley0tdHctYm9yZGVyLXNwYWNpbmcteDowOy0tdHctYm9yZGVyLXNwYWNpbmcteTowOy0tdHctdHJhbnNsYXRlLXg6MDstLXR3LXRyYW5zbGF0ZS15OjA7LS10dy1yb3RhdGU6MDstLXR3LXNrZXcteDowOy0tdHctc2tldy15OjA7LS10dy1zY2FsZS14OjE7LS10dy1zY2FsZS15OjE7LS10dy1wYW4teDogOy0tdHctcGFuLXk6IDstLXR3LXBpbmNoLXpvb206IDstLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6cHJveGltaXR5Oy0tdHctZ3JhZGllbnQtZnJvbS1wb3NpdGlvbjogOy0tdHctZ3JhZGllbnQtdmlhLXBvc2l0aW9uOiA7LS10dy1ncmFkaWVudC10by1wb3NpdGlvbjogOy0tdHctb3JkaW5hbDogOy0tdHctc2xhc2hlZC16ZXJvOiA7LS10dy1udW1lcmljLWZpZ3VyZTogOy0tdHctbnVtZXJpYy1zcGFjaW5nOiA7LS10dy1udW1lcmljLWZyYWN0aW9uOiA7LS10dy1yaW5nLWluc2V0OiA7LS10dy1yaW5nLW9mZnNldC13aWR0aDowcHg7LS10dy1yaW5nLW9mZnNldC1jb2xvcjojZmZmOy0tdHctcmluZy1jb2xvcjpyZ2JhKDU5LDEzMCwyNDYsLjUpOy0tdHctcmluZy1vZmZzZXQtc2hhZG93OjAgMCB0cmFuc3BhcmVudDstLXR3LXJpbmctc2hhZG93OjAgMCB0cmFuc3BhcmVudDstLXR3LXNoYWRvdzowIDAgdHJhbnNwYXJlbnQ7LS10dy1zaGFkb3ctY29sb3JlZDowIDAgdHJhbnNwYXJlbnQ7LS10dy1ibHVyOiA7LS10dy1icmlnaHRuZXNzOiA7LS10dy1jb250cmFzdDogOy0tdHctZ3JheXNjYWxlOiA7LS10dy1odWUtcm90YXRlOiA7LS10dy1pbnZlcnQ6IDstLXR3LXNhdHVyYXRlOiA7LS10dy1zZXBpYTogOy0tdHctZHJvcC1zaGFkb3c6IDstLXR3LWJhY2tkcm9wLWJsdXI6IDstLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6IDstLXR3LWJhY2tkcm9wLWNvbnRyYXN0OiA7LS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6IDstLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6IDstLXR3LWJhY2tkcm9wLWludmVydDogOy0tdHctYmFja2Ryb3Atb3BhY2l0eTogOy0tdHctYmFja2Ryb3Atc2F0dXJhdGU6IDstLXR3LWJhY2tkcm9wLXNlcGlhOiB9OjpiYWNrZHJvcHstLXR3LWJvcmRlci1zcGFjaW5nLXg6MDstLXR3LWJvcmRlci1zcGFjaW5nLXk6MDstLXR3LXRyYW5zbGF0ZS14OjA7LS10dy10cmFuc2xhdGUteTowOy0tdHctcm90YXRlOjA7LS10dy1za2V3LXg6MDstLXR3LXNrZXcteTowOy0tdHctc2NhbGUteDoxOy0tdHctc2NhbGUteToxOy0tdHctcGFuLXg6IDstLXR3LXBhbi15OiA7LS10dy1waW5jaC16b29tOiA7LS10dy1zY3JvbGwtc25hcC1zdHJpY3RuZXNzOnByb3hpbWl0eTstLXR3LWdyYWRpZW50LWZyb20tcG9zaXRpb246IDstLXR3LWdyYWRpZW50LXZpYS1wb3NpdGlvbjogOy0tdHctZ3JhZGllbnQtdG8tcG9zaXRpb246IDstLXR3LW9yZGluYWw6IDstLXR3LXNsYXNoZWQtemVybzogOy0tdHctbnVtZXJpYy1maWd1cmU6IDstLXR3LW51bWVyaWMtc3BhY2luZzogOy0tdHctbnVtZXJpYy1mcmFjdGlvbjogOy0tdHctcmluZy1pbnNldDogOy0tdHctcmluZy1vZmZzZXQtd2lkdGg6MHB4Oy0tdHctcmluZy1vZmZzZXQtY29sb3I6I2ZmZjstLXR3LXJpbmctY29sb3I6cmdiYSg1OSwxMzAsMjQ2LC41KTstLXR3LXJpbmctb2Zmc2V0LXNoYWRvdzowIDAgdHJhbnNwYXJlbnQ7LS10dy1yaW5nLXNoYWRvdzowIDAgdHJhbnNwYXJlbnQ7LS10dy1zaGFkb3c6MCAwIHRyYW5zcGFyZW50Oy0tdHctc2hhZG93LWNvbG9yZWQ6MCAwIHRyYW5zcGFyZW50Oy0tdHctYmx1cjogOy0tdHctYnJpZ2h0bmVzczogOy0tdHctY29udHJhc3Q6IDstLXR3LWdyYXlzY2FsZTogOy0tdHctaHVlLXJvdGF0ZTogOy0tdHctaW52ZXJ0OiA7LS10dy1zYXR1cmF0ZTogOy0tdHctc2VwaWE6IDstLXR3LWRyb3Atc2hhZG93OiA7LS10dy1iYWNrZHJvcC1ibHVyOiA7LS10dy1iYWNrZHJvcC1icmlnaHRuZXNzOiA7LS10dy1iYWNrZHJvcC1jb250cmFzdDogOy0tdHctYmFja2Ryb3AtZ3JheXNjYWxlOiA7LS10dy1iYWNrZHJvcC1odWUtcm90YXRlOiA7LS10dy1iYWNrZHJvcC1pbnZlcnQ6IDstLXR3LWJhY2tkcm9wLW9wYWNpdHk6IDstLXR3LWJhY2tkcm9wLXNhdHVyYXRlOiA7LS10dy1iYWNrZHJvcC1zZXBpYTogfS5uZS1yZWxhdGl2ZXtwb3NpdGlvbjpyZWxhdGl2ZX0ubmUtbS0we21hcmdpbjowfS5uZS1tcy1cXFxcWy0yNXB4XFxcXF17bWFyZ2luLWxlZnQ6LTI1cHh9Lm5lLW1zLVxcXFxbMjVweFxcXFxde21hcmdpbi1sZWZ0OjI1cHh9Lm5lLW10LTh7bWFyZ2luLXRvcDoycmVtfS5uZS1ibG9ja3tkaXNwbGF5OmJsb2NrfS5uZS1pbmxpbmUtYmxvY2t7ZGlzcGxheTppbmxpbmUtYmxvY2t9Lm5lLWZsZXh7ZGlzcGxheTpmbGV4fS5uZS1oaWRkZW57ZGlzcGxheTpub25lfS5uZS1oLTEye2hlaWdodDozcmVtfS5uZS1oLVxcXFxbNDBweFxcXFxde2hlaWdodDo0MHB4fS5uZS13LTEye3dpZHRoOjNyZW19Lm5lLXctNXt3aWR0aDoxLjI1cmVtfS5uZS13LVxcXFxbNDBweFxcXFxde3dpZHRoOjQwcHh9Lm5lLXctZnVsbHt3aWR0aDoxMDAlfS5uZS1jdXJzb3ItcG9pbnRlcntjdXJzb3I6cG9pbnRlcn0ubmUtbGlzdC1ub25le2xpc3Qtc3R5bGUtdHlwZTpub25lfS5uZS1mbGV4LXJvd3tmbGV4LWRpcmVjdGlvbjpyb3d9Lm5lLWZsZXgtY29se2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0ubmUtZmxleC13cmFwe2ZsZXgtd3JhcDp3cmFwfS5uZS1pdGVtcy1jZW50ZXJ7YWxpZ24taXRlbXM6Y2VudGVyfS5uZS1qdXN0aWZ5LWJldHdlZW57anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lm5lLWdhcC0xe2dhcDouMjVyZW19Lm5lLWdhcC0ye2dhcDouNXJlbX0ubmUtZ2FwLTR7Z2FwOjFyZW19Lm5lLWdhcC02e2dhcDoxLjVyZW19Lm5lLWJyZWFrLXdvcmRze3dvcmQtd3JhcDpicmVhay13b3JkfS5uZS1yb3VuZGVkLWZ1bGx7Ym9yZGVyLXJhZGl1czo5OTk5cHh9Lm5lLXJvdW5kZWQtbGd7Ym9yZGVyLXJhZGl1czouNXJlbX0ubmUtYmctXFxcXFtcXFxcI2ZjZmNmY1xcXFxdey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6I2ZjZmNmYztiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjUyLDI1MiwyNTIsdmFyKC0tdHctYmctb3BhY2l0eSkpfS5uZS1vYmplY3QtY292ZXJ7LW8tb2JqZWN0LWZpdDpjb3ZlcjtvYmplY3QtZml0OmNvdmVyfS5uZS1wLTB7cGFkZGluZzowfS5uZS1weC00e3BhZGRpbmctbGVmdDoxcmVtO3BhZGRpbmctcmlnaHQ6MXJlbX0ubmUtcHktNXtwYWRkaW5nLWJvdHRvbToxLjI1cmVtO3BhZGRpbmctdG9wOjEuMjVyZW19Lm5lLXBiLTN7cGFkZGluZy1ib3R0b206Ljc1cmVtfS5uZS1mb250LXNhbnN7Zm9udC1mYW1pbHk6dWktc2Fucy1zZXJpZixzeXN0ZW0tdWksLWFwcGxlLXN5c3RlbSxTZWdvZSBVSSxSb2JvdG8sVWJ1bnR1LENhbnRhcmVsbCxOb3RvIFNhbnMsc2Fucy1zZXJpZixCbGlua01hY1N5c3RlbUZvbnQsSGVsdmV0aWNhIE5ldWUsQXJpYWwsQXBwbGUgQ29sb3IgRW1vamksU2Vnb2UgVUkgRW1vamksU2Vnb2UgVUkgU3ltYm9sLE5vdG8gQ29sb3IgRW1vaml9Lm5lLXRleHQtbGd7Zm9udC1zaXplOjEuMTI1cmVtO2xpbmUtaGVpZ2h0OjEuNzVyZW19Lm5lLXRleHQtc217Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MS4yNXJlbX0ubmUtZm9udC1ib2xke2ZvbnQtd2VpZ2h0OjcwMH0ubmUtdGV4dC1ibGFja3stLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiMwMDA7Y29sb3I6cmdiYSgwLDAsMCx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0ubmUtdGV4dC1ncmF5LTkwMHstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiMxMTE4Mjc7Y29sb3I6cmdiYSgxNywyNCwzOSx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0ubmUtdGV4dC1yZWQtODAwey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6Izk5MWIxYjtjb2xvcjpyZ2JhKDE1MywyNywyNyx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0ubmUtbm8tdW5kZXJsaW5le3RleHQtZGVjb3JhdGlvbi1saW5lOm5vbmV9Lm5lLW9wYWNpdHktMzB7b3BhY2l0eTouM30ubm9zdHJFbWJlZENhcmR7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjojZmNmY2ZjO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTIsMjUyLDI1Mix2YXIoLS10dy1iZy1vcGFjaXR5KSk7Ym9yZGVyLXJhZGl1czouNXJlbTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoycmVtO3BhZGRpbmc6MS4yNXJlbSAxcmVtIC43NXJlbX1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7Lm5vc3RyRW1iZWRDYXJke21heC13aWR0aDo2MDBweH19Lm5vc3RyRW1iZWRDYXJke2JvcmRlcjoxcHggc29saWQgI2RkZDtmb250LWZhbWlseTp1aS1zYW5zLXNlcmlmLHN5c3RlbS11aSwtYXBwbGUtc3lzdGVtLFNlZ29lIFVJLFJvYm90byxVYnVudHUsQ2FudGFyZWxsLE5vdG8gU2FucyxzYW5zLXNlcmlmLEJsaW5rTWFjU3lzdGVtRm9udCxIZWx2ZXRpY2EgTmV1ZSxBcmlhbCxBcHBsZSBDb2xvciBFbW9qaSxTZWdvZSBVSSBFbW9qaSxTZWdvZSBVSSBTeW1ib2wsTm90byBDb2xvciBFbW9qaTt0ZXh0LWFsaWduOmxlZnR9LmNhcmRDb250ZW50e3dvcmQtd3JhcDpicmVhay13b3JkO2ZvbnQtc2l6ZToxLjEyNXJlbTtsaW5lLWhlaWdodDoxLjc1cmVtO3doaXRlLXNwYWNlOnByZS1saW5lfS5jYXJkQ29udGVudE1lZGlhe3RleHQtYWxpZ246Y2VudGVyfS5jYXJkQ29udGVudE1lZGlhPmlmcmFtZSwuY2FyZENvbnRlbnRNZWRpYT5pbWcsLmNhcmRDb250ZW50TWVkaWE+dmlkZW97Ym9yZGVyLXJhZGl1czoxNXB4O3dpZHRoOjUwJX0uY2FyZFByb2ZpbGV7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7Z2FwOjFyZW19LnByb2ZpbGVJbWd7Ym9yZGVyLXJhZGl1czo5OTk5cHg7aGVpZ2h0OjNyZW07d2lkdGg6M3JlbX0uZm9sbG93ZWRQcm9kaWxlSW1ne2JvcmRlci1yYWRpdXM6OTk5OXB4O2hlaWdodDo0MHB4O21hcmdpbi1sZWZ0Oi0yNXB4Oy1vLW9iamVjdC1maXQ6Y292ZXI7b2JqZWN0LWZpdDpjb3Zlcjtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0MHB4fS5mb2xsb3dlZFByb2RpbGVJbWc6aG92ZXJ7ei1pbmRleDo5OTl9LnByb2ZpbGVEZXRhaWxze2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnByb2ZpbGVOYW1le2ZvbnQtc2l6ZToxLjEyNXJlbTtmb250LXdlaWdodDo3MDA7bGluZS1oZWlnaHQ6MS43NXJlbX0ucHJvZmlsZU5hbWUgYXstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiMxMTE4Mjc7Y29sb3I6cmdiYSgxNywyNCwzOSx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKTt0ZXh0LWRlY29yYXRpb24tbGluZTpub25lfS5wcm9maWxlTmFtZSBhOmhvdmVyey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzRiNTU2Mztjb2xvcjpyZ2JhKDc1LDg1LDk5LHZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS5wcm9maWxlUGtleXthbGlnbi1pdGVtczpjZW50ZXI7ZmxleC1kaXJlY3Rpb246cm93fS5jYXJkTWV0YSwucHJvZmlsZVBrZXl7ZGlzcGxheTpmbGV4O2dhcDouMjVyZW19LmNhcmRNZXRhe2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7LmNhcmRNZXRhe2dhcDouNXJlbX19aHJ7Ym9yZGVyLWNvbG9yOiNkZGQ7bWFyZ2luOi4yNXJlbTtvcGFjaXR5Oi4zO3dpZHRoOjEwMCV9LmNhcmRJbnRlcmFjdGlvbnN7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7LmNhcmRJbnRlcmFjdGlvbnN7Z2FwOjIuNXJlbTtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH19LmludGVyYWN0aW9uQ29udGFpbmVye2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2dhcDouNXJlbX0uY29weUljb24sLmhlYXJ0SWNvbiwubGlua0ljb24sLnJlcGx5SWNvbiwucmVwb3N0SWNvbntkaXNwbGF5OmJsb2NrO2hlaWdodDoxLjI1cmVtO3dpZHRoOjEuMjVyZW19LmNvcHlJY29uLC5oZWFydEljb24sLmxpbmtDb3B5QnRuLC5saW5rSWNvbiwubGlua0xpbmssLnJlcGx5SWNvbiwucmVwb3N0SWNvbnstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOiMxMTE4Mjc7Y29sb3I6cmdiYSgxNywyNCwzOSx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0ubGlua0NvcHlCdG4sLmxpbmtMaW5re2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjowO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7Z2FwOi41cmVtO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtZGVjb3JhdGlvbi1saW5lOm5vbmV9LmxpbmtDb3B5QnRuOmhvdmVyLC5saW5rQ29weUJ0bjpob3ZlciAuY29weUljb24sLmxpbmtMaW5rOmhvdmVyey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzRiNTU2Mztjb2xvcjpyZ2JhKDc1LDg1LDk5LHZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS5saW5rQ29weUJ0bi5ncmVlbiwubGlua0NvcHlCdG4uZ3JlZW4gLmNvcHlJY29uey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6IzE2YTM0YTtjb2xvcjpyZ2JhKDIyLDE2Myw3NCx2YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0uZGlzcGxheVRleHR7ZGlzcGxheTpub25lfUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsuZGlzcGxheVRleHR7ZGlzcGxheTpmbGV4O2ZvbnQtc2l6ZTouODc1cmVtO2xpbmUtaGVpZ2h0OjEuMjVyZW07dmlzaWJpbGl0eTp2aXNpYmxlfX0uY29weVRleHR7ZGlzcGxheTpub25lfS5ub3N0cmljaExpbmt7ZGlzcGxheTpmbGV4O2ZsZXgtZ3JvdzoxO2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0uY2FyZFRpdGxle21hcmdpbjowfS5jYXJkRGVzY3JpcHRpb257bWFyZ2luLXRvcDowfS5jYXJkTGlzdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoyMHB4O21hcmdpbi10b3A6MTBweH0ucHJvZmlsZVdpdGhvdXRJbWd7YmFja2dyb3VuZC1jb2xvcjojZTllOWU5O2JvcmRlci1yYWRpdXM6NTAlO2hlaWdodDo1MHB4O3dpZHRoOjUwcHh9LmRpZmZQcm9maWxlc3tmb250LXNpemU6MS4ycmVtO2ZvbnQtd2VpZ2h0OjcwMH0uaG92ZXJcXFxcOm5lLXotXFxcXFs5OTlcXFxcXTpob3Zlcnt6LWluZGV4Ojk5OX1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7Lm1kXFxcXDpuZS12aXNpYmxle3Zpc2liaWxpdHk6dmlzaWJsZX0ubWRcXFxcOm5lLWZsZXh7ZGlzcGxheTpmbGV4fS5tZFxcXFw6bmUtbWF4LXctXFxcXFs2MDBweFxcXFxde21heC13aWR0aDo2MDBweH0ubWRcXFxcOm5lLWp1c3RpZnktc3RhcnR7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvc3R5bGUuY3NzXCIsXCI8bm8gc291cmNlPlwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxpQkFBQSx1QkFBYyxDQUFkLHVCQUFjLENBQWQsa0JBQWMsQ0FBZCxrQkFBYyxDQUFkLGFBQWMsQ0FBZCxhQUFjLENBQWQsYUFBYyxDQUFkLGNBQWMsQ0FBZCxjQUFjLENBQWQsWUFBYyxDQUFkLFlBQWMsQ0FBZCxpQkFBYyxDQUFkLHFDQUFjLENBQWQsNkJBQWMsQ0FBZCw0QkFBYyxDQUFkLDJCQUFjLENBQWQsY0FBYyxDQUFkLG1CQUFjLENBQWQscUJBQWMsQ0FBZCxzQkFBYyxDQUFkLHVCQUFjLENBQWQsaUJBQWMsQ0FBZCwwQkFBYyxDQUFkLDJCQUFjLENBQWQsbUNBQWMsQ0FBZCx1Q0FBYyxDQUFkLGdDQUFjLENBQWQsMkJBQWMsQ0FBZCxtQ0FBYyxDQUFkLFdBQWMsQ0FBZCxpQkFBYyxDQUFkLGVBQWMsQ0FBZCxnQkFBYyxDQUFkLGlCQUFjLENBQWQsYUFBYyxDQUFkLGVBQWMsQ0FBZCxZQUFjLENBQWQsa0JBQWMsQ0FBZCxvQkFBYyxDQUFkLDBCQUFjLENBQWQsd0JBQWMsQ0FBZCx5QkFBYyxDQUFkLDBCQUFjLENBQWQsc0JBQWMsQ0FBZCx1QkFBYyxDQUFkLHdCQUFjLENBQWQscUJBQWMsQ0FBZCxXQUFBLHVCQUFjLENBQWQsdUJBQWMsQ0FBZCxrQkFBYyxDQUFkLGtCQUFjLENBQWQsYUFBYyxDQUFkLGFBQWMsQ0FBZCxhQUFjLENBQWQsY0FBYyxDQUFkLGNBQWMsQ0FBZCxZQUFjLENBQWQsWUFBYyxDQUFkLGlCQUFjLENBQWQscUNBQWMsQ0FBZCw2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LENBQ1osd0JBRmMsQ0FLaEIsV0FDRSxRQUNGLENBRUEsaUJBQ0UsWUFDRixDQUVBLFVBQ0UsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixRQUFTLENBQ1QsZUFDRixDQUVBLG1CQUdFLHdCQUF5QixDQUN6QixpQkFBa0IsQ0FGbEIsV0FBWSxDQURaLFVBSUYsQ0FFQSxjQUVFLGdCQUFpQixDQURqQixlQUVGLENBMUlBLDJCQUFBLFlDQUEsQURBQSx5QkFBQSxnQkFBQSxtQkNBQSxBREFBLGFBQUEsYUNBQSxBREFBLHdCQUFBLGdCQ0FBLEFEQUEsc0JBQUEsMkJDQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdGFpbHdpbmQgYmFzZTtcXG5AdGFpbHdpbmQgY29tcG9uZW50cztcXG5AdGFpbHdpbmQgdXRpbGl0aWVzO1xcblxcbi5ub3N0ckVtYmVkQ2FyZCB7XFxuICBAYXBwbHkgbmUtcHgtNCBuZS1weS01IG5lLXBiLTMgbmUtYmctWyNmY2ZjZmNdIG5lLXJvdW5kZWQtbGcgbWQ6bmUtbWF4LXctWzYwMHB4XSBuZS1mbGV4IG5lLWZsZXgtY29sIG5lLWdhcC04O1xcbiAgQGFwcGx5IG5lLWZvbnQtc2FucyBuZS10ZXh0LWxlZnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcbn1cXG5cXG4uY2FyZENvbnRlbnQge1xcbiAgQGFwcGx5IG5lLXRleHQtbGcgbmUtYnJlYWstd29yZHMgbmUtd2hpdGVzcGFjZS1wcmUtbGluZTtcXG59XFxuXFxuLmNhcmRDb250ZW50TWVkaWEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uY2FyZENvbnRlbnRNZWRpYSA+IHZpZGVvLFxcbi5jYXJkQ29udGVudE1lZGlhID4gaW1nLFxcbi5jYXJkQ29udGVudE1lZGlhID4gaWZyYW1lIHtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cXG4uY2FyZFByb2ZpbGUge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1yb3cgbmUtZ2FwLTQgbmUtaXRlbXMtY2VudGVyO1xcbn1cXG5cXG4ucHJvZmlsZUltZyB7XFxuICBAYXBwbHkgbmUtdy0xMiBuZS1oLTEyIG5lLXJvdW5kZWQtZnVsbDtcXG59XFxuXFxuLmZvbGxvd2VkUHJvZGlsZUltZyB7XFxuICBAYXBwbHkgbmUtdy1bNDBweF0gbmUtaC1bNDBweF0gbmUtcm91bmRlZC1mdWxsIG5lLW1zLVstMjVweF0gbmUtb2JqZWN0LWNvdmVyIGhvdmVyOm5lLXotWzk5OV0gbmUtcmVsYXRpdmUgO1xcbn1cXG5cXG4ucHJvZmlsZURldGFpbHMge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1jb2w7XFxufVxcblxcbi5wcm9maWxlTmFtZSB7XFxuICBAYXBwbHkgbmUtdGV4dC1sZyBuZS1mb250LWJvbGQ7XFxufVxcblxcbi5wcm9maWxlTmFtZSBhIHtcXG4gIEBhcHBseSBuZS1uby11bmRlcmxpbmUgbmUtdGV4dC1ncmF5LTkwMDtcXG59XFxuLnByb2ZpbGVOYW1lIGE6aG92ZXIge1xcbiAgQGFwcGx5IG5lLXRleHQtZ3JheS02MDA7XFxufVxcblxcbi5wcm9maWxlUGtleSB7XFxuICBAYXBwbHkgbmUtZmxleCBuZS1mbGV4LXJvdyBuZS1nYXAtMSBuZS1pdGVtcy1jZW50ZXI7XFxufVxcblxcbi5jYXJkTWV0YSB7XFxuICBAYXBwbHkgbmUtZmxleCBuZS1mbGV4LWNvbCBuZS1nYXAtMSBtZDpuZS1nYXAtMjtcXG59XFxuXFxuaHIge1xcbiAgQGFwcGx5IG5lLXctZnVsbCBuZS1vcGFjaXR5LTMwIG5lLW0tMTtcXG4gIGJvcmRlci1jb2xvcjogI2RkZDtcXG59XFxuXFxuLmNhcmRJbnRlcmFjdGlvbnMge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1yb3cgbmUtanVzdGlmeS1iZXR3ZWVuIG1kOm5lLWp1c3RpZnktc3RhcnQgbWQ6bmUtZ2FwLTEwO1xcbn1cXG5cXG4uaW50ZXJhY3Rpb25Db250YWluZXIge1xcbiAgQGFwcGx5IG5lLWZsZXggbmUtZmxleC1yb3cgbmUtaXRlbXMtY2VudGVyIG5lLWdhcC0yO1xcbn1cXG5cXG4ucmVwbHlJY29uLFxcbi5yZXBvc3RJY29uLFxcbi5oZWFydEljb24sXFxuLmxpbmtJY29uLFxcbi5jb3B5SWNvbiB7XFxuICBAYXBwbHkgbmUtdGV4dC1ncmF5LTkwMCBuZS1ibG9jayBuZS13LTUgbmUtaC01O1xcbn1cXG5cXG4ubGlua0NvcHlCdG4sXFxuLmxpbmtMaW5rIHtcXG4gIEBhcHBseSBuZS10ZXh0LWdyYXktOTAwIG5lLW5vLXVuZGVybGluZSBuZS1mbGV4IG5lLWZsZXgtcm93IG5lLWl0ZW1zLWNlbnRlciBuZS1nYXAtMiBuZS1jdXJzb3ItcG9pbnRlciBuZS1yZWxhdGl2ZTtcXG4gIGJvcmRlcjogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubGlua0NvcHlCdG46aG92ZXIsXFxuLmxpbmtMaW5rOmhvdmVyLFxcbi5saW5rQ29weUJ0bjpob3ZlciAuY29weUljb24ge1xcbiAgQGFwcGx5IG5lLXRleHQtZ3JheS02MDA7XFxufVxcblxcbi5saW5rQ29weUJ0bi5ncmVlbixcXG4ubGlua0NvcHlCdG4uZ3JlZW4gLmNvcHlJY29uIHtcXG4gIEBhcHBseSBuZS10ZXh0LWdyZWVuLTYwMDtcXG59XFxuXFxuLmRpc3BsYXlUZXh0IHtcXG4gIEBhcHBseSBuZS1oaWRkZW4gbWQ6bmUtZmxleCBtZDpuZS12aXNpYmxlIG1kOm5lLXRleHQtc207XFxufVxcblxcbi5jb3B5VGV4dCB7XFxuICBAYXBwbHkgbmUtaGlkZGVuO1xcbn1cXG5cXG4ubm9zdHJpY2hMaW5rIHtcXG4gIEBhcHBseSBuZS1mbGV4O1xcbiAgZmxleC1ncm93OiAxO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuXFxuLmNhcmRUaXRsZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5jYXJkRGVzY3JpcHRpb24ge1xcbiAgbWFyZ2luLXRvcDogMDtcXG59XFxuXFxuLmNhcmRMaXN0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAyMHB4O1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG59XFxuXFxuLnByb2ZpbGVXaXRob3V0SW1nIHtcXG4gIHdpZHRoOiA1MHB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZTllOTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG59XFxuXFxuLmRpZmZQcm9maWxlcyB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcbn1cXG5cIixudWxsXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiY29uc3Qge2JlY2gzMiwgaGV4LCB1dGY4fSA9IHJlcXVpcmUoJ0BzY3VyZS9iYXNlJylcblxuLy8gZGVmYXVsdHMgZm9yIGVuY29kZTsgZGVmYXVsdCB0aW1lc3RhbXAgaXMgY3VycmVudCB0aW1lIGF0IGNhbGxcbmNvbnN0IERFRkFVTFRORVRXT1JLID0ge1xuICAvLyBkZWZhdWx0IG5ldHdvcmsgaXMgYml0Y29pblxuICBiZWNoMzI6ICdiYycsXG4gIHB1YktleUhhc2g6IDB4MDAsXG4gIHNjcmlwdEhhc2g6IDB4MDUsXG4gIHZhbGlkV2l0bmVzc1ZlcnNpb25zOiBbMF1cbn1cbmNvbnN0IFRFU1RORVRXT1JLID0ge1xuICBiZWNoMzI6ICd0YicsXG4gIHB1YktleUhhc2g6IDB4NmYsXG4gIHNjcmlwdEhhc2g6IDB4YzQsXG4gIHZhbGlkV2l0bmVzc1ZlcnNpb25zOiBbMF1cbn1cbmNvbnN0IFJFR1RFU1RORVRXT1JLID0ge1xuICBiZWNoMzI6ICdiY3J0JyxcbiAgcHViS2V5SGFzaDogMHg2ZixcbiAgc2NyaXB0SGFzaDogMHhjNCxcbiAgdmFsaWRXaXRuZXNzVmVyc2lvbnM6IFswXVxufVxuY29uc3QgU0lNTkVUV09SSyA9IHtcbiAgYmVjaDMyOiAnc2InLFxuICBwdWJLZXlIYXNoOiAweDNmLFxuICBzY3JpcHRIYXNoOiAweDdiLFxuICB2YWxpZFdpdG5lc3NWZXJzaW9uczogWzBdXG59XG5cbmNvbnN0IEZFQVRVUkVCSVRfT1JERVIgPSBbXG4gICdvcHRpb25fZGF0YV9sb3NzX3Byb3RlY3QnLFxuICAnaW5pdGlhbF9yb3V0aW5nX3N5bmMnLFxuICAnb3B0aW9uX3VwZnJvbnRfc2h1dGRvd25fc2NyaXB0JyxcbiAgJ2dvc3NpcF9xdWVyaWVzJyxcbiAgJ3Zhcl9vbmlvbl9vcHRpbicsXG4gICdnb3NzaXBfcXVlcmllc19leCcsXG4gICdvcHRpb25fc3RhdGljX3JlbW90ZWtleScsXG4gICdwYXltZW50X3NlY3JldCcsXG4gICdiYXNpY19tcHAnLFxuICAnb3B0aW9uX3N1cHBvcnRfbGFyZ2VfY2hhbm5lbCdcbl1cblxuY29uc3QgRElWSVNPUlMgPSB7XG4gIG06IEJpZ0ludCgxZTMpLFxuICB1OiBCaWdJbnQoMWU2KSxcbiAgbjogQmlnSW50KDFlOSksXG4gIHA6IEJpZ0ludCgxZTEyKVxufVxuXG5jb25zdCBNQVhfTUlMTElTQVRTID0gQmlnSW50KCcyMTAwMDAwMDAwMDAwMDAwMDAwJylcblxuY29uc3QgTUlMTElTQVRTX1BFUl9CVEMgPSBCaWdJbnQoMWUxMSlcblxuY29uc3QgVEFHQ09ERVMgPSB7XG4gIHBheW1lbnRfaGFzaDogMSxcbiAgcGF5bWVudF9zZWNyZXQ6IDE2LFxuICBkZXNjcmlwdGlvbjogMTMsXG4gIHBheWVlOiAxOSxcbiAgZGVzY3JpcHRpb25faGFzaDogMjMsIC8vIGNvbW1pdCB0byBsb25nZXIgZGVzY3JpcHRpb25zICh1c2VkIGJ5IGxudXJsLXBheSlcbiAgZXhwaXJ5OiA2LCAvLyBkZWZhdWx0OiAzNjAwICgxIGhvdXIpXG4gIG1pbl9maW5hbF9jbHR2X2V4cGlyeTogMjQsIC8vIGRlZmF1bHQ6IDlcbiAgZmFsbGJhY2tfYWRkcmVzczogOSxcbiAgcm91dGVfaGludDogMywgLy8gZm9yIGV4dHJhIHJvdXRpbmcgaW5mbyAocHJpdmF0ZSBldGMuKVxuICBmZWF0dXJlX2JpdHM6IDUsXG4gIG1ldGFkYXRhOiAyN1xufVxuXG4vLyByZXZlcnNlIHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgVEFHQ09ERVMgYW5kIGluc2VydCBpbnRvIFRBR05BTUVTXG5jb25zdCBUQUdOQU1FUyA9IHt9XG5mb3IgKGxldCBpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKFRBR0NPREVTKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgY29uc3QgY3VycmVudE5hbWUgPSBrZXlzW2ldXG4gIGNvbnN0IGN1cnJlbnRDb2RlID0gVEFHQ09ERVNba2V5c1tpXV0udG9TdHJpbmcoKVxuICBUQUdOQU1FU1tjdXJyZW50Q29kZV0gPSBjdXJyZW50TmFtZVxufVxuXG5jb25zdCBUQUdQQVJTRVJTID0ge1xuICAxOiB3b3JkcyA9PiBoZXguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpKSwgLy8gMjU2IGJpdHNcbiAgMTY6IHdvcmRzID0+IGhleC5lbmNvZGUoYmVjaDMyLmZyb21Xb3Jkc1Vuc2FmZSh3b3JkcykpLCAvLyAyNTYgYml0c1xuICAxMzogd29yZHMgPT4gdXRmOC5lbmNvZGUoYmVjaDMyLmZyb21Xb3Jkc1Vuc2FmZSh3b3JkcykpLCAvLyBzdHJpbmcgdmFyaWFibGUgbGVuZ3RoXG4gIDE5OiB3b3JkcyA9PiBoZXguZW5jb2RlKGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpKSwgLy8gMjY0IGJpdHNcbiAgMjM6IHdvcmRzID0+IGhleC5lbmNvZGUoYmVjaDMyLmZyb21Xb3Jkc1Vuc2FmZSh3b3JkcykpLCAvLyAyNTYgYml0c1xuICAyNzogd29yZHMgPT4gaGV4LmVuY29kZShiZWNoMzIuZnJvbVdvcmRzVW5zYWZlKHdvcmRzKSksIC8vIHZhcmlhYmxlXG4gIDY6IHdvcmRzVG9JbnRCRSwgLy8gZGVmYXVsdDogMzYwMCAoMSBob3VyKVxuICAyNDogd29yZHNUb0ludEJFLCAvLyBkZWZhdWx0OiA5XG4gIDM6IHJvdXRpbmdJbmZvUGFyc2VyLCAvLyBmb3IgZXh0cmEgcm91dGluZyBpbmZvIChwcml2YXRlIGV0Yy4pXG4gIDU6IGZlYXR1cmVCaXRzUGFyc2VyIC8vIGtlZXAgZmVhdHVyZSBiaXRzIGFzIGFycmF5IG9mIDUgYml0IHdvcmRzXG59XG5cbmZ1bmN0aW9uIGdldFVua25vd25QYXJzZXIodGFnQ29kZSkge1xuICByZXR1cm4gd29yZHMgPT4gKHtcbiAgICB0YWdDb2RlOiBwYXJzZUludCh0YWdDb2RlKSxcbiAgICB3b3JkczogYmVjaDMyLmVuY29kZSgndW5rbm93bicsIHdvcmRzLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUilcbiAgfSlcbn1cblxuZnVuY3Rpb24gd29yZHNUb0ludEJFKHdvcmRzKSB7XG4gIHJldHVybiB3b3Jkcy5yZXZlcnNlKCkucmVkdWNlKCh0b3RhbCwgaXRlbSwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gdG90YWwgKyBpdGVtICogTWF0aC5wb3coMzIsIGluZGV4KVxuICB9LCAwKVxufVxuXG4vLyBmaXJzdCBjb252ZXJ0IGZyb20gd29yZHMgdG8gYnVmZmVyLCB0cmltbWluZyBwYWRkaW5nIHdoZXJlIG5lY2Vzc2FyeVxuLy8gcGFyc2UgaW4gNTEgYnl0ZSBjaHVua3MuIFNlZSBlbmNvZGVyIGZvciBkZXRhaWxzLlxuZnVuY3Rpb24gcm91dGluZ0luZm9QYXJzZXIod29yZHMpIHtcbiAgY29uc3Qgcm91dGVzID0gW11cbiAgbGV0IHB1YmtleSxcbiAgICBzaG9ydENoYW5uZWxJZCxcbiAgICBmZWVCYXNlTVNhdHMsXG4gICAgZmVlUHJvcG9ydGlvbmFsTWlsbGlvbnRocyxcbiAgICBjbHR2RXhwaXJ5RGVsdGFcbiAgbGV0IHJvdXRlc0J1ZmZlciA9IGJlY2gzMi5mcm9tV29yZHNVbnNhZmUod29yZHMpXG4gIHdoaWxlIChyb3V0ZXNCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgIHB1YmtleSA9IGhleC5lbmNvZGUocm91dGVzQnVmZmVyLnNsaWNlKDAsIDMzKSkgLy8gMzMgYnl0ZXNcbiAgICBzaG9ydENoYW5uZWxJZCA9IGhleC5lbmNvZGUocm91dGVzQnVmZmVyLnNsaWNlKDMzLCA0MSkpIC8vIDggYnl0ZXNcbiAgICBmZWVCYXNlTVNhdHMgPSBwYXJzZUludChoZXguZW5jb2RlKHJvdXRlc0J1ZmZlci5zbGljZSg0MSwgNDUpKSwgMTYpIC8vIDQgYnl0ZXNcbiAgICBmZWVQcm9wb3J0aW9uYWxNaWxsaW9udGhzID0gcGFyc2VJbnQoXG4gICAgICBoZXguZW5jb2RlKHJvdXRlc0J1ZmZlci5zbGljZSg0NSwgNDkpKSxcbiAgICAgIDE2XG4gICAgKSAvLyA0IGJ5dGVzXG4gICAgY2x0dkV4cGlyeURlbHRhID0gcGFyc2VJbnQoaGV4LmVuY29kZShyb3V0ZXNCdWZmZXIuc2xpY2UoNDksIDUxKSksIDE2KSAvLyAyIGJ5dGVzXG5cbiAgICByb3V0ZXNCdWZmZXIgPSByb3V0ZXNCdWZmZXIuc2xpY2UoNTEpXG5cbiAgICByb3V0ZXMucHVzaCh7XG4gICAgICBwdWJrZXksXG4gICAgICBzaG9ydF9jaGFubmVsX2lkOiBzaG9ydENoYW5uZWxJZCxcbiAgICAgIGZlZV9iYXNlX21zYXQ6IGZlZUJhc2VNU2F0cyxcbiAgICAgIGZlZV9wcm9wb3J0aW9uYWxfbWlsbGlvbnRoczogZmVlUHJvcG9ydGlvbmFsTWlsbGlvbnRocyxcbiAgICAgIGNsdHZfZXhwaXJ5X2RlbHRhOiBjbHR2RXhwaXJ5RGVsdGFcbiAgICB9KVxuICB9XG4gIHJldHVybiByb3V0ZXNcbn1cblxuZnVuY3Rpb24gZmVhdHVyZUJpdHNQYXJzZXIod29yZHMpIHtcbiAgY29uc3QgYm9vbHMgPSB3b3Jkc1xuICAgIC5zbGljZSgpXG4gICAgLnJldmVyc2UoKVxuICAgIC5tYXAod29yZCA9PiBbXG4gICAgICAhISh3b3JkICYgMGIxKSxcbiAgICAgICEhKHdvcmQgJiAwYjEwKSxcbiAgICAgICEhKHdvcmQgJiAwYjEwMCksXG4gICAgICAhISh3b3JkICYgMGIxMDAwKSxcbiAgICAgICEhKHdvcmQgJiAwYjEwMDAwKVxuICAgIF0pXG4gICAgLnJlZHVjZSgoZmluYWxBcnIsIGl0ZW1BcnIpID0+IGZpbmFsQXJyLmNvbmNhdChpdGVtQXJyKSwgW10pXG4gIHdoaWxlIChib29scy5sZW5ndGggPCBGRUFUVVJFQklUX09SREVSLmxlbmd0aCAqIDIpIHtcbiAgICBib29scy5wdXNoKGZhbHNlKVxuICB9XG5cbiAgY29uc3QgZmVhdHVyZUJpdHMgPSB7fVxuXG4gIEZFQVRVUkVCSVRfT1JERVIuZm9yRWFjaCgoZmVhdHVyZU5hbWUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHN0YXR1c1xuICAgIGlmIChib29sc1tpbmRleCAqIDJdKSB7XG4gICAgICBzdGF0dXMgPSAncmVxdWlyZWQnXG4gICAgfSBlbHNlIGlmIChib29sc1tpbmRleCAqIDIgKyAxXSkge1xuICAgICAgc3RhdHVzID0gJ3N1cHBvcnRlZCdcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzID0gJ3Vuc3VwcG9ydGVkJ1xuICAgIH1cbiAgICBmZWF0dXJlQml0c1tmZWF0dXJlTmFtZV0gPSBzdGF0dXNcbiAgfSlcblxuICBjb25zdCBleHRyYUJpdHMgPSBib29scy5zbGljZShGRUFUVVJFQklUX09SREVSLmxlbmd0aCAqIDIpXG4gIGZlYXR1cmVCaXRzLmV4dHJhX2JpdHMgPSB7XG4gICAgc3RhcnRfYml0OiBGRUFUVVJFQklUX09SREVSLmxlbmd0aCAqIDIsXG4gICAgYml0czogZXh0cmFCaXRzLFxuICAgIGhhc19yZXF1aXJlZDogZXh0cmFCaXRzLnJlZHVjZShcbiAgICAgIChyZXN1bHQsIGJpdCwgaW5kZXgpID0+XG4gICAgICAgIGluZGV4ICUgMiAhPT0gMCA/IHJlc3VsdCB8fCBmYWxzZSA6IHJlc3VsdCB8fCBiaXQsXG4gICAgICBmYWxzZVxuICAgIClcbiAgfVxuXG4gIHJldHVybiBmZWF0dXJlQml0c1xufVxuXG5mdW5jdGlvbiBocnBUb01pbGxpc2F0KGhycFN0cmluZywgb3V0cHV0U3RyaW5nKSB7XG4gIGxldCBkaXZpc29yLCB2YWx1ZVxuICBpZiAoaHJwU3RyaW5nLnNsaWNlKC0xKS5tYXRjaCgvXlttdW5wXSQvKSkge1xuICAgIGRpdmlzb3IgPSBocnBTdHJpbmcuc2xpY2UoLTEpXG4gICAgdmFsdWUgPSBocnBTdHJpbmcuc2xpY2UoMCwgLTEpXG4gIH0gZWxzZSBpZiAoaHJwU3RyaW5nLnNsaWNlKC0xKS5tYXRjaCgvXltebXVucDAtOV0kLykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIG11bHRpcGxpZXIgZm9yIHRoZSBhbW91bnQnKVxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gaHJwU3RyaW5nXG4gIH1cblxuICBpZiAoIXZhbHVlLm1hdGNoKC9eXFxkKyQvKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIGh1bWFuIHJlYWRhYmxlIGFtb3VudCcpXG5cbiAgY29uc3QgdmFsdWVCTiA9IEJpZ0ludCh2YWx1ZSlcblxuICBjb25zdCBtaWxsaXNhdG9zaGlzQk4gPSBkaXZpc29yXG4gICAgPyAodmFsdWVCTiAqIE1JTExJU0FUU19QRVJfQlRDKSAvIERJVklTT1JTW2Rpdmlzb3JdXG4gICAgOiB2YWx1ZUJOICogTUlMTElTQVRTX1BFUl9CVENcblxuICBpZiAoXG4gICAgKGRpdmlzb3IgPT09ICdwJyAmJiAhKHZhbHVlQk4gJSBCaWdJbnQoMTApID09PSBCaWdJbnQoMCkpKSB8fFxuICAgIG1pbGxpc2F0b3NoaXNCTiA+IE1BWF9NSUxMSVNBVFNcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbW91bnQgaXMgb3V0c2lkZSBvZiB2YWxpZCByYW5nZScpXG4gIH1cblxuICByZXR1cm4gb3V0cHV0U3RyaW5nID8gbWlsbGlzYXRvc2hpc0JOLnRvU3RyaW5nKCkgOiBtaWxsaXNhdG9zaGlzQk5cbn1cblxuLy8gZGVjb2RlIHdpbGwgb25seSBoYXZlIGV4dHJhIGNvbW1lbnRzIHRoYXQgYXJlbid0IGNvdmVyZWQgaW4gZW5jb2RlIGNvbW1lbnRzLlxuLy8gYWxzbyBpZiBhbnl0aGluZyBpcyBoYXJkIHRvIHJlYWQgSSdsbCBjb21tZW50LlxuZnVuY3Rpb24gZGVjb2RlKHBheW1lbnRSZXF1ZXN0LCBuZXR3b3JrKSB7XG4gIGlmICh0eXBlb2YgcGF5bWVudFJlcXVlc3QgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcignTGlnaHRuaW5nIFBheW1lbnQgUmVxdWVzdCBtdXN0IGJlIHN0cmluZycpXG4gIGlmIChwYXltZW50UmVxdWVzdC5zbGljZSgwLCAyKS50b0xvd2VyQ2FzZSgpICE9PSAnbG4nKVxuICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgcHJvcGVyIGxpZ2h0bmluZyBwYXltZW50IHJlcXVlc3QnKVxuXG4gIGNvbnN0IHNlY3Rpb25zID0gW11cbiAgY29uc3QgZGVjb2RlZCA9IGJlY2gzMi5kZWNvZGUocGF5bWVudFJlcXVlc3QsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxuICBwYXltZW50UmVxdWVzdCA9IHBheW1lbnRSZXF1ZXN0LnRvTG93ZXJDYXNlKClcbiAgY29uc3QgcHJlZml4ID0gZGVjb2RlZC5wcmVmaXhcbiAgbGV0IHdvcmRzID0gZGVjb2RlZC53b3Jkc1xuICBsZXQgbGV0dGVycyA9IHBheW1lbnRSZXF1ZXN0LnNsaWNlKHByZWZpeC5sZW5ndGggKyAxKVxuICBsZXQgc2lnV29yZHMgPSB3b3Jkcy5zbGljZSgtMTA0KVxuICB3b3JkcyA9IHdvcmRzLnNsaWNlKDAsIC0xMDQpXG5cbiAgLy8gV2l0aG91dCByZXZlcnNlIGxvb2t1cHMsIGNhbid0IHNheSB0aGF0IHRoZSBtdWx0aXBpZXIgYXQgdGhlIGVuZCBtdXN0XG4gIC8vIGhhdmUgYSBudW1iZXIgYmVmb3JlIGl0LCBzbyBpbnN0ZWFkIHdlIHBhcnNlLCBhbmQgaWYgdGhlIHNlY29uZCBncm91cFxuICAvLyBkb2Vzbid0IGhhdmUgYW55dGhpbmcsIHRoZXJlJ3MgYSBnb29kIGNoYW5jZSB0aGUgbGFzdCBsZXR0ZXIgb2YgdGhlXG4gIC8vIGNvaW4gdHlwZSBnb3QgY2FwdHVyZWQgYnkgdGhlIHRoaXJkIGdyb3VwLCBzbyBqdXN0IHJlLXJlZ2V4IHdpdGhvdXRcbiAgLy8gdGhlIG51bWJlci5cbiAgbGV0IHByZWZpeE1hdGNoZXMgPSBwcmVmaXgubWF0Y2goL15sbihcXFMrPykoXFxkKikoW2EtekEtWl0/KSQvKVxuICBpZiAocHJlZml4TWF0Y2hlcyAmJiAhcHJlZml4TWF0Y2hlc1syXSlcbiAgICBwcmVmaXhNYXRjaGVzID0gcHJlZml4Lm1hdGNoKC9ebG4oXFxTKykkLylcbiAgaWYgKCFwcmVmaXhNYXRjaGVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSBwcm9wZXIgbGlnaHRuaW5nIHBheW1lbnQgcmVxdWVzdCcpXG4gIH1cblxuICAvLyBcImxuXCIgc2VjdGlvblxuICBzZWN0aW9ucy5wdXNoKHtcbiAgICBuYW1lOiAnbGlnaHRuaW5nX25ldHdvcmsnLFxuICAgIGxldHRlcnM6ICdsbidcbiAgfSlcblxuICAvLyBcImJjXCIgc2VjdGlvblxuICBjb25zdCBiZWNoMzJQcmVmaXggPSBwcmVmaXhNYXRjaGVzWzFdXG4gIGxldCBjb2luTmV0d29ya1xuICBpZiAoIW5ldHdvcmspIHtcbiAgICBzd2l0Y2ggKGJlY2gzMlByZWZpeCkge1xuICAgICAgY2FzZSBERUZBVUxUTkVUV09SSy5iZWNoMzI6XG4gICAgICAgIGNvaW5OZXR3b3JrID0gREVGQVVMVE5FVFdPUktcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgVEVTVE5FVFdPUksuYmVjaDMyOlxuICAgICAgICBjb2luTmV0d29yayA9IFRFU1RORVRXT1JLXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFJFR1RFU1RORVRXT1JLLmJlY2gzMjpcbiAgICAgICAgY29pbk5ldHdvcmsgPSBSRUdURVNUTkVUV09SS1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBTSU1ORVRXT1JLLmJlY2gzMjpcbiAgICAgICAgY29pbk5ldHdvcmsgPSBTSU1ORVRXT1JLXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIG5ldHdvcmsuYmVjaDMyID09PSB1bmRlZmluZWQgfHxcbiAgICAgIG5ldHdvcmsucHViS2V5SGFzaCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBuZXR3b3JrLnNjcmlwdEhhc2ggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgIUFycmF5LmlzQXJyYXkobmV0d29yay52YWxpZFdpdG5lc3NWZXJzaW9ucylcbiAgICApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbmV0d29yaycpXG4gICAgY29pbk5ldHdvcmsgPSBuZXR3b3JrXG4gIH1cbiAgaWYgKCFjb2luTmV0d29yayB8fCBjb2luTmV0d29yay5iZWNoMzIgIT09IGJlY2gzMlByZWZpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjb2luIGJlY2gzMiBwcmVmaXgnKVxuICB9XG4gIHNlY3Rpb25zLnB1c2goe1xuICAgIG5hbWU6ICdjb2luX25ldHdvcmsnLFxuICAgIGxldHRlcnM6IGJlY2gzMlByZWZpeCxcbiAgICB2YWx1ZTogY29pbk5ldHdvcmtcbiAgfSlcblxuICAvLyBhbW91bnQgc2VjdGlvblxuICBjb25zdCB2YWx1ZSA9IHByZWZpeE1hdGNoZXNbMl1cbiAgbGV0IG1pbGxpc2F0b3NoaXNcbiAgaWYgKHZhbHVlKSB7XG4gICAgY29uc3QgZGl2aXNvciA9IHByZWZpeE1hdGNoZXNbM11cbiAgICBtaWxsaXNhdG9zaGlzID0gaHJwVG9NaWxsaXNhdCh2YWx1ZSArIGRpdmlzb3IsIHRydWUpXG4gICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICBuYW1lOiAnYW1vdW50JyxcbiAgICAgIGxldHRlcnM6IHByZWZpeE1hdGNoZXNbMl0gKyBwcmVmaXhNYXRjaGVzWzNdLFxuICAgICAgdmFsdWU6IG1pbGxpc2F0b3NoaXNcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIG1pbGxpc2F0b3NoaXMgPSBudWxsXG4gIH1cblxuICAvLyBcIjFcIiBzZXBhcmF0b3JcbiAgc2VjdGlvbnMucHVzaCh7XG4gICAgbmFtZTogJ3NlcGFyYXRvcicsXG4gICAgbGV0dGVyczogJzEnXG4gIH0pXG5cbiAgLy8gdGltZXN0YW1wXG4gIGNvbnN0IHRpbWVzdGFtcCA9IHdvcmRzVG9JbnRCRSh3b3Jkcy5zbGljZSgwLCA3KSlcbiAgd29yZHMgPSB3b3Jkcy5zbGljZSg3KSAvLyB0cmltIG9mZiB0aGUgbGVmdCA3IHdvcmRzXG4gIHNlY3Rpb25zLnB1c2goe1xuICAgIG5hbWU6ICd0aW1lc3RhbXAnLFxuICAgIGxldHRlcnM6IGxldHRlcnMuc2xpY2UoMCwgNyksXG4gICAgdmFsdWU6IHRpbWVzdGFtcFxuICB9KVxuICBsZXR0ZXJzID0gbGV0dGVycy5zbGljZSg3KVxuXG4gIGxldCB0YWdOYW1lLCBwYXJzZXIsIHRhZ0xlbmd0aCwgdGFnV29yZHNcbiAgLy8gd2UgaGF2ZSBubyB0YWcgY291bnQgdG8gZ28gb24sIHNvIGp1c3Qga2VlcCBoYWNraW5nIG9mZiB3b3Jkc1xuICAvLyB1bnRpbCB3ZSBoYXZlIG5vbmUuXG4gIHdoaWxlICh3b3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgdGFnQ29kZSA9IHdvcmRzWzBdLnRvU3RyaW5nKClcbiAgICB0YWdOYW1lID0gVEFHTkFNRVNbdGFnQ29kZV0gfHwgJ3Vua25vd25fdGFnJ1xuICAgIHBhcnNlciA9IFRBR1BBUlNFUlNbdGFnQ29kZV0gfHwgZ2V0VW5rbm93blBhcnNlcih0YWdDb2RlKVxuICAgIHdvcmRzID0gd29yZHMuc2xpY2UoMSlcblxuICAgIHRhZ0xlbmd0aCA9IHdvcmRzVG9JbnRCRSh3b3Jkcy5zbGljZSgwLCAyKSlcbiAgICB3b3JkcyA9IHdvcmRzLnNsaWNlKDIpXG5cbiAgICB0YWdXb3JkcyA9IHdvcmRzLnNsaWNlKDAsIHRhZ0xlbmd0aClcbiAgICB3b3JkcyA9IHdvcmRzLnNsaWNlKHRhZ0xlbmd0aClcblxuICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgbmFtZTogdGFnTmFtZSxcbiAgICAgIHRhZzogbGV0dGVyc1swXSxcbiAgICAgIGxldHRlcnM6IGxldHRlcnMuc2xpY2UoMCwgMSArIDIgKyB0YWdMZW5ndGgpLFxuICAgICAgdmFsdWU6IHBhcnNlcih0YWdXb3JkcykgLy8gc2VlOiBwYXJzZXJzIGZvciBtb3JlIGNvbW1lbnRzXG4gICAgfSlcbiAgICBsZXR0ZXJzID0gbGV0dGVycy5zbGljZSgxICsgMiArIHRhZ0xlbmd0aClcbiAgfVxuXG4gIC8vIHNpZ25hdHVyZVxuICBzZWN0aW9ucy5wdXNoKHtcbiAgICBuYW1lOiAnc2lnbmF0dXJlJyxcbiAgICBsZXR0ZXJzOiBsZXR0ZXJzLnNsaWNlKDAsIDEwNCksXG4gICAgdmFsdWU6IGhleC5lbmNvZGUoYmVjaDMyLmZyb21Xb3Jkc1Vuc2FmZShzaWdXb3JkcykpXG4gIH0pXG4gIGxldHRlcnMgPSBsZXR0ZXJzLnNsaWNlKDEwNClcblxuICAvLyBjaGVja3N1bVxuICBzZWN0aW9ucy5wdXNoKHtcbiAgICBuYW1lOiAnY2hlY2tzdW0nLFxuICAgIGxldHRlcnM6IGxldHRlcnNcbiAgfSlcblxuICBsZXQgcmVzdWx0ID0ge1xuICAgIHBheW1lbnRSZXF1ZXN0LFxuICAgIHNlY3Rpb25zLFxuXG4gICAgZ2V0IGV4cGlyeSgpIHtcbiAgICAgIGxldCBleHAgPSBzZWN0aW9ucy5maW5kKHMgPT4gcy5uYW1lID09PSAnZXhwaXJ5JylcbiAgICAgIGlmIChleHApIHJldHVybiBnZXRWYWx1ZSgndGltZXN0YW1wJykgKyBleHAudmFsdWVcbiAgICB9LFxuXG4gICAgZ2V0IHJvdXRlX2hpbnRzKCkge1xuICAgICAgcmV0dXJuIHNlY3Rpb25zLmZpbHRlcihzID0+IHMubmFtZSA9PT0gJ3JvdXRlX2hpbnQnKS5tYXAocyA9PiBzLnZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IG5hbWUgaW4gVEFHQ09ERVMpIHtcbiAgICBpZiAobmFtZSA9PT0gJ3JvdXRlX2hpbnQnKSB7XG4gICAgICAvLyByb3V0ZSBoaW50cyBjYW4gYmUgbXVsdGlwbGUsIHNvIHRoaXMgd29uJ3Qgd29yayBmb3IgdGhlbVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBuYW1lLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRWYWx1ZShuYW1lKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWUobmFtZSkge1xuICAgIGxldCBzZWN0aW9uID0gc2VjdGlvbnMuZmluZChzID0+IHMubmFtZSA9PT0gbmFtZSlcbiAgICByZXR1cm4gc2VjdGlvbiA/IHNlY3Rpb24udmFsdWUgOiB1bmRlZmluZWRcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlLFxuICBocnBUb01pbGxpc2F0XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsInZhciBuLGwsdSx0LGksbyxyLGYsZSxjPXt9LHM9W10sYT0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pLGg9QXJyYXkuaXNBcnJheTtmdW5jdGlvbiB2KG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIHAobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24geShsLHUsdCl7dmFyIGksbyxyLGY9e307Zm9yKHIgaW4gdSlcImtleVwiPT1yP2k9dVtyXTpcInJlZlwiPT1yP289dVtyXTpmW3JdPXVbcl07aWYoYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTp0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsJiZudWxsIT1sLmRlZmF1bHRQcm9wcylmb3IociBpbiBsLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW3JdJiYoZltyXT1sLmRlZmF1bHRQcm9wc1tyXSk7cmV0dXJuIGQobCxmLGksbyxudWxsKX1mdW5jdGlvbiBkKG4sdCxpLG8scil7dmFyIGY9e3R5cGU6bixwcm9wczp0LGtleTppLHJlZjpvLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PXI/Kyt1OnJ9O3JldHVybiBudWxsPT1yJiZudWxsIT1sLnZub2RlJiZsLnZub2RlKGYpLGZ9ZnVuY3Rpb24gXygpe3JldHVybntjdXJyZW50Om51bGx9fWZ1bmN0aW9uIGsobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gYihuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bH1mdW5jdGlvbiBnKG4sbCl7aWYobnVsbD09bClyZXR1cm4gbi5fXz9nKG4uX18sbi5fXy5fX2suaW5kZXhPZihuKSsxKTpudWxsO2Zvcih2YXIgdTtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSlyZXR1cm4gdS5fX2U7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbi50eXBlP2cobik6bnVsbH1mdW5jdGlvbiBtKG4pe3ZhciBsLHU7aWYobnVsbCE9KG49bi5fXykmJm51bGwhPW4uX19jKXtmb3Iobi5fX2U9bi5fX2MuYmFzZT1udWxsLGw9MDtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSl7bi5fX2U9bi5fX2MuYmFzZT11Ll9fZTticmVha31yZXR1cm4gbShuKX19ZnVuY3Rpb24gdyhuKXsoIW4uX19kJiYobi5fX2Q9ITApJiZpLnB1c2gobikmJiF4Ll9fcisrfHxvIT09bC5kZWJvdW5jZVJlbmRlcmluZykmJigobz1sLmRlYm91bmNlUmVuZGVyaW5nKXx8cikoeCl9ZnVuY3Rpb24geCgpe3ZhciBuLGwsdSx0LG8scixlLGMscztmb3IoaS5zb3J0KGYpO249aS5zaGlmdCgpOyluLl9fZCYmKGw9aS5sZW5ndGgsdD12b2lkIDAsbz12b2lkIDAscj12b2lkIDAsYz0oZT0odT1uKS5fX3YpLl9fZSwocz11Ll9fUCkmJih0PVtdLG89W10sKHI9dih7fSxlKSkuX192PWUuX192KzEsTChzLGUscix1Ll9fbix2b2lkIDAhPT1zLm93bmVyU1ZHRWxlbWVudCxudWxsIT1lLl9faD9bY106bnVsbCx0LG51bGw9PWM/ZyhlKTpjLGUuX19oLG8pLE0odCxlLG8pLGUuX19lIT1jJiZtKGUpKSxpLmxlbmd0aD5sJiZpLnNvcnQoZikpO3guX19yPTB9ZnVuY3Rpb24gUChuLGwsdSx0LGksbyxyLGYsZSxhLHYpe3ZhciBwLHksXyxiLGcsbSx3LHgsUCxTLEg9MCxJPXQmJnQuX19rfHxzLFQ9SS5sZW5ndGgsaj1ULHo9bC5sZW5ndGg7Zm9yKHUuX19rPVtdLHA9MDtwPHo7cCsrKW51bGwhPShiPXUuX19rW3BdPW51bGw9PShiPWxbcF0pfHxcImJvb2xlYW5cIj09dHlwZW9mIGJ8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGI/bnVsbDpcInN0cmluZ1wiPT10eXBlb2YgYnx8XCJudW1iZXJcIj09dHlwZW9mIGJ8fFwiYmlnaW50XCI9PXR5cGVvZiBiP2QobnVsbCxiLG51bGwsbnVsbCxiKTpoKGIpP2Qoayx7Y2hpbGRyZW46Yn0sbnVsbCxudWxsLG51bGwpOmIuX19iPjA/ZChiLnR5cGUsYi5wcm9wcyxiLmtleSxiLnJlZj9iLnJlZjpudWxsLGIuX192KTpiKSYmKGIuX189dSxiLl9fYj11Ll9fYisxLC0xPT09KHg9QShiLEksdz1wK0gsaikpP189YzooXz1JW3hdfHxjLElbeF09dm9pZCAwLGotLSksTChuLGIsXyxpLG8scixmLGUsYSx2KSxnPWIuX19lLCh5PWIucmVmKSYmXy5yZWYhPXkmJihfLnJlZiYmTyhfLnJlZixudWxsLGIpLHYucHVzaCh5LGIuX19jfHxnLGIpKSxudWxsIT1nJiYobnVsbD09bSYmKG09ZyksUz0hKFA9Xz09PWN8fG51bGw9PT1fLl9fdikmJng9PT13LFA/LTE9PXgmJkgtLTp4IT09dyYmKHg9PT13KzE/KEgrKyxTPSEwKTp4Pnc/aj56LXc/KEgrPXgtdyxTPSEwKTpILS06SD14PHcmJng9PXctMT94LXc6MCksdz1wK0gsUz1TfHx4PT1wJiYhUCxcImZ1bmN0aW9uXCIhPXR5cGVvZiBiLnR5cGV8fHg9PT13JiZfLl9fayE9PWIuX19rP1wiZnVuY3Rpb25cIj09dHlwZW9mIGIudHlwZXx8Uz92b2lkIDAhPT1iLl9fZD8oZT1iLl9fZCxiLl9fZD12b2lkIDApOmU9Zy5uZXh0U2libGluZzplPSQobixnLGUpOmU9QyhiLGUsbiksXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9ZSkpKTtmb3IodS5fX2U9bSxwPVQ7cC0tOyludWxsIT1JW3BdJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiZudWxsIT1JW3BdLl9fZSYmSVtwXS5fX2U9PXUuX19kJiYodS5fX2Q9SVtwXS5fX2UubmV4dFNpYmxpbmcpLHEoSVtwXSxJW3BdKSl9ZnVuY3Rpb24gQyhuLGwsdSl7Zm9yKHZhciB0LGk9bi5fX2ssbz0wO2kmJm88aS5sZW5ndGg7bysrKSh0PWlbb10pJiYodC5fXz1uLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgdC50eXBlP0ModCxsLHUpOiQodSx0Ll9fZSxsKSk7cmV0dXJuIGx9ZnVuY3Rpb24gUyhuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KGgobik/bi5zb21lKGZ1bmN0aW9uKG4pe1MobixsKX0pOmwucHVzaChuKSksbH1mdW5jdGlvbiAkKG4sbCx1KXtyZXR1cm4gbnVsbD09dXx8dS5wYXJlbnROb2RlIT09bj9uLmluc2VydEJlZm9yZShsLG51bGwpOmw9PXUmJm51bGwhPWwucGFyZW50Tm9kZXx8bi5pbnNlcnRCZWZvcmUobCx1KSxsLm5leHRTaWJsaW5nfWZ1bmN0aW9uIEEobixsLHUsdCl7dmFyIGk9bi5rZXksbz1uLnR5cGUscj11LTEsZj11KzEsZT1sW3VdO2lmKG51bGw9PT1lfHxlJiZpPT1lLmtleSYmbz09PWUudHlwZSlyZXR1cm4gdTtpZih0PihudWxsIT1lPzE6MCkpZm9yKDtyPj0wfHxmPGwubGVuZ3RoOyl7aWYocj49MCl7aWYoKGU9bFtyXSkmJmk9PWUua2V5JiZvPT09ZS50eXBlKXJldHVybiByO3ItLX1pZihmPGwubGVuZ3RoKXtpZigoZT1sW2ZdKSYmaT09ZS5rZXkmJm89PT1lLnR5cGUpcmV0dXJuIGY7ZisrfX1yZXR1cm4tMX1mdW5jdGlvbiBIKG4sbCx1LHQsaSl7dmFyIG87Zm9yKG8gaW4gdSlcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8byBpbiBsfHxUKG4sbyxudWxsLHVbb10sdCk7Zm9yKG8gaW4gbClpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW29dfHxcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8XCJ2YWx1ZVwiPT09b3x8XCJjaGVja2VkXCI9PT1vfHx1W29dPT09bFtvXXx8VChuLG8sbFtvXSx1W29dLHQpfWZ1bmN0aW9uIEkobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsbnVsbD09dT9cIlwiOnUpOm5bbF09bnVsbD09dT9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiB1fHxhLnRlc3QobCk/dTp1K1wicHhcIn1mdW5jdGlvbiBUKG4sbCx1LHQsaSl7dmFyIG87bjppZihcInN0eWxlXCI9PT1sKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB1KW4uc3R5bGUuY3NzVGV4dD11O2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuLnN0eWxlLmNzc1RleHQ9dD1cIlwiKSx0KWZvcihsIGluIHQpdSYmbCBpbiB1fHxJKG4uc3R5bGUsbCxcIlwiKTtpZih1KWZvcihsIGluIHUpdCYmdVtsXT09PXRbbF18fEkobi5zdHlsZSxsLHVbbF0pfWVsc2UgaWYoXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0pbz1sIT09KGw9bC5yZXBsYWNlKC9DYXB0dXJlJC8sXCJcIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT90fHxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP3o6aixvKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxvP3o6aixvKTtlbHNlIGlmKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwpe2lmKGkpbD1sLnJlcGxhY2UoL3hsaW5rKEh8OmgpLyxcImhcIikucmVwbGFjZSgvc05hbWUkLyxcInNcIik7ZWxzZSBpZihcIndpZHRoXCIhPT1sJiZcImhlaWdodFwiIT09bCYmXCJocmVmXCIhPT1sJiZcImxpc3RcIiE9PWwmJlwiZm9ybVwiIT09bCYmXCJ0YWJJbmRleFwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmXCJyb3dTcGFuXCIhPT1sJiZcImNvbFNwYW5cIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbD09dXx8ITE9PT11JiZcIi1cIiE9PWxbNF0/bi5yZW1vdmVBdHRyaWJ1dGUobCk6bi5zZXRBdHRyaWJ1dGUobCx1KSl9fWZ1bmN0aW9uIGoobil7cmV0dXJuIHRoaXMubFtuLnR5cGUrITFdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1mdW5jdGlvbiB6KG4pe3JldHVybiB0aGlzLmxbbi50eXBlKyEwXShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24gTChuLHUsdCxpLG8scixmLGUsYyxzKXt2YXIgYSxwLHksZCxfLGcsbSx3LHgsQyxTLCQsQSxILEksVD11LnR5cGU7aWYodm9pZCAwIT09dS5jb25zdHJ1Y3RvcilyZXR1cm4gbnVsbDtudWxsIT10Ll9faCYmKGM9dC5fX2gsZT11Ll9fZT10Ll9fZSx1Ll9faD1udWxsLHI9W2VdKSwoYT1sLl9fYikmJmEodSk7dHJ5e246aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgVCl7aWYodz11LnByb3BzLHg9KGE9VC5jb250ZXh0VHlwZSkmJmlbYS5fX2NdLEM9YT94P3gucHJvcHMudmFsdWU6YS5fXzppLHQuX19jP209KHA9dS5fX2M9dC5fX2MpLl9fPXAuX19FOihcInByb3RvdHlwZVwiaW4gVCYmVC5wcm90b3R5cGUucmVuZGVyP3UuX19jPXA9bmV3IFQodyxDKToodS5fX2M9cD1uZXcgYih3LEMpLHAuY29uc3RydWN0b3I9VCxwLnJlbmRlcj1CKSx4JiZ4LnN1YihwKSxwLnByb3BzPXcscC5zdGF0ZXx8KHAuc3RhdGU9e30pLHAuY29udGV4dD1DLHAuX19uPWkseT1wLl9fZD0hMCxwLl9faD1bXSxwLl9zYj1bXSksbnVsbD09cC5fX3MmJihwLl9fcz1wLnN0YXRlKSxudWxsIT1ULmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKHAuX19zPT1wLnN0YXRlJiYocC5fX3M9dih7fSxwLl9fcykpLHYocC5fX3MsVC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModyxwLl9fcykpKSxkPXAucHJvcHMsXz1wLnN0YXRlLHAuX192PXUseSludWxsPT1ULmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9cC5jb21wb25lbnRXaWxsTW91bnQmJnAuY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9cC5jb21wb25lbnREaWRNb3VudCYmcC5fX2gucHVzaChwLmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PVQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZ3IT09ZCYmbnVsbCE9cC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZwLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHModyxDKSwhcC5fX2UmJihudWxsIT1wLnNob3VsZENvbXBvbmVudFVwZGF0ZSYmITE9PT1wLnNob3VsZENvbXBvbmVudFVwZGF0ZSh3LHAuX19zLEMpfHx1Ll9fdj09PXQuX192KSl7Zm9yKHUuX192IT09dC5fX3YmJihwLnByb3BzPXcscC5zdGF0ZT1wLl9fcyxwLl9fZD0hMSksdS5fX2U9dC5fX2UsdS5fX2s9dC5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLFM9MDtTPHAuX3NiLmxlbmd0aDtTKyspcC5fX2gucHVzaChwLl9zYltTXSk7cC5fc2I9W10scC5fX2gubGVuZ3RoJiZmLnB1c2gocCk7YnJlYWsgbn1udWxsIT1wLmNvbXBvbmVudFdpbGxVcGRhdGUmJnAuY29tcG9uZW50V2lsbFVwZGF0ZSh3LHAuX19zLEMpLG51bGwhPXAuY29tcG9uZW50RGlkVXBkYXRlJiZwLl9faC5wdXNoKGZ1bmN0aW9uKCl7cC5jb21wb25lbnREaWRVcGRhdGUoZCxfLGcpfSl9aWYocC5jb250ZXh0PUMscC5wcm9wcz13LHAuX19QPW4scC5fX2U9ITEsJD1sLl9fcixBPTAsXCJwcm90b3R5cGVcImluIFQmJlQucHJvdG90eXBlLnJlbmRlcil7Zm9yKHAuc3RhdGU9cC5fX3MscC5fX2Q9ITEsJCYmJCh1KSxhPXAucmVuZGVyKHAucHJvcHMscC5zdGF0ZSxwLmNvbnRleHQpLEg9MDtIPHAuX3NiLmxlbmd0aDtIKyspcC5fX2gucHVzaChwLl9zYltIXSk7cC5fc2I9W119ZWxzZSBkb3twLl9fZD0hMSwkJiYkKHUpLGE9cC5yZW5kZXIocC5wcm9wcyxwLnN0YXRlLHAuY29udGV4dCkscC5zdGF0ZT1wLl9fc313aGlsZShwLl9fZCYmKytBPDI1KTtwLnN0YXRlPXAuX19zLG51bGwhPXAuZ2V0Q2hpbGRDb250ZXh0JiYoaT12KHYoe30saSkscC5nZXRDaGlsZENvbnRleHQoKSkpLHl8fG51bGw9PXAuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChnPXAuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoZCxfKSksUChuLGgoST1udWxsIT1hJiZhLnR5cGU9PT1rJiZudWxsPT1hLmtleT9hLnByb3BzLmNoaWxkcmVuOmEpP0k6W0ldLHUsdCxpLG8scixmLGUsYyxzKSxwLmJhc2U9dS5fX2UsdS5fX2g9bnVsbCxwLl9faC5sZW5ndGgmJmYucHVzaChwKSxtJiYocC5fX0U9cC5fXz1udWxsKX1lbHNlIG51bGw9PXImJnUuX192PT09dC5fX3Y/KHUuX19rPXQuX19rLHUuX19lPXQuX19lKTp1Ll9fZT1OKHQuX19lLHUsdCxpLG8scixmLGMscyk7KGE9bC5kaWZmZWQpJiZhKHUpfWNhdGNoKG4pe3UuX192PW51bGwsKGN8fG51bGwhPXIpJiYodS5fX2U9ZSx1Ll9faD0hIWMscltyLmluZGV4T2YoZSldPW51bGwpLGwuX19lKG4sdSx0KX19ZnVuY3Rpb24gTShuLHUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspTyh0W2ldLHRbKytpXSx0WysraV0pO2wuX19jJiZsLl9fYyh1LG4pLG4uc29tZShmdW5jdGlvbih1KXt0cnl7bj11Ll9faCx1Ll9faD1bXSxuLnNvbWUoZnVuY3Rpb24obil7bi5jYWxsKHUpfSl9Y2F0Y2gobil7bC5fX2Uobix1Ll9fdil9fSl9ZnVuY3Rpb24gTihsLHUsdCxpLG8scixmLGUscyl7dmFyIGEsdix5LGQ9dC5wcm9wcyxfPXUucHJvcHMsaz11LnR5cGUsYj0wO2lmKFwic3ZnXCI9PT1rJiYobz0hMCksbnVsbCE9cilmb3IoO2I8ci5sZW5ndGg7YisrKWlmKChhPXJbYl0pJiZcInNldEF0dHJpYnV0ZVwiaW4gYT09ISFrJiYoaz9hLmxvY2FsTmFtZT09PWs6Mz09PWEubm9kZVR5cGUpKXtsPWEscltiXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1rKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShfKTtsPW8/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixrKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGssXy5pcyYmXykscj1udWxsLGU9ITF9aWYobnVsbD09PWspZD09PV98fGUmJmwuZGF0YT09PV98fChsLmRhdGE9Xyk7ZWxzZXtpZihyPXImJm4uY2FsbChsLmNoaWxkTm9kZXMpLHY9KGQ9dC5wcm9wc3x8YykuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwseT1fLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFlKXtpZihudWxsIT1yKWZvcihkPXt9LGI9MDtiPGwuYXR0cmlidXRlcy5sZW5ndGg7YisrKWRbbC5hdHRyaWJ1dGVzW2JdLm5hbWVdPWwuYXR0cmlidXRlc1tiXS52YWx1ZTsoeXx8dikmJih5JiYodiYmeS5fX2h0bWw9PXYuX19odG1sfHx5Ll9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPXkmJnkuX19odG1sfHxcIlwiKSl9aWYoSChsLF8sZCxvLGUpLHkpdS5fX2s9W107ZWxzZSBpZihQKGwsaChiPXUucHJvcHMuY2hpbGRyZW4pP2I6W2JdLHUsdCxpLG8mJlwiZm9yZWlnbk9iamVjdFwiIT09ayxyLGYscj9yWzBdOnQuX19rJiZnKHQsMCksZSxzKSxudWxsIT1yKWZvcihiPXIubGVuZ3RoO2ItLTspbnVsbCE9cltiXSYmcChyW2JdKTtlfHwoXCJ2YWx1ZVwiaW4gXyYmdm9pZCAwIT09KGI9Xy52YWx1ZSkmJihiIT09bC52YWx1ZXx8XCJwcm9ncmVzc1wiPT09ayYmIWJ8fFwib3B0aW9uXCI9PT1rJiZiIT09ZC52YWx1ZSkmJlQobCxcInZhbHVlXCIsYixkLnZhbHVlLCExKSxcImNoZWNrZWRcImluIF8mJnZvaWQgMCE9PShiPV8uY2hlY2tlZCkmJmIhPT1sLmNoZWNrZWQmJlQobCxcImNoZWNrZWRcIixiLGQuY2hlY2tlZCwhMSkpfXJldHVybiBsfWZ1bmN0aW9uIE8obix1LHQpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odSk6bi5jdXJyZW50PXV9Y2F0Y2gobil7bC5fX2Uobix0KX19ZnVuY3Rpb24gcShuLHUsdCl7dmFyIGksbztpZihsLnVubW91bnQmJmwudW5tb3VudChuKSwoaT1uLnJlZikmJihpLmN1cnJlbnQmJmkuY3VycmVudCE9PW4uX19lfHxPKGksbnVsbCx1KSksbnVsbCE9KGk9bi5fX2MpKXtpZihpLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtpLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobil7bC5fX2Uobix1KX1pLmJhc2U9aS5fX1A9bnVsbCxuLl9fYz12b2lkIDB9aWYoaT1uLl9faylmb3Iobz0wO288aS5sZW5ndGg7bysrKWlbb10mJnEoaVtvXSx1LHR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4udHlwZSk7dHx8bnVsbD09bi5fX2V8fHAobi5fX2UpLG4uX189bi5fX2U9bi5fX2Q9dm9pZCAwfWZ1bmN0aW9uIEIobixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gRCh1LHQsaSl7dmFyIG8scixmLGU7bC5fXyYmbC5fXyh1LHQpLHI9KG89XCJmdW5jdGlvblwiPT10eXBlb2YgaSk/bnVsbDppJiZpLl9fa3x8dC5fX2ssZj1bXSxlPVtdLEwodCx1PSghbyYmaXx8dCkuX19rPXkoayxudWxsLFt1XSkscnx8YyxjLHZvaWQgMCE9PXQub3duZXJTVkdFbGVtZW50LCFvJiZpP1tpXTpyP251bGw6dC5maXJzdENoaWxkP24uY2FsbCh0LmNoaWxkTm9kZXMpOm51bGwsZiwhbyYmaT9pOnI/ci5fX2U6dC5maXJzdENoaWxkLG8sZSksTShmLHUsZSl9ZnVuY3Rpb24gRShuLGwpe0QobixsLEUpfWZ1bmN0aW9uIEYobCx1LHQpe3ZhciBpLG8scixmLGU9dih7fSxsLnByb3BzKTtmb3IociBpbiBsLnR5cGUmJmwudHlwZS5kZWZhdWx0UHJvcHMmJihmPWwudHlwZS5kZWZhdWx0UHJvcHMpLHUpXCJrZXlcIj09cj9pPXVbcl06XCJyZWZcIj09cj9vPXVbcl06ZVtyXT12b2lkIDA9PT11W3JdJiZ2b2lkIDAhPT1mP2Zbcl06dVtyXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4yJiYoZS5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTp0KSxkKGwudHlwZSxlLGl8fGwua2V5LG98fGwucmVmLG51bGwpfWZ1bmN0aW9uIEcobixsKXt2YXIgdT17X19jOmw9XCJfX2NDXCIrZSsrLF9fOm4sQ29uc3VtZXI6ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5jaGlsZHJlbihsKX0sUHJvdmlkZXI6ZnVuY3Rpb24obil7dmFyIHUsdDtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHR8fCh1PVtdLCh0PXt9KVtsXT10aGlzLHRoaXMuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHR9LHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMucHJvcHMudmFsdWUhPT1uLnZhbHVlJiZ1LnNvbWUoZnVuY3Rpb24obil7bi5fX2U9ITAsdyhuKX0pfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49cy5zbGljZSxsPXtfX2U6ZnVuY3Rpb24obixsLHUsdCl7Zm9yKHZhciBpLG8scjtsPWwuX187KWlmKChpPWwuX19jKSYmIWkuX18pdHJ5e2lmKChvPWkuY29uc3RydWN0b3IpJiZudWxsIT1vLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKGkuc2V0U3RhdGUoby5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IobikpLHI9aS5fX2QpLG51bGwhPWkuY29tcG9uZW50RGlkQ2F0Y2gmJihpLmNvbXBvbmVudERpZENhdGNoKG4sdHx8e30pLHI9aS5fX2QpLHIpcmV0dXJuIGkuX19FPWl9Y2F0Y2gobCl7bj1sfXRocm93IG59fSx1PTAsdD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmdm9pZCAwPT09bi5jb25zdHJ1Y3Rvcn0sYi5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9dih7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKHYoe30sdSksdGhpcy5wcm9wcykpLG4mJnYodSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX3NiLnB1c2gobCksdyh0aGlzKSl9LGIucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSx3KHRoaXMpKX0sYi5wcm90b3R5cGUucmVuZGVyPWssaT1bXSxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LGY9ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0seC5fX3I9MCxlPTA7ZXhwb3J0e2IgYXMgQ29tcG9uZW50LGsgYXMgRnJhZ21lbnQsRiBhcyBjbG9uZUVsZW1lbnQsRyBhcyBjcmVhdGVDb250ZXh0LHkgYXMgY3JlYXRlRWxlbWVudCxfIGFzIGNyZWF0ZVJlZix5IGFzIGgsRSBhcyBoeWRyYXRlLHQgYXMgaXNWYWxpZEVsZW1lbnQsbCBhcyBvcHRpb25zLEQgYXMgcmVuZGVyLFMgYXMgdG9DaGlsZEFycmF5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWFjdC5tb2R1bGUuanMubWFwXG4iLCIvKiEgbm9ibGUtc2VjcDI1NmsxIC0gTUlUIExpY2Vuc2UgKGMpIDIwMTkgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgKiBhcyBub2RlQ3J5cHRvIGZyb20gJ2NyeXB0byc7XG5jb25zdCBfMG4gPSBCaWdJbnQoMCk7XG5jb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSBCaWdJbnQoMik7XG5jb25zdCBfM24gPSBCaWdJbnQoMyk7XG5jb25zdCBfOG4gPSBCaWdJbnQoOCk7XG5jb25zdCBDVVJWRSA9IE9iamVjdC5mcmVlemUoe1xuICAgIGE6IF8wbixcbiAgICBiOiBCaWdJbnQoNyksXG4gICAgUDogQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlZmZmZmZjMmYnKSxcbiAgICBuOiBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MScpLFxuICAgIGg6IF8xbixcbiAgICBHeDogQmlnSW50KCc1NTA2NjI2MzAyMjI3NzM0MzY2OTU3ODcxODg5NTE2ODUzNDMyNjI1MDYwMzQ1Mzc3NzU5NDE3NTUwMDE4NzM2MDM4OTExNjcyOTI0MCcpLFxuICAgIEd5OiBCaWdJbnQoJzMyNjcwNTEwMDIwNzU4ODE2OTc4MDgzMDg1MTMwNTA3MDQzMTg0NDcxMjczMzgwNjU5MjQzMjc1OTM4OTA0MzM1NzU3MzM3NDgyNDI0JyksXG4gICAgYmV0YTogQmlnSW50KCcweDdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnKSxcbn0pO1xuY29uc3QgZGl2TmVhcmVzdCA9IChhLCBiKSA9PiAoYSArIGIgLyBfMm4pIC8gYjtcbmNvbnN0IGVuZG8gPSB7XG4gICAgYmV0YTogQmlnSW50KCcweDdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnKSxcbiAgICBzcGxpdFNjYWxhcihrKSB7XG4gICAgICAgIGNvbnN0IHsgbiB9ID0gQ1VSVkU7XG4gICAgICAgIGNvbnN0IGExID0gQmlnSW50KCcweDMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1Jyk7XG4gICAgICAgIGNvbnN0IGIxID0gLV8xbiAqIEJpZ0ludCgnMHhlNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMycpO1xuICAgICAgICBjb25zdCBhMiA9IEJpZ0ludCgnMHgxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnKTtcbiAgICAgICAgY29uc3QgYjIgPSBhMTtcbiAgICAgICAgY29uc3QgUE9XXzJfMTI4ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpO1xuICAgICAgICBjb25zdCBjMSA9IGRpdk5lYXJlc3QoYjIgKiBrLCBuKTtcbiAgICAgICAgY29uc3QgYzIgPSBkaXZOZWFyZXN0KC1iMSAqIGssIG4pO1xuICAgICAgICBsZXQgazEgPSBtb2QoayAtIGMxICogYTEgLSBjMiAqIGEyLCBuKTtcbiAgICAgICAgbGV0IGsyID0gbW9kKC1jMSAqIGIxIC0gYzIgKiBiMiwgbik7XG4gICAgICAgIGNvbnN0IGsxbmVnID0gazEgPiBQT1dfMl8xMjg7XG4gICAgICAgIGNvbnN0IGsybmVnID0gazIgPiBQT1dfMl8xMjg7XG4gICAgICAgIGlmIChrMW5lZylcbiAgICAgICAgICAgIGsxID0gbiAtIGsxO1xuICAgICAgICBpZiAoazJuZWcpXG4gICAgICAgICAgICBrMiA9IG4gLSBrMjtcbiAgICAgICAgaWYgKGsxID4gUE9XXzJfMTI4IHx8IGsyID4gUE9XXzJfMTI4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0U2NhbGFyRW5kbzogRW5kb21vcnBoaXNtIGZhaWxlZCwgaz0nICsgayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgazFuZWcsIGsxLCBrMm5lZywgazIgfTtcbiAgICB9LFxufTtcbmNvbnN0IGZpZWxkTGVuID0gMzI7XG5jb25zdCBncm91cExlbiA9IDMyO1xuY29uc3QgaGFzaExlbiA9IDMyO1xuY29uc3QgY29tcHJlc3NlZExlbiA9IGZpZWxkTGVuICsgMTtcbmNvbnN0IHVuY29tcHJlc3NlZExlbiA9IDIgKiBmaWVsZExlbiArIDE7XG5leHBvcnQgeyBDVVJWRSB9O1xuZnVuY3Rpb24gd2VpZXJzdHJhc3MoeCkge1xuICAgIGNvbnN0IHsgYSwgYiB9ID0gQ1VSVkU7XG4gICAgY29uc3QgeDIgPSBtb2QoeCAqIHgpO1xuICAgIGNvbnN0IHgzID0gbW9kKHgyICogeCk7XG4gICAgcmV0dXJuIG1vZCh4MyArIGEgKiB4ICsgYik7XG59XG5jb25zdCBVU0VfRU5ET01PUlBISVNNID0gQ1VSVkUuYSA9PT0gXzBuO1xuY2xhc3MgU2hhRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRKYWNQb2ludChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgSmFjb2JpYW5Qb2ludCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0phY29iaWFuUG9pbnQgZXhwZWN0ZWQnKTtcbn1cbmNsYXNzIEphY29iaWFuUG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHopIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy56ID0gejtcbiAgICB9XG4gICAgc3RhdGljIGZyb21BZmZpbmUocCkge1xuICAgICAgICBpZiAoIShwIGluc3RhbmNlb2YgUG9pbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKYWNvYmlhblBvaW50I2Zyb21BZmZpbmU6IGV4cGVjdGVkIFBvaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAuZXF1YWxzKFBvaW50LlpFUk8pKVxuICAgICAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQuWkVSTztcbiAgICAgICAgcmV0dXJuIG5ldyBKYWNvYmlhblBvaW50KHAueCwgcC55LCBfMW4pO1xuICAgIH1cbiAgICBzdGF0aWMgdG9BZmZpbmVCYXRjaChwb2ludHMpIHtcbiAgICAgICAgY29uc3QgdG9JbnYgPSBpbnZlcnRCYXRjaChwb2ludHMubWFwKChwKSA9PiBwLnopKTtcbiAgICAgICAgcmV0dXJuIHBvaW50cy5tYXAoKHAsIGkpID0+IHAudG9BZmZpbmUodG9JbnZbaV0pKTtcbiAgICB9XG4gICAgc3RhdGljIG5vcm1hbGl6ZVoocG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LnRvQWZmaW5lQmF0Y2gocG9pbnRzKS5tYXAoSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKTtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGFzc2VydEphY1BvaW50KG90aGVyKTtcbiAgICAgICAgY29uc3QgeyB4OiBYMSwgeTogWTEsIHo6IFoxIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHg6IFgyLCB5OiBZMiwgejogWjIgfSA9IG90aGVyO1xuICAgICAgICBjb25zdCBaMVoxID0gbW9kKFoxICogWjEpO1xuICAgICAgICBjb25zdCBaMloyID0gbW9kKFoyICogWjIpO1xuICAgICAgICBjb25zdCBVMSA9IG1vZChYMSAqIFoyWjIpO1xuICAgICAgICBjb25zdCBVMiA9IG1vZChYMiAqIFoxWjEpO1xuICAgICAgICBjb25zdCBTMSA9IG1vZChtb2QoWTEgKiBaMikgKiBaMloyKTtcbiAgICAgICAgY29uc3QgUzIgPSBtb2QobW9kKFkyICogWjEpICogWjFaMSk7XG4gICAgICAgIHJldHVybiBVMSA9PT0gVTIgJiYgUzEgPT09IFMyO1xuICAgIH1cbiAgICBuZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSmFjb2JpYW5Qb2ludCh0aGlzLngsIG1vZCgtdGhpcy55KSwgdGhpcy56KTtcbiAgICB9XG4gICAgZG91YmxlKCkge1xuICAgICAgICBjb25zdCB7IHg6IFgxLCB5OiBZMSwgejogWjEgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IEEgPSBtb2QoWDEgKiBYMSk7XG4gICAgICAgIGNvbnN0IEIgPSBtb2QoWTEgKiBZMSk7XG4gICAgICAgIGNvbnN0IEMgPSBtb2QoQiAqIEIpO1xuICAgICAgICBjb25zdCB4MWIgPSBYMSArIEI7XG4gICAgICAgIGNvbnN0IEQgPSBtb2QoXzJuICogKG1vZCh4MWIgKiB4MWIpIC0gQSAtIEMpKTtcbiAgICAgICAgY29uc3QgRSA9IG1vZChfM24gKiBBKTtcbiAgICAgICAgY29uc3QgRiA9IG1vZChFICogRSk7XG4gICAgICAgIGNvbnN0IFgzID0gbW9kKEYgLSBfMm4gKiBEKTtcbiAgICAgICAgY29uc3QgWTMgPSBtb2QoRSAqIChEIC0gWDMpIC0gXzhuICogQyk7XG4gICAgICAgIGNvbnN0IFozID0gbW9kKF8ybiAqIFkxICogWjEpO1xuICAgICAgICByZXR1cm4gbmV3IEphY29iaWFuUG9pbnQoWDMsIFkzLCBaMyk7XG4gICAgfVxuICAgIGFkZChvdGhlcikge1xuICAgICAgICBhc3NlcnRKYWNQb2ludChvdGhlcik7XG4gICAgICAgIGNvbnN0IHsgeDogWDEsIHk6IFkxLCB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4OiBYMiwgeTogWTIsIHo6IFoyIH0gPSBvdGhlcjtcbiAgICAgICAgaWYgKFgyID09PSBfMG4gfHwgWTIgPT09IF8wbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBpZiAoWDEgPT09IF8wbiB8fCBZMSA9PT0gXzBuKVxuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICBjb25zdCBaMVoxID0gbW9kKFoxICogWjEpO1xuICAgICAgICBjb25zdCBaMloyID0gbW9kKFoyICogWjIpO1xuICAgICAgICBjb25zdCBVMSA9IG1vZChYMSAqIFoyWjIpO1xuICAgICAgICBjb25zdCBVMiA9IG1vZChYMiAqIFoxWjEpO1xuICAgICAgICBjb25zdCBTMSA9IG1vZChtb2QoWTEgKiBaMikgKiBaMloyKTtcbiAgICAgICAgY29uc3QgUzIgPSBtb2QobW9kKFkyICogWjEpICogWjFaMSk7XG4gICAgICAgIGNvbnN0IEggPSBtb2QoVTIgLSBVMSk7XG4gICAgICAgIGNvbnN0IHIgPSBtb2QoUzIgLSBTMSk7XG4gICAgICAgIGlmIChIID09PSBfMG4pIHtcbiAgICAgICAgICAgIGlmIChyID09PSBfMG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb3VibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LlpFUk87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgSEggPSBtb2QoSCAqIEgpO1xuICAgICAgICBjb25zdCBISEggPSBtb2QoSCAqIEhIKTtcbiAgICAgICAgY29uc3QgViA9IG1vZChVMSAqIEhIKTtcbiAgICAgICAgY29uc3QgWDMgPSBtb2QociAqIHIgLSBISEggLSBfMm4gKiBWKTtcbiAgICAgICAgY29uc3QgWTMgPSBtb2QociAqIChWIC0gWDMpIC0gUzEgKiBISEgpO1xuICAgICAgICBjb25zdCBaMyA9IG1vZChaMSAqIFoyICogSCk7XG4gICAgICAgIHJldHVybiBuZXcgSmFjb2JpYW5Qb2ludChYMywgWTMsIFozKTtcbiAgICB9XG4gICAgc3VidHJhY3Qob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG90aGVyLm5lZ2F0ZSgpKTtcbiAgICB9XG4gICAgbXVsdGlwbHlVbnNhZmUoc2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IFAwID0gSmFjb2JpYW5Qb2ludC5aRVJPO1xuICAgICAgICBpZiAodHlwZW9mIHNjYWxhciA9PT0gJ2JpZ2ludCcgJiYgc2NhbGFyID09PSBfMG4pXG4gICAgICAgICAgICByZXR1cm4gUDA7XG4gICAgICAgIGxldCBuID0gbm9ybWFsaXplU2NhbGFyKHNjYWxhcik7XG4gICAgICAgIGlmIChuID09PSBfMW4pXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKCFVU0VfRU5ET01PUlBISVNNKSB7XG4gICAgICAgICAgICBsZXQgcCA9IFAwO1xuICAgICAgICAgICAgbGV0IGQgPSB0aGlzO1xuICAgICAgICAgICAgd2hpbGUgKG4gPiBfMG4pIHtcbiAgICAgICAgICAgICAgICBpZiAobiAmIF8xbilcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAuYWRkKGQpO1xuICAgICAgICAgICAgICAgIGQgPSBkLmRvdWJsZSgpO1xuICAgICAgICAgICAgICAgIG4gPj49IF8xbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH0gPSBlbmRvLnNwbGl0U2NhbGFyKG4pO1xuICAgICAgICBsZXQgazFwID0gUDA7XG4gICAgICAgIGxldCBrMnAgPSBQMDtcbiAgICAgICAgbGV0IGQgPSB0aGlzO1xuICAgICAgICB3aGlsZSAoazEgPiBfMG4gfHwgazIgPiBfMG4pIHtcbiAgICAgICAgICAgIGlmIChrMSAmIF8xbilcbiAgICAgICAgICAgICAgICBrMXAgPSBrMXAuYWRkKGQpO1xuICAgICAgICAgICAgaWYgKGsyICYgXzFuKVxuICAgICAgICAgICAgICAgIGsycCA9IGsycC5hZGQoZCk7XG4gICAgICAgICAgICBkID0gZC5kb3VibGUoKTtcbiAgICAgICAgICAgIGsxID4+PSBfMW47XG4gICAgICAgICAgICBrMiA+Pj0gXzFuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrMW5lZylcbiAgICAgICAgICAgIGsxcCA9IGsxcC5uZWdhdGUoKTtcbiAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgazJwID0gazJwLm5lZ2F0ZSgpO1xuICAgICAgICBrMnAgPSBuZXcgSmFjb2JpYW5Qb2ludChtb2QoazJwLnggKiBlbmRvLmJldGEpLCBrMnAueSwgazJwLnopO1xuICAgICAgICByZXR1cm4gazFwLmFkZChrMnApO1xuICAgIH1cbiAgICBwcmVjb21wdXRlV2luZG93KFcpIHtcbiAgICAgICAgY29uc3Qgd2luZG93cyA9IFVTRV9FTkRPTU9SUEhJU00gPyAxMjggLyBXICsgMSA6IDI1NiAvIFcgKyAxO1xuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICAgICAgbGV0IHAgPSB0aGlzO1xuICAgICAgICBsZXQgYmFzZSA9IHA7XG4gICAgICAgIGZvciAobGV0IHdpbmRvdyA9IDA7IHdpbmRvdyA8IHdpbmRvd3M7IHdpbmRvdysrKSB7XG4gICAgICAgICAgICBiYXNlID0gcDtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKGJhc2UpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAyICoqIChXIC0gMSk7IGkrKykge1xuICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLmFkZChwKTtcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgPSBiYXNlLmRvdWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuICAgIHdOQUYobiwgYWZmaW5lUG9pbnQpIHtcbiAgICAgICAgaWYgKCFhZmZpbmVQb2ludCAmJiB0aGlzLmVxdWFscyhKYWNvYmlhblBvaW50LkJBU0UpKVxuICAgICAgICAgICAgYWZmaW5lUG9pbnQgPSBQb2ludC5CQVNFO1xuICAgICAgICBjb25zdCBXID0gKGFmZmluZVBvaW50ICYmIGFmZmluZVBvaW50Ll9XSU5ET1dfU0laRSkgfHwgMTtcbiAgICAgICAgaWYgKDI1NiAlIFcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQjd05BRjogSW52YWxpZCBwcmVjb21wdXRhdGlvbiB3aW5kb3csIG11c3QgYmUgcG93ZXIgb2YgMicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcmVjb21wdXRlcyA9IGFmZmluZVBvaW50ICYmIHBvaW50UHJlY29tcHV0ZXMuZ2V0KGFmZmluZVBvaW50KTtcbiAgICAgICAgaWYgKCFwcmVjb21wdXRlcykge1xuICAgICAgICAgICAgcHJlY29tcHV0ZXMgPSB0aGlzLnByZWNvbXB1dGVXaW5kb3coVyk7XG4gICAgICAgICAgICBpZiAoYWZmaW5lUG9pbnQgJiYgVyAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHByZWNvbXB1dGVzID0gSmFjb2JpYW5Qb2ludC5ub3JtYWxpemVaKHByZWNvbXB1dGVzKTtcbiAgICAgICAgICAgICAgICBwb2ludFByZWNvbXB1dGVzLnNldChhZmZpbmVQb2ludCwgcHJlY29tcHV0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwID0gSmFjb2JpYW5Qb2ludC5aRVJPO1xuICAgICAgICBsZXQgZiA9IEphY29iaWFuUG9pbnQuQkFTRTtcbiAgICAgICAgY29uc3Qgd2luZG93cyA9IDEgKyAoVVNFX0VORE9NT1JQSElTTSA/IDEyOCAvIFcgOiAyNTYgLyBXKTtcbiAgICAgICAgY29uc3Qgd2luZG93U2l6ZSA9IDIgKiogKFcgLSAxKTtcbiAgICAgICAgY29uc3QgbWFzayA9IEJpZ0ludCgyICoqIFcgLSAxKTtcbiAgICAgICAgY29uc3QgbWF4TnVtYmVyID0gMiAqKiBXO1xuICAgICAgICBjb25zdCBzaGlmdEJ5ID0gQmlnSW50KFcpO1xuICAgICAgICBmb3IgKGxldCB3aW5kb3cgPSAwOyB3aW5kb3cgPCB3aW5kb3dzOyB3aW5kb3crKykge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gd2luZG93ICogd2luZG93U2l6ZTtcbiAgICAgICAgICAgIGxldCB3Yml0cyA9IE51bWJlcihuICYgbWFzayk7XG4gICAgICAgICAgICBuID4+PSBzaGlmdEJ5O1xuICAgICAgICAgICAgaWYgKHdiaXRzID4gd2luZG93U2l6ZSkge1xuICAgICAgICAgICAgICAgIHdiaXRzIC09IG1heE51bWJlcjtcbiAgICAgICAgICAgICAgICBuICs9IF8xbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9mZnNldDEgPSBvZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQyID0gb2Zmc2V0ICsgTWF0aC5hYnMod2JpdHMpIC0gMTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmQxID0gd2luZG93ICUgMiAhPT0gMDtcbiAgICAgICAgICAgIGNvbnN0IGNvbmQyID0gd2JpdHMgPCAwO1xuICAgICAgICAgICAgaWYgKHdiaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZiA9IGYuYWRkKGNvbnN0VGltZU5lZ2F0ZShjb25kMSwgcHJlY29tcHV0ZXNbb2Zmc2V0MV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHAgPSBwLmFkZChjb25zdFRpbWVOZWdhdGUoY29uZDIsIHByZWNvbXB1dGVzW29mZnNldDJdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcCwgZiB9O1xuICAgIH1cbiAgICBtdWx0aXBseShzY2FsYXIsIGFmZmluZVBvaW50KSB7XG4gICAgICAgIGxldCBuID0gbm9ybWFsaXplU2NhbGFyKHNjYWxhcik7XG4gICAgICAgIGxldCBwb2ludDtcbiAgICAgICAgbGV0IGZha2U7XG4gICAgICAgIGlmIChVU0VfRU5ET01PUlBISVNNKSB7XG4gICAgICAgICAgICBjb25zdCB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH0gPSBlbmRvLnNwbGl0U2NhbGFyKG4pO1xuICAgICAgICAgICAgbGV0IHsgcDogazFwLCBmOiBmMXAgfSA9IHRoaXMud05BRihrMSwgYWZmaW5lUG9pbnQpO1xuICAgICAgICAgICAgbGV0IHsgcDogazJwLCBmOiBmMnAgfSA9IHRoaXMud05BRihrMiwgYWZmaW5lUG9pbnQpO1xuICAgICAgICAgICAgazFwID0gY29uc3RUaW1lTmVnYXRlKGsxbmVnLCBrMXApO1xuICAgICAgICAgICAgazJwID0gY29uc3RUaW1lTmVnYXRlKGsybmVnLCBrMnApO1xuICAgICAgICAgICAgazJwID0gbmV3IEphY29iaWFuUG9pbnQobW9kKGsycC54ICogZW5kby5iZXRhKSwgazJwLnksIGsycC56KTtcbiAgICAgICAgICAgIHBvaW50ID0gazFwLmFkZChrMnApO1xuICAgICAgICAgICAgZmFrZSA9IGYxcC5hZGQoZjJwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcCwgZiB9ID0gdGhpcy53TkFGKG4sIGFmZmluZVBvaW50KTtcbiAgICAgICAgICAgIHBvaW50ID0gcDtcbiAgICAgICAgICAgIGZha2UgPSBmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50Lm5vcm1hbGl6ZVooW3BvaW50LCBmYWtlXSlbMF07XG4gICAgfVxuICAgIHRvQWZmaW5lKGludlopIHtcbiAgICAgICAgY29uc3QgeyB4LCB5LCB6IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBpczAgPSB0aGlzLmVxdWFscyhKYWNvYmlhblBvaW50LlpFUk8pO1xuICAgICAgICBpZiAoaW52WiA9PSBudWxsKVxuICAgICAgICAgICAgaW52WiA9IGlzMCA/IF84biA6IGludmVydCh6KTtcbiAgICAgICAgY29uc3QgaXoxID0gaW52WjtcbiAgICAgICAgY29uc3QgaXoyID0gbW9kKGl6MSAqIGl6MSk7XG4gICAgICAgIGNvbnN0IGl6MyA9IG1vZChpejIgKiBpejEpO1xuICAgICAgICBjb25zdCBheCA9IG1vZCh4ICogaXoyKTtcbiAgICAgICAgY29uc3QgYXkgPSBtb2QoeSAqIGl6Myk7XG4gICAgICAgIGNvbnN0IHp6ID0gbW9kKHogKiBpejEpO1xuICAgICAgICBpZiAoaXMwKVxuICAgICAgICAgICAgcmV0dXJuIFBvaW50LlpFUk87XG4gICAgICAgIGlmICh6eiAhPT0gXzFuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZaIHdhcyBpbnZhbGlkJyk7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoYXgsIGF5KTtcbiAgICB9XG59XG5KYWNvYmlhblBvaW50LkJBU0UgPSBuZXcgSmFjb2JpYW5Qb2ludChDVVJWRS5HeCwgQ1VSVkUuR3ksIF8xbik7XG5KYWNvYmlhblBvaW50LlpFUk8gPSBuZXcgSmFjb2JpYW5Qb2ludChfMG4sIF8xbiwgXzBuKTtcbmZ1bmN0aW9uIGNvbnN0VGltZU5lZ2F0ZShjb25kaXRpb24sIGl0ZW0pIHtcbiAgICBjb25zdCBuZWcgPSBpdGVtLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjb25kaXRpb24gPyBuZWcgOiBpdGVtO1xufVxuY29uc3QgcG9pbnRQcmVjb21wdXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgY2xhc3MgUG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG4gICAgX3NldFdpbmRvd1NpemUod2luZG93U2l6ZSkge1xuICAgICAgICB0aGlzLl9XSU5ET1dfU0laRSA9IHdpbmRvd1NpemU7XG4gICAgICAgIHBvaW50UHJlY29tcHV0ZXMuZGVsZXRlKHRoaXMpO1xuICAgIH1cbiAgICBoYXNFdmVuWSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueSAlIF8ybiA9PT0gXzBuO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUNvbXByZXNzZWRIZXgoYnl0ZXMpIHtcbiAgICAgICAgY29uc3QgaXNTaG9ydCA9IGJ5dGVzLmxlbmd0aCA9PT0gMzI7XG4gICAgICAgIGNvbnN0IHggPSBieXRlc1RvTnVtYmVyKGlzU2hvcnQgPyBieXRlcyA6IGJ5dGVzLnN1YmFycmF5KDEpKTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkRmllbGRFbGVtZW50KHgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCBpcyBub3Qgb24gY3VydmUnKTtcbiAgICAgICAgY29uc3QgeTIgPSB3ZWllcnN0cmFzcyh4KTtcbiAgICAgICAgbGV0IHkgPSBzcXJ0TW9kKHkyKTtcbiAgICAgICAgY29uc3QgaXNZT2RkID0gKHkgJiBfMW4pID09PSBfMW47XG4gICAgICAgIGlmIChpc1Nob3J0KSB7XG4gICAgICAgICAgICBpZiAoaXNZT2RkKVxuICAgICAgICAgICAgICAgIHkgPSBtb2QoLXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXNGaXJzdEJ5dGVPZGQgPSAoYnl0ZXNbMF0gJiAxKSA9PT0gMTtcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0Qnl0ZU9kZCAhPT0gaXNZT2RkKVxuICAgICAgICAgICAgICAgIHkgPSBtb2QoLXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHgsIHkpO1xuICAgICAgICBwb2ludC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVW5jb21wcmVzc2VkSGV4KGJ5dGVzKSB7XG4gICAgICAgIGNvbnN0IHggPSBieXRlc1RvTnVtYmVyKGJ5dGVzLnN1YmFycmF5KDEsIGZpZWxkTGVuICsgMSkpO1xuICAgICAgICBjb25zdCB5ID0gYnl0ZXNUb051bWJlcihieXRlcy5zdWJhcnJheShmaWVsZExlbiArIDEsIGZpZWxkTGVuICogMiArIDEpKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgIHBvaW50LmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21IZXgoaGV4KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZW5zdXJlQnl0ZXMoaGV4KTtcbiAgICAgICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBieXRlc1swXTtcbiAgICAgICAgaWYgKGxlbiA9PT0gZmllbGRMZW4pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tQ29tcHJlc3NlZEhleChieXRlcyk7XG4gICAgICAgIGlmIChsZW4gPT09IGNvbXByZXNzZWRMZW4gJiYgKGhlYWRlciA9PT0gMHgwMiB8fCBoZWFkZXIgPT09IDB4MDMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tQ29tcHJlc3NlZEhleChieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbiA9PT0gdW5jb21wcmVzc2VkTGVuICYmIGhlYWRlciA9PT0gMHgwNClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21VbmNvbXByZXNzZWRIZXgoYnl0ZXMpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBvaW50LmZyb21IZXg6IHJlY2VpdmVkIGludmFsaWQgcG9pbnQuIEV4cGVjdGVkIDMyLSR7Y29tcHJlc3NlZExlbn0gY29tcHJlc3NlZCBieXRlcyBvciAke3VuY29tcHJlc3NlZExlbn0gdW5jb21wcmVzc2VkIGJ5dGVzLCBub3QgJHtsZW59YCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gICAgICAgIHJldHVybiBQb2ludC5CQVNFLm11bHRpcGx5KG5vcm1hbGl6ZVByaXZhdGVLZXkocHJpdmF0ZUtleSkpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVNpZ25hdHVyZShtc2dIYXNoLCBzaWduYXR1cmUsIHJlY292ZXJ5KSB7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gbm9ybWFsaXplU2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgICAgIGlmICghWzAsIDEsIDIsIDNdLmluY2x1ZGVzKHJlY292ZXJ5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlY292ZXI6IGludmFsaWQgcmVjb3ZlcnkgYml0Jyk7XG4gICAgICAgIGNvbnN0IGggPSB0cnVuY2F0ZUhhc2goZW5zdXJlQnl0ZXMobXNnSGFzaCkpO1xuICAgICAgICBjb25zdCB7IG4gfSA9IENVUlZFO1xuICAgICAgICBjb25zdCByYWRqID0gcmVjb3ZlcnkgPT09IDIgfHwgcmVjb3ZlcnkgPT09IDMgPyByICsgbiA6IHI7XG4gICAgICAgIGNvbnN0IHJpbnYgPSBpbnZlcnQocmFkaiwgbik7XG4gICAgICAgIGNvbnN0IHUxID0gbW9kKC1oICogcmludiwgbik7XG4gICAgICAgIGNvbnN0IHUyID0gbW9kKHMgKiByaW52LCBuKTtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gcmVjb3ZlcnkgJiAxID8gJzAzJyA6ICcwMic7XG4gICAgICAgIGNvbnN0IFIgPSBQb2ludC5mcm9tSGV4KHByZWZpeCArIG51bVRvMzJiU3RyKHJhZGopKTtcbiAgICAgICAgY29uc3QgUSA9IFBvaW50LkJBU0UubXVsdGlwbHlBbmRBZGRVbnNhZmUoUiwgdTEsIHUyKTtcbiAgICAgICAgaWYgKCFRKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVjb3ZlciBzaWduYXR1cmU6IHBvaW50IGF0IGluZmluaWZ5Jyk7XG4gICAgICAgIFEuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIFE7XG4gICAgfVxuICAgIHRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXModGhpcy50b0hleChpc0NvbXByZXNzZWQpKTtcbiAgICB9XG4gICAgdG9IZXgoaXNDb21wcmVzc2VkID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgeCA9IG51bVRvMzJiU3RyKHRoaXMueCk7XG4gICAgICAgIGlmIChpc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMuaGFzRXZlblkoKSA/ICcwMicgOiAnMDMnO1xuICAgICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke3h9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgMDQke3h9JHtudW1UbzMyYlN0cih0aGlzLnkpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9IZXhYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0hleCh0cnVlKS5zbGljZSgyKTtcbiAgICB9XG4gICAgdG9SYXdYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1Jhd0J5dGVzKHRydWUpLnNsaWNlKDEpO1xuICAgIH1cbiAgICBhc3NlcnRWYWxpZGl0eSgpIHtcbiAgICAgICAgY29uc3QgbXNnID0gJ1BvaW50IGlzIG5vdCBvbiBlbGxpcHRpYyBjdXJ2ZSc7XG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFpc1ZhbGlkRmllbGRFbGVtZW50KHgpIHx8ICFpc1ZhbGlkRmllbGRFbGVtZW50KHkpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBtb2QoeSAqIHkpO1xuICAgICAgICBjb25zdCByaWdodCA9IHdlaWVyc3RyYXNzKHgpO1xuICAgICAgICBpZiAobW9kKGxlZnQgLSByaWdodCkgIT09IF8wbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0gb3RoZXIueCAmJiB0aGlzLnkgPT09IG90aGVyLnk7XG4gICAgfVxuICAgIG5lZ2F0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngsIG1vZCgtdGhpcy55KSk7XG4gICAgfVxuICAgIGRvdWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQuZnJvbUFmZmluZSh0aGlzKS5kb3VibGUoKS50b0FmZmluZSgpO1xuICAgIH1cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIEphY29iaWFuUG9pbnQuZnJvbUFmZmluZSh0aGlzKS5hZGQoSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKG90aGVyKSkudG9BZmZpbmUoKTtcbiAgICB9XG4gICAgc3VidHJhY3Qob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG90aGVyLm5lZ2F0ZSgpKTtcbiAgICB9XG4gICAgbXVsdGlwbHkoc2NhbGFyKSB7XG4gICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LmZyb21BZmZpbmUodGhpcykubXVsdGlwbHkoc2NhbGFyLCB0aGlzKS50b0FmZmluZSgpO1xuICAgIH1cbiAgICBtdWx0aXBseUFuZEFkZFVuc2FmZShRLCBhLCBiKSB7XG4gICAgICAgIGNvbnN0IFAgPSBKYWNvYmlhblBvaW50LmZyb21BZmZpbmUodGhpcyk7XG4gICAgICAgIGNvbnN0IGFQID0gYSA9PT0gXzBuIHx8IGEgPT09IF8xbiB8fCB0aGlzICE9PSBQb2ludC5CQVNFID8gUC5tdWx0aXBseVVuc2FmZShhKSA6IFAubXVsdGlwbHkoYSk7XG4gICAgICAgIGNvbnN0IGJRID0gSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKFEpLm11bHRpcGx5VW5zYWZlKGIpO1xuICAgICAgICBjb25zdCBzdW0gPSBhUC5hZGQoYlEpO1xuICAgICAgICByZXR1cm4gc3VtLmVxdWFscyhKYWNvYmlhblBvaW50LlpFUk8pID8gdW5kZWZpbmVkIDogc3VtLnRvQWZmaW5lKCk7XG4gICAgfVxufVxuUG9pbnQuQkFTRSA9IG5ldyBQb2ludChDVVJWRS5HeCwgQ1VSVkUuR3kpO1xuUG9pbnQuWkVSTyA9IG5ldyBQb2ludChfMG4sIF8wbik7XG5mdW5jdGlvbiBzbGljZURFUihzKSB7XG4gICAgcmV0dXJuIE51bWJlci5wYXJzZUludChzWzBdLCAxNikgPj0gOCA/ICcwMCcgKyBzIDogcztcbn1cbmZ1bmN0aW9uIHBhcnNlREVSSW50KGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyIHx8IGRhdGFbMF0gIT09IDB4MDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyIHRhZzogJHtieXRlc1RvSGV4KGRhdGEpfWApO1xuICAgIH1cbiAgICBjb25zdCBsZW4gPSBkYXRhWzFdO1xuICAgIGNvbnN0IHJlcyA9IGRhdGEuc3ViYXJyYXkoMiwgbGVuICsgMik7XG4gICAgaWYgKCFsZW4gfHwgcmVzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogd3JvbmcgbGVuZ3RoYCk7XG4gICAgfVxuICAgIGlmIChyZXNbMF0gPT09IDB4MDAgJiYgcmVzWzFdIDw9IDB4N2YpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyOiB0cmFpbGluZyBsZW5ndGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZGF0YTogYnl0ZXNUb051bWJlcihyZXMpLCBsZWZ0OiBkYXRhLnN1YmFycmF5KGxlbiArIDIpIH07XG59XG5mdW5jdGlvbiBwYXJzZURFUlNpZ25hdHVyZShkYXRhKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDwgMiB8fCBkYXRhWzBdICE9IDB4MzApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpZ25hdHVyZSB0YWc6ICR7Ynl0ZXNUb0hleChkYXRhKX1gKTtcbiAgICB9XG4gICAgaWYgKGRhdGFbMV0gIT09IGRhdGEubGVuZ3RoIC0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlOiBpbmNvcnJlY3QgbGVuZ3RoJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgZGF0YTogciwgbGVmdDogc0J5dGVzIH0gPSBwYXJzZURFUkludChkYXRhLnN1YmFycmF5KDIpKTtcbiAgICBjb25zdCB7IGRhdGE6IHMsIGxlZnQ6IHJCeXRlc0xlZnQgfSA9IHBhcnNlREVSSW50KHNCeXRlcyk7XG4gICAgaWYgKHJCeXRlc0xlZnQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZzogJHtieXRlc1RvSGV4KHJCeXRlc0xlZnQpfWApO1xuICAgIH1cbiAgICByZXR1cm4geyByLCBzIH07XG59XG5leHBvcnQgY2xhc3MgU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihyLCBzKSB7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMucyA9IHM7XG4gICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Db21wYWN0KGhleCkge1xuICAgICAgICBjb25zdCBhcnIgPSBoZXggaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICAgICAgICBjb25zdCBuYW1lID0gJ1NpZ25hdHVyZS5mcm9tQ29tcGFjdCc7XG4gICAgICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJyAmJiAhYXJyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtuYW1lfTogRXhwZWN0ZWQgc3RyaW5nIG9yIFVpbnQ4QXJyYXlgKTtcbiAgICAgICAgY29uc3Qgc3RyID0gYXJyID8gYnl0ZXNUb0hleChoZXgpIDogaGV4O1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCAhPT0gMTI4KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke25hbWV9OiBFeHBlY3RlZCA2NC1ieXRlIGhleGApO1xuICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShoZXhUb051bWJlcihzdHIuc2xpY2UoMCwgNjQpKSwgaGV4VG9OdW1iZXIoc3RyLnNsaWNlKDY0LCAxMjgpKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tREVSKGhleCkge1xuICAgICAgICBjb25zdCBhcnIgPSBoZXggaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICAgICAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycgJiYgIWFycilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFNpZ25hdHVyZS5mcm9tREVSOiBFeHBlY3RlZCBzdHJpbmcgb3IgVWludDhBcnJheWApO1xuICAgICAgICBjb25zdCB7IHIsIHMgfSA9IHBhcnNlREVSU2lnbmF0dXJlKGFyciA/IGhleCA6IGhleFRvQnl0ZXMoaGV4KSk7XG4gICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIHMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbURFUihoZXgpO1xuICAgIH1cbiAgICBhc3NlcnRWYWxpZGl0eSgpIHtcbiAgICAgICAgY29uc3QgeyByLCBzIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihyKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBTaWduYXR1cmU6IHIgbXVzdCBiZSAwIDwgciA8IG4nKTtcbiAgICAgICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIocykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgU2lnbmF0dXJlOiBzIG11c3QgYmUgMCA8IHMgPCBuJyk7XG4gICAgfVxuICAgIGhhc0hpZ2hTKCkge1xuICAgICAgICBjb25zdCBIQUxGID0gQ1VSVkUubiA+PiBfMW47XG4gICAgICAgIHJldHVybiB0aGlzLnMgPiBIQUxGO1xuICAgIH1cbiAgICBub3JtYWxpemVTKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNIaWdoUygpID8gbmV3IFNpZ25hdHVyZSh0aGlzLnIsIG1vZCgtdGhpcy5zLCBDVVJWRS5uKSkgOiB0aGlzO1xuICAgIH1cbiAgICB0b0RFUlJhd0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyh0aGlzLnRvREVSSGV4KCkpO1xuICAgIH1cbiAgICB0b0RFUkhleCgpIHtcbiAgICAgICAgY29uc3Qgc0hleCA9IHNsaWNlREVSKG51bWJlclRvSGV4VW5wYWRkZWQodGhpcy5zKSk7XG4gICAgICAgIGNvbnN0IHJIZXggPSBzbGljZURFUihudW1iZXJUb0hleFVucGFkZGVkKHRoaXMucikpO1xuICAgICAgICBjb25zdCBzSGV4TCA9IHNIZXgubGVuZ3RoIC8gMjtcbiAgICAgICAgY29uc3QgckhleEwgPSBySGV4Lmxlbmd0aCAvIDI7XG4gICAgICAgIGNvbnN0IHNMZW4gPSBudW1iZXJUb0hleFVucGFkZGVkKHNIZXhMKTtcbiAgICAgICAgY29uc3QgckxlbiA9IG51bWJlclRvSGV4VW5wYWRkZWQockhleEwpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBudW1iZXJUb0hleFVucGFkZGVkKHJIZXhMICsgc0hleEwgKyA0KTtcbiAgICAgICAgcmV0dXJuIGAzMCR7bGVuZ3RofTAyJHtyTGVufSR7ckhleH0wMiR7c0xlbn0ke3NIZXh9YDtcbiAgICB9XG4gICAgdG9SYXdCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9ERVJSYXdCeXRlcygpO1xuICAgIH1cbiAgICB0b0hleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9ERVJIZXgoKTtcbiAgICB9XG4gICAgdG9Db21wYWN0UmF3Qnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHRoaXMudG9Db21wYWN0SGV4KCkpO1xuICAgIH1cbiAgICB0b0NvbXBhY3RIZXgoKSB7XG4gICAgICAgIHJldHVybiBudW1UbzMyYlN0cih0aGlzLnIpICsgbnVtVG8zMmJTdHIodGhpcy5zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBpZiAoIWFycmF5cy5ldmVyeSgoYikgPT4gYiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgbGlzdCBleHBlY3RlZCcpO1xuICAgIGlmIChhcnJheXMubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gYXJyYXlzWzBdO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5cy5yZWR1Y2UoKGEsIGFycikgPT4gYSArIGFyci5sZW5ndGgsIDApO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIHBhZCA9IDA7IGkgPCBhcnJheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXlzW2ldO1xuICAgICAgICByZXN1bHQuc2V0KGFyciwgcGFkKTtcbiAgICAgICAgcGFkICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBoZXhlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAodiwgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG5mdW5jdGlvbiBieXRlc1RvSGV4KHVpbnQ4YSkge1xuICAgIGlmICghKHVpbnQ4YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIFVpbnQ4QXJyYXknKTtcbiAgICBsZXQgaGV4ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1aW50OGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4ICs9IGhleGVzW3VpbnQ4YVtpXV07XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5jb25zdCBQT1dfMl8yNTYgPSBCaWdJbnQoJzB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTtcbmZ1bmN0aW9uIG51bVRvMzJiU3RyKG51bSkge1xuICAgIGlmICh0eXBlb2YgbnVtICE9PSAnYmlnaW50JylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBiaWdpbnQnKTtcbiAgICBpZiAoIShfMG4gPD0gbnVtICYmIG51bSA8IFBPV18yXzI1NikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbnVtYmVyIDAgPD0gbiA8IDJeMjU2Jyk7XG4gICAgcmV0dXJuIG51bS50b1N0cmluZygxNikucGFkU3RhcnQoNjQsICcwJyk7XG59XG5mdW5jdGlvbiBudW1UbzMyYihudW0pIHtcbiAgICBjb25zdCBiID0gaGV4VG9CeXRlcyhudW1UbzMyYlN0cihudW0pKTtcbiAgICBpZiAoYi5sZW5ndGggIT09IDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiBleHBlY3RlZCAzMiBieXRlcycpO1xuICAgIHJldHVybiBiO1xufVxuZnVuY3Rpb24gbnVtYmVyVG9IZXhVbnBhZGRlZChudW0pIHtcbiAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXgubGVuZ3RoICYgMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cbmZ1bmN0aW9uIGhleFRvTnVtYmVyKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZXhUb051bWJlcjogZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIH1cbiAgICByZXR1cm4gQmlnSW50KGAweCR7aGV4fWApO1xufVxuZnVuY3Rpb24gaGV4VG9CeXRlcyhoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGV4VG9CeXRlczogZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIH1cbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4VG9CeXRlczogcmVjZWl2ZWQgaW52YWxpZCB1bnBhZGRlZCBoZXgnICsgaGV4Lmxlbmd0aCk7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBqID0gaSAqIDI7XG4gICAgICAgIGNvbnN0IGhleEJ5dGUgPSBoZXguc2xpY2UoaiwgaiArIDIpO1xuICAgICAgICBjb25zdCBieXRlID0gTnVtYmVyLnBhcnNlSW50KGhleEJ5dGUsIDE2KTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihieXRlKSB8fCBieXRlIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlIHNlcXVlbmNlJyk7XG4gICAgICAgIGFycmF5W2ldID0gYnl0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gYnl0ZXNUb051bWJlcihieXRlcykge1xuICAgIHJldHVybiBoZXhUb051bWJlcihieXRlc1RvSGV4KGJ5dGVzKSk7XG59XG5mdW5jdGlvbiBlbnN1cmVCeXRlcyhoZXgpIHtcbiAgICByZXR1cm4gaGV4IGluc3RhbmNlb2YgVWludDhBcnJheSA/IFVpbnQ4QXJyYXkuZnJvbShoZXgpIDogaGV4VG9CeXRlcyhoZXgpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2NhbGFyKG51bSkge1xuICAgIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW0pICYmIG51bSA+IDApXG4gICAgICAgIHJldHVybiBCaWdJbnQobnVtKTtcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ2JpZ2ludCcgJiYgaXNXaXRoaW5DdXJ2ZU9yZGVyKG51bSkpXG4gICAgICAgIHJldHVybiBudW07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdmFsaWQgcHJpdmF0ZSBzY2FsYXI6IDAgPCBzY2FsYXIgPCBjdXJ2ZS5uJyk7XG59XG5mdW5jdGlvbiBtb2QoYSwgYiA9IENVUlZFLlApIHtcbiAgICBjb25zdCByZXN1bHQgPSBhICUgYjtcbiAgICByZXR1cm4gcmVzdWx0ID49IF8wbiA/IHJlc3VsdCA6IGIgKyByZXN1bHQ7XG59XG5mdW5jdGlvbiBwb3cyKHgsIHBvd2VyKSB7XG4gICAgY29uc3QgeyBQIH0gPSBDVVJWRTtcbiAgICBsZXQgcmVzID0geDtcbiAgICB3aGlsZSAocG93ZXItLSA+IF8wbikge1xuICAgICAgICByZXMgKj0gcmVzO1xuICAgICAgICByZXMgJT0gUDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHNxcnRNb2QoeCkge1xuICAgIGNvbnN0IHsgUCB9ID0gQ1VSVkU7XG4gICAgY29uc3QgXzZuID0gQmlnSW50KDYpO1xuICAgIGNvbnN0IF8xMW4gPSBCaWdJbnQoMTEpO1xuICAgIGNvbnN0IF8yMm4gPSBCaWdJbnQoMjIpO1xuICAgIGNvbnN0IF8yM24gPSBCaWdJbnQoMjMpO1xuICAgIGNvbnN0IF80NG4gPSBCaWdJbnQoNDQpO1xuICAgIGNvbnN0IF84OG4gPSBCaWdJbnQoODgpO1xuICAgIGNvbnN0IGIyID0gKHggKiB4ICogeCkgJSBQO1xuICAgIGNvbnN0IGIzID0gKGIyICogYjIgKiB4KSAlIFA7XG4gICAgY29uc3QgYjYgPSAocG93MihiMywgXzNuKSAqIGIzKSAlIFA7XG4gICAgY29uc3QgYjkgPSAocG93MihiNiwgXzNuKSAqIGIzKSAlIFA7XG4gICAgY29uc3QgYjExID0gKHBvdzIoYjksIF8ybikgKiBiMikgJSBQO1xuICAgIGNvbnN0IGIyMiA9IChwb3cyKGIxMSwgXzExbikgKiBiMTEpICUgUDtcbiAgICBjb25zdCBiNDQgPSAocG93MihiMjIsIF8yMm4pICogYjIyKSAlIFA7XG4gICAgY29uc3QgYjg4ID0gKHBvdzIoYjQ0LCBfNDRuKSAqIGI0NCkgJSBQO1xuICAgIGNvbnN0IGIxNzYgPSAocG93MihiODgsIF84OG4pICogYjg4KSAlIFA7XG4gICAgY29uc3QgYjIyMCA9IChwb3cyKGIxNzYsIF80NG4pICogYjQ0KSAlIFA7XG4gICAgY29uc3QgYjIyMyA9IChwb3cyKGIyMjAsIF8zbikgKiBiMykgJSBQO1xuICAgIGNvbnN0IHQxID0gKHBvdzIoYjIyMywgXzIzbikgKiBiMjIpICUgUDtcbiAgICBjb25zdCB0MiA9IChwb3cyKHQxLCBfNm4pICogYjIpICUgUDtcbiAgICBjb25zdCBydCA9IHBvdzIodDIsIF8ybik7XG4gICAgY29uc3QgeGMgPSAocnQgKiBydCkgJSBQO1xuICAgIGlmICh4YyAhPT0geClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBzcXVhcmUgcm9vdCcpO1xuICAgIHJldHVybiBydDtcbn1cbmZ1bmN0aW9uIGludmVydChudW1iZXIsIG1vZHVsbyA9IENVUlZFLlApIHtcbiAgICBpZiAobnVtYmVyID09PSBfMG4gfHwgbW9kdWxvIDw9IF8wbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmVydDogZXhwZWN0ZWQgcG9zaXRpdmUgaW50ZWdlcnMsIGdvdCBuPSR7bnVtYmVyfSBtb2Q9JHttb2R1bG99YCk7XG4gICAgfVxuICAgIGxldCBhID0gbW9kKG51bWJlciwgbW9kdWxvKTtcbiAgICBsZXQgYiA9IG1vZHVsbztcbiAgICBsZXQgeCA9IF8wbiwgeSA9IF8xbiwgdSA9IF8xbiwgdiA9IF8wbjtcbiAgICB3aGlsZSAoYSAhPT0gXzBuKSB7XG4gICAgICAgIGNvbnN0IHEgPSBiIC8gYTtcbiAgICAgICAgY29uc3QgciA9IGIgJSBhO1xuICAgICAgICBjb25zdCBtID0geCAtIHUgKiBxO1xuICAgICAgICBjb25zdCBuID0geSAtIHYgKiBxO1xuICAgICAgICBiID0gYSwgYSA9IHIsIHggPSB1LCB5ID0gdiwgdSA9IG0sIHYgPSBuO1xuICAgIH1cbiAgICBjb25zdCBnY2QgPSBiO1xuICAgIGlmIChnY2QgIT09IF8xbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZlcnQ6IGRvZXMgbm90IGV4aXN0Jyk7XG4gICAgcmV0dXJuIG1vZCh4LCBtb2R1bG8pO1xufVxuZnVuY3Rpb24gaW52ZXJ0QmF0Y2gobnVtcywgcCA9IENVUlZFLlApIHtcbiAgICBjb25zdCBzY3JhdGNoID0gbmV3IEFycmF5KG51bXMubGVuZ3RoKTtcbiAgICBjb25zdCBsYXN0TXVsdGlwbGllZCA9IG51bXMucmVkdWNlKChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAobnVtID09PSBfMG4pXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICBzY3JhdGNoW2ldID0gYWNjO1xuICAgICAgICByZXR1cm4gbW9kKGFjYyAqIG51bSwgcCk7XG4gICAgfSwgXzFuKTtcbiAgICBjb25zdCBpbnZlcnRlZCA9IGludmVydChsYXN0TXVsdGlwbGllZCwgcCk7XG4gICAgbnVtcy5yZWR1Y2VSaWdodCgoYWNjLCBudW0sIGkpID0+IHtcbiAgICAgICAgaWYgKG51bSA9PT0gXzBuKVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgc2NyYXRjaFtpXSA9IG1vZChhY2MgKiBzY3JhdGNoW2ldLCBwKTtcbiAgICAgICAgcmV0dXJuIG1vZChhY2MgKiBudW0sIHApO1xuICAgIH0sIGludmVydGVkKTtcbiAgICByZXR1cm4gc2NyYXRjaDtcbn1cbmZ1bmN0aW9uIGJpdHMyaW50XzIoYnl0ZXMpIHtcbiAgICBjb25zdCBkZWx0YSA9IGJ5dGVzLmxlbmd0aCAqIDggLSBncm91cExlbiAqIDg7XG4gICAgY29uc3QgbnVtID0gYnl0ZXNUb051bWJlcihieXRlcyk7XG4gICAgcmV0dXJuIGRlbHRhID4gMCA/IG51bSA+PiBCaWdJbnQoZGVsdGEpIDogbnVtO1xufVxuZnVuY3Rpb24gdHJ1bmNhdGVIYXNoKGhhc2gsIHRydW5jYXRlT25seSA9IGZhbHNlKSB7XG4gICAgY29uc3QgaCA9IGJpdHMyaW50XzIoaGFzaCk7XG4gICAgaWYgKHRydW5jYXRlT25seSlcbiAgICAgICAgcmV0dXJuIGg7XG4gICAgY29uc3QgeyBuIH0gPSBDVVJWRTtcbiAgICByZXR1cm4gaCA+PSBuID8gaCAtIG4gOiBoO1xufVxubGV0IF9zaGEyNTZTeW5jO1xubGV0IF9obWFjU2hhMjU2U3luYztcbmNsYXNzIEhtYWNEcmJnIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoTGVuLCBxQnl0ZUxlbikge1xuICAgICAgICB0aGlzLmhhc2hMZW4gPSBoYXNoTGVuO1xuICAgICAgICB0aGlzLnFCeXRlTGVuID0gcUJ5dGVMZW47XG4gICAgICAgIGlmICh0eXBlb2YgaGFzaExlbiAhPT0gJ251bWJlcicgfHwgaGFzaExlbiA8IDIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hhc2hMZW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICBpZiAodHlwZW9mIHFCeXRlTGVuICE9PSAnbnVtYmVyJyB8fCBxQnl0ZUxlbiA8IDIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3FCeXRlTGVuIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICAgICAgdGhpcy52ID0gbmV3IFVpbnQ4QXJyYXkoaGFzaExlbikuZmlsbCgxKTtcbiAgICAgICAgdGhpcy5rID0gbmV3IFVpbnQ4QXJyYXkoaGFzaExlbikuZmlsbCgwKTtcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB9XG4gICAgaG1hYyguLi52YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmhtYWNTaGEyNTYodGhpcy5rLCAuLi52YWx1ZXMpO1xuICAgIH1cbiAgICBobWFjU3luYyguLi52YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIF9obWFjU2hhMjU2U3luYyh0aGlzLmssIC4uLnZhbHVlcyk7XG4gICAgfVxuICAgIGNoZWNrU3luYygpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBfaG1hY1NoYTI1NlN5bmMgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgU2hhRXJyb3IoJ2htYWNTaGEyNTZTeW5jIG5lZWRzIHRvIGJlIHNldCcpO1xuICAgIH1cbiAgICBpbmNyKCkge1xuICAgICAgICBpZiAodGhpcy5jb3VudGVyID49IDEwMDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyaWVkIDEsMDAwIGsgdmFsdWVzIGZvciBzaWduKCksIGFsbCB3ZXJlIGludmFsaWQnKTtcbiAgICAgICAgdGhpcy5jb3VudGVyICs9IDE7XG4gICAgfVxuICAgIGFzeW5jIHJlc2VlZChzZWVkID0gbmV3IFVpbnQ4QXJyYXkoKSkge1xuICAgICAgICB0aGlzLmsgPSBhd2FpdCB0aGlzLmhtYWModGhpcy52LCBVaW50OEFycmF5LmZyb20oWzB4MDBdKSwgc2VlZCk7XG4gICAgICAgIHRoaXMudiA9IGF3YWl0IHRoaXMuaG1hYyh0aGlzLnYpO1xuICAgICAgICBpZiAoc2VlZC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuayA9IGF3YWl0IHRoaXMuaG1hYyh0aGlzLnYsIFVpbnQ4QXJyYXkuZnJvbShbMHgwMV0pLCBzZWVkKTtcbiAgICAgICAgdGhpcy52ID0gYXdhaXQgdGhpcy5obWFjKHRoaXMudik7XG4gICAgfVxuICAgIHJlc2VlZFN5bmMoc2VlZCA9IG5ldyBVaW50OEFycmF5KCkpIHtcbiAgICAgICAgdGhpcy5jaGVja1N5bmMoKTtcbiAgICAgICAgdGhpcy5rID0gdGhpcy5obWFjU3luYyh0aGlzLnYsIFVpbnQ4QXJyYXkuZnJvbShbMHgwMF0pLCBzZWVkKTtcbiAgICAgICAgdGhpcy52ID0gdGhpcy5obWFjU3luYyh0aGlzLnYpO1xuICAgICAgICBpZiAoc2VlZC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuayA9IHRoaXMuaG1hY1N5bmModGhpcy52LCBVaW50OEFycmF5LmZyb20oWzB4MDFdKSwgc2VlZCk7XG4gICAgICAgIHRoaXMudiA9IHRoaXMuaG1hY1N5bmModGhpcy52KTtcbiAgICB9XG4gICAgYXN5bmMgZ2VuZXJhdGUoKSB7XG4gICAgICAgIHRoaXMuaW5jcigpO1xuICAgICAgICBsZXQgbGVuID0gMDtcbiAgICAgICAgY29uc3Qgb3V0ID0gW107XG4gICAgICAgIHdoaWxlIChsZW4gPCB0aGlzLnFCeXRlTGVuKSB7XG4gICAgICAgICAgICB0aGlzLnYgPSBhd2FpdCB0aGlzLmhtYWModGhpcy52KTtcbiAgICAgICAgICAgIGNvbnN0IHNsID0gdGhpcy52LnNsaWNlKCk7XG4gICAgICAgICAgICBvdXQucHVzaChzbCk7XG4gICAgICAgICAgICBsZW4gKz0gdGhpcy52Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoLi4ub3V0KTtcbiAgICB9XG4gICAgZ2VuZXJhdGVTeW5jKCkge1xuICAgICAgICB0aGlzLmNoZWNrU3luYygpO1xuICAgICAgICB0aGlzLmluY3IoKTtcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICB3aGlsZSAobGVuIDwgdGhpcy5xQnl0ZUxlbikge1xuICAgICAgICAgICAgdGhpcy52ID0gdGhpcy5obWFjU3luYyh0aGlzLnYpO1xuICAgICAgICAgICAgY29uc3Qgc2wgPSB0aGlzLnYuc2xpY2UoKTtcbiAgICAgICAgICAgIG91dC5wdXNoKHNsKTtcbiAgICAgICAgICAgIGxlbiArPSB0aGlzLnYubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25jYXRCeXRlcyguLi5vdXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzV2l0aGluQ3VydmVPcmRlcihudW0pIHtcbiAgICByZXR1cm4gXzBuIDwgbnVtICYmIG51bSA8IENVUlZFLm47XG59XG5mdW5jdGlvbiBpc1ZhbGlkRmllbGRFbGVtZW50KG51bSkge1xuICAgIHJldHVybiBfMG4gPCBudW0gJiYgbnVtIDwgQ1VSVkUuUDtcbn1cbmZ1bmN0aW9uIGttZFRvU2lnKGtCeXRlcywgbSwgZCwgbG93UyA9IHRydWUpIHtcbiAgICBjb25zdCB7IG4gfSA9IENVUlZFO1xuICAgIGNvbnN0IGsgPSB0cnVuY2F0ZUhhc2goa0J5dGVzLCB0cnVlKTtcbiAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihrKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGtpbnYgPSBpbnZlcnQoaywgbik7XG4gICAgY29uc3QgcSA9IFBvaW50LkJBU0UubXVsdGlwbHkoayk7XG4gICAgY29uc3QgciA9IG1vZChxLngsIG4pO1xuICAgIGlmIChyID09PSBfMG4pXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBzID0gbW9kKGtpbnYgKiBtb2QobSArIGQgKiByLCBuKSwgbik7XG4gICAgaWYgKHMgPT09IF8wbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBzaWcgPSBuZXcgU2lnbmF0dXJlKHIsIHMpO1xuICAgIGxldCByZWNvdmVyeSA9IChxLnggPT09IHNpZy5yID8gMCA6IDIpIHwgTnVtYmVyKHEueSAmIF8xbik7XG4gICAgaWYgKGxvd1MgJiYgc2lnLmhhc0hpZ2hTKCkpIHtcbiAgICAgICAgc2lnID0gc2lnLm5vcm1hbGl6ZVMoKTtcbiAgICAgICAgcmVjb3ZlcnkgXj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc2lnLCByZWNvdmVyeSB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJpdmF0ZUtleShrZXkpIHtcbiAgICBsZXQgbnVtO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnYmlnaW50Jykge1xuICAgICAgICBudW0gPSBrZXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInICYmIE51bWJlci5pc1NhZmVJbnRlZ2VyKGtleSkgJiYga2V5ID4gMCkge1xuICAgICAgICBudW0gPSBCaWdJbnQoa2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggIT09IDIgKiBncm91cExlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgMzIgYnl0ZXMgb2YgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgbnVtID0gaGV4VG9OdW1iZXIoa2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBpZiAoa2V5Lmxlbmd0aCAhPT0gZ3JvdXBMZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIDMyIGJ5dGVzIG9mIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIG51bSA9IGJ5dGVzVG9OdW1iZXIoa2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHZhbGlkIHByaXZhdGUga2V5Jyk7XG4gICAgfVxuICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKG51bSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcHJpdmF0ZSBrZXk6IDAgPCBrZXkgPCBuJyk7XG4gICAgcmV0dXJuIG51bTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVB1YmxpY0tleShwdWJsaWNLZXkpIHtcbiAgICBpZiAocHVibGljS2V5IGluc3RhbmNlb2YgUG9pbnQpIHtcbiAgICAgICAgcHVibGljS2V5LmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiBwdWJsaWNLZXk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUG9pbnQuZnJvbUhleChwdWJsaWNLZXkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICBpZiAoc2lnbmF0dXJlIGluc3RhbmNlb2YgU2lnbmF0dXJlKSB7XG4gICAgICAgIHNpZ25hdHVyZS5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21ERVIoc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBTaWduYXR1cmUuZnJvbUNvbXBhY3Qoc2lnbmF0dXJlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVibGljS2V5KHByaXZhdGVLZXksIGlzQ29tcHJlc3NlZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIFBvaW50LmZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpLnRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KG1zZ0hhc2gsIHNpZ25hdHVyZSwgcmVjb3ZlcnksIGlzQ29tcHJlc3NlZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIFBvaW50LmZyb21TaWduYXR1cmUobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSkudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpO1xufVxuZnVuY3Rpb24gaXNQcm9iUHViKGl0ZW0pIHtcbiAgICBjb25zdCBhcnIgPSBpdGVtIGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICBjb25zdCBzdHIgPSB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZyc7XG4gICAgY29uc3QgbGVuID0gKGFyciB8fCBzdHIpICYmIGl0ZW0ubGVuZ3RoO1xuICAgIGlmIChhcnIpXG4gICAgICAgIHJldHVybiBsZW4gPT09IGNvbXByZXNzZWRMZW4gfHwgbGVuID09PSB1bmNvbXByZXNzZWRMZW47XG4gICAgaWYgKHN0cilcbiAgICAgICAgcmV0dXJuIGxlbiA9PT0gY29tcHJlc3NlZExlbiAqIDIgfHwgbGVuID09PSB1bmNvbXByZXNzZWRMZW4gKiAyO1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUG9pbnQpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaGFyZWRTZWNyZXQocHJpdmF0ZUEsIHB1YmxpY0IsIGlzQ29tcHJlc3NlZCA9IGZhbHNlKSB7XG4gICAgaWYgKGlzUHJvYlB1Yihwcml2YXRlQSkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldFNoYXJlZFNlY3JldDogZmlyc3QgYXJnIG11c3QgYmUgcHJpdmF0ZSBrZXknKTtcbiAgICBpZiAoIWlzUHJvYlB1YihwdWJsaWNCKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0U2hhcmVkU2VjcmV0OiBzZWNvbmQgYXJnIG11c3QgYmUgcHVibGljIGtleScpO1xuICAgIGNvbnN0IGIgPSBub3JtYWxpemVQdWJsaWNLZXkocHVibGljQik7XG4gICAgYi5hc3NlcnRWYWxpZGl0eSgpO1xuICAgIHJldHVybiBiLm11bHRpcGx5KG5vcm1hbGl6ZVByaXZhdGVLZXkocHJpdmF0ZUEpKS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG59XG5mdW5jdGlvbiBiaXRzMmludChieXRlcykge1xuICAgIGNvbnN0IHNsaWNlID0gYnl0ZXMubGVuZ3RoID4gZmllbGRMZW4gPyBieXRlcy5zbGljZSgwLCBmaWVsZExlbikgOiBieXRlcztcbiAgICByZXR1cm4gYnl0ZXNUb051bWJlcihzbGljZSk7XG59XG5mdW5jdGlvbiBiaXRzMm9jdGV0cyhieXRlcykge1xuICAgIGNvbnN0IHoxID0gYml0czJpbnQoYnl0ZXMpO1xuICAgIGNvbnN0IHoyID0gbW9kKHoxLCBDVVJWRS5uKTtcbiAgICByZXR1cm4gaW50Mm9jdGV0cyh6MiA8IF8wbiA/IHoxIDogejIpO1xufVxuZnVuY3Rpb24gaW50Mm9jdGV0cyhudW0pIHtcbiAgICByZXR1cm4gbnVtVG8zMmIobnVtKTtcbn1cbmZ1bmN0aW9uIGluaXRTaWdBcmdzKG1zZ0hhc2gsIHByaXZhdGVLZXksIGV4dHJhRW50cm9weSkge1xuICAgIGlmIChtc2dIYXNoID09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgc2lnbjogZXhwZWN0ZWQgdmFsaWQgbWVzc2FnZSBoYXNoLCBub3QgXCIke21zZ0hhc2h9XCJgKTtcbiAgICBjb25zdCBoMSA9IGVuc3VyZUJ5dGVzKG1zZ0hhc2gpO1xuICAgIGNvbnN0IGQgPSBub3JtYWxpemVQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xuICAgIGNvbnN0IHNlZWRBcmdzID0gW2ludDJvY3RldHMoZCksIGJpdHMyb2N0ZXRzKGgxKV07XG4gICAgaWYgKGV4dHJhRW50cm9weSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChleHRyYUVudHJvcHkgPT09IHRydWUpXG4gICAgICAgICAgICBleHRyYUVudHJvcHkgPSB1dGlscy5yYW5kb21CeXRlcyhmaWVsZExlbik7XG4gICAgICAgIGNvbnN0IGUgPSBlbnN1cmVCeXRlcyhleHRyYUVudHJvcHkpO1xuICAgICAgICBpZiAoZS5sZW5ndGggIT09IGZpZWxkTGVuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzaWduOiBFeHBlY3RlZCAke2ZpZWxkTGVufSBieXRlcyBvZiBleHRyYSBkYXRhYCk7XG4gICAgICAgIHNlZWRBcmdzLnB1c2goZSk7XG4gICAgfVxuICAgIGNvbnN0IHNlZWQgPSBjb25jYXRCeXRlcyguLi5zZWVkQXJncyk7XG4gICAgY29uc3QgbSA9IGJpdHMyaW50KGgxKTtcbiAgICByZXR1cm4geyBzZWVkLCBtLCBkIH07XG59XG5mdW5jdGlvbiBmaW5hbGl6ZVNpZyhyZWNTaWcsIG9wdHMpIHtcbiAgICBjb25zdCB7IHNpZywgcmVjb3ZlcnkgfSA9IHJlY1NpZztcbiAgICBjb25zdCB7IGRlciwgcmVjb3ZlcmVkIH0gPSBPYmplY3QuYXNzaWduKHsgY2Fub25pY2FsOiB0cnVlLCBkZXI6IHRydWUgfSwgb3B0cyk7XG4gICAgY29uc3QgaGFzaGVkID0gZGVyID8gc2lnLnRvREVSUmF3Qnl0ZXMoKSA6IHNpZy50b0NvbXBhY3RSYXdCeXRlcygpO1xuICAgIHJldHVybiByZWNvdmVyZWQgPyBbaGFzaGVkLCByZWNvdmVyeV0gOiBoYXNoZWQ7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2VlZCwgbSwgZCB9ID0gaW5pdFNpZ0FyZ3MobXNnSGFzaCwgcHJpdktleSwgb3B0cy5leHRyYUVudHJvcHkpO1xuICAgIGNvbnN0IGRyYmcgPSBuZXcgSG1hY0RyYmcoaGFzaExlbiwgZ3JvdXBMZW4pO1xuICAgIGF3YWl0IGRyYmcucmVzZWVkKHNlZWQpO1xuICAgIGxldCBzaWc7XG4gICAgd2hpbGUgKCEoc2lnID0ga21kVG9TaWcoYXdhaXQgZHJiZy5nZW5lcmF0ZSgpLCBtLCBkLCBvcHRzLmNhbm9uaWNhbCkpKVxuICAgICAgICBhd2FpdCBkcmJnLnJlc2VlZCgpO1xuICAgIHJldHVybiBmaW5hbGl6ZVNpZyhzaWcsIG9wdHMpO1xufVxuZnVuY3Rpb24gc2lnblN5bmMobXNnSGFzaCwgcHJpdktleSwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBzZWVkLCBtLCBkIH0gPSBpbml0U2lnQXJncyhtc2dIYXNoLCBwcml2S2V5LCBvcHRzLmV4dHJhRW50cm9weSk7XG4gICAgY29uc3QgZHJiZyA9IG5ldyBIbWFjRHJiZyhoYXNoTGVuLCBncm91cExlbik7XG4gICAgZHJiZy5yZXNlZWRTeW5jKHNlZWQpO1xuICAgIGxldCBzaWc7XG4gICAgd2hpbGUgKCEoc2lnID0ga21kVG9TaWcoZHJiZy5nZW5lcmF0ZVN5bmMoKSwgbSwgZCwgb3B0cy5jYW5vbmljYWwpKSlcbiAgICAgICAgZHJiZy5yZXNlZWRTeW5jKCk7XG4gICAgcmV0dXJuIGZpbmFsaXplU2lnKHNpZywgb3B0cyk7XG59XG5leHBvcnQgeyBzaWduLCBzaWduU3luYyB9O1xuY29uc3Qgdm9wdHMgPSB7IHN0cmljdDogdHJ1ZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeShzaWduYXR1cmUsIG1zZ0hhc2gsIHB1YmxpY0tleSwgb3B0cyA9IHZvcHRzKSB7XG4gICAgbGV0IHNpZztcbiAgICB0cnkge1xuICAgICAgICBzaWcgPSBub3JtYWxpemVTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgICAgICAgbXNnSGFzaCA9IGVuc3VyZUJ5dGVzKG1zZ0hhc2gpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IHIsIHMgfSA9IHNpZztcbiAgICBpZiAob3B0cy5zdHJpY3QgJiYgc2lnLmhhc0hpZ2hTKCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBoID0gdHJ1bmNhdGVIYXNoKG1zZ0hhc2gpO1xuICAgIGxldCBQO1xuICAgIHRyeSB7XG4gICAgICAgIFAgPSBub3JtYWxpemVQdWJsaWNLZXkocHVibGljS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyBuIH0gPSBDVVJWRTtcbiAgICBjb25zdCBzaW52ID0gaW52ZXJ0KHMsIG4pO1xuICAgIGNvbnN0IHUxID0gbW9kKGggKiBzaW52LCBuKTtcbiAgICBjb25zdCB1MiA9IG1vZChyICogc2ludiwgbik7XG4gICAgY29uc3QgUiA9IFBvaW50LkJBU0UubXVsdGlwbHlBbmRBZGRVbnNhZmUoUCwgdTEsIHUyKTtcbiAgICBpZiAoIVIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCB2ID0gbW9kKFIueCwgbik7XG4gICAgcmV0dXJuIHYgPT09IHI7XG59XG5mdW5jdGlvbiBzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUoY2gpIHtcbiAgICByZXR1cm4gbW9kKGJ5dGVzVG9OdW1iZXIoY2gpLCBDVVJWRS5uKTtcbn1cbmNsYXNzIFNjaG5vcnJTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKHIsIHMpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5zID0gcztcbiAgICAgICAgdGhpcy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBlbnN1cmVCeXRlcyhoZXgpO1xuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSA2NClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFNjaG5vcnJTaWduYXR1cmUuZnJvbUhleDogZXhwZWN0ZWQgNjQgYnl0ZXMsIG5vdCAke2J5dGVzLmxlbmd0aH1gKTtcbiAgICAgICAgY29uc3QgciA9IGJ5dGVzVG9OdW1iZXIoYnl0ZXMuc3ViYXJyYXkoMCwgMzIpKTtcbiAgICAgICAgY29uc3QgcyA9IGJ5dGVzVG9OdW1iZXIoYnl0ZXMuc3ViYXJyYXkoMzIsIDY0KSk7XG4gICAgICAgIHJldHVybiBuZXcgU2Nobm9yclNpZ25hdHVyZShyLCBzKTtcbiAgICB9XG4gICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFpc1ZhbGlkRmllbGRFbGVtZW50KHIpIHx8ICFpc1dpdGhpbkN1cnZlT3JkZXIocykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlJyk7XG4gICAgfVxuICAgIHRvSGV4KCkge1xuICAgICAgICByZXR1cm4gbnVtVG8zMmJTdHIodGhpcy5yKSArIG51bVRvMzJiU3RyKHRoaXMucyk7XG4gICAgfVxuICAgIHRvUmF3Qnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHRoaXMudG9IZXgoKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2Nobm9yckdldFB1YmxpY0tleShwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuIFBvaW50LmZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpLnRvUmF3WCgpO1xufVxuY2xhc3MgSW50ZXJuYWxTY2hub3JyU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwcml2YXRlS2V5LCBhdXhSYW5kID0gdXRpbHMucmFuZG9tQnl0ZXMoKSkge1xuICAgICAgICBpZiAobWVzc2FnZSA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgc2lnbjogRXhwZWN0ZWQgdmFsaWQgbWVzc2FnZSwgbm90IFwiJHttZXNzYWdlfVwiYCk7XG4gICAgICAgIHRoaXMubSA9IGVuc3VyZUJ5dGVzKG1lc3NhZ2UpO1xuICAgICAgICBjb25zdCB7IHgsIHNjYWxhciB9ID0gdGhpcy5nZXRTY2FsYXIobm9ybWFsaXplUHJpdmF0ZUtleShwcml2YXRlS2V5KSk7XG4gICAgICAgIHRoaXMucHggPSB4O1xuICAgICAgICB0aGlzLmQgPSBzY2FsYXI7XG4gICAgICAgIHRoaXMucmFuZCA9IGVuc3VyZUJ5dGVzKGF1eFJhbmQpO1xuICAgICAgICBpZiAodGhpcy5yYW5kLmxlbmd0aCAhPT0gMzIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaWduOiBFeHBlY3RlZCAzMiBieXRlcyBvZiBhdXggcmFuZG9tbmVzcycpO1xuICAgIH1cbiAgICBnZXRTY2FsYXIocHJpdikge1xuICAgICAgICBjb25zdCBwb2ludCA9IFBvaW50LmZyb21Qcml2YXRlS2V5KHByaXYpO1xuICAgICAgICBjb25zdCBzY2FsYXIgPSBwb2ludC5oYXNFdmVuWSgpID8gcHJpdiA6IENVUlZFLm4gLSBwcml2O1xuICAgICAgICByZXR1cm4geyBwb2ludCwgc2NhbGFyLCB4OiBwb2ludC50b1Jhd1goKSB9O1xuICAgIH1cbiAgICBpbml0Tm9uY2UoZCwgdDBoKSB7XG4gICAgICAgIHJldHVybiBudW1UbzMyYihkIF4gYnl0ZXNUb051bWJlcih0MGgpKTtcbiAgICB9XG4gICAgZmluYWxpemVOb25jZShrMGgpIHtcbiAgICAgICAgY29uc3QgazAgPSBtb2QoYnl0ZXNUb051bWJlcihrMGgpLCBDVVJWRS5uKTtcbiAgICAgICAgaWYgKGswID09PSBfMG4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NpZ246IENyZWF0aW9uIG9mIHNpZ25hdHVyZSBmYWlsZWQuIGsgaXMgemVybycpO1xuICAgICAgICBjb25zdCB7IHBvaW50OiBSLCB4OiByeCwgc2NhbGFyOiBrIH0gPSB0aGlzLmdldFNjYWxhcihrMCk7XG4gICAgICAgIHJldHVybiB7IFIsIHJ4LCBrIH07XG4gICAgfVxuICAgIGZpbmFsaXplU2lnKFIsIGssIGUsIGQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hub3JyU2lnbmF0dXJlKFIueCwgbW9kKGsgKyBlICogZCwgQ1VSVkUubikpLnRvUmF3Qnl0ZXMoKTtcbiAgICB9XG4gICAgZXJyb3IoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogSW52YWxpZCBzaWduYXR1cmUgcHJvZHVjZWQnKTtcbiAgICB9XG4gICAgYXN5bmMgY2FsYygpIHtcbiAgICAgICAgY29uc3QgeyBtLCBkLCBweCwgcmFuZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdGFnID0gdXRpbHMudGFnZ2VkSGFzaDtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuaW5pdE5vbmNlKGQsIGF3YWl0IHRhZyhUQUdTLmF1eCwgcmFuZCkpO1xuICAgICAgICBjb25zdCB7IFIsIHJ4LCBrIH0gPSB0aGlzLmZpbmFsaXplTm9uY2UoYXdhaXQgdGFnKFRBR1Mubm9uY2UsIHQsIHB4LCBtKSk7XG4gICAgICAgIGNvbnN0IGUgPSBzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUoYXdhaXQgdGFnKFRBR1MuY2hhbGxlbmdlLCByeCwgcHgsIG0pKTtcbiAgICAgICAgY29uc3Qgc2lnID0gdGhpcy5maW5hbGl6ZVNpZyhSLCBrLCBlLCBkKTtcbiAgICAgICAgaWYgKCEoYXdhaXQgc2Nobm9yclZlcmlmeShzaWcsIG0sIHB4KSkpXG4gICAgICAgICAgICB0aGlzLmVycm9yKCk7XG4gICAgICAgIHJldHVybiBzaWc7XG4gICAgfVxuICAgIGNhbGNTeW5jKCkge1xuICAgICAgICBjb25zdCB7IG0sIGQsIHB4LCByYW5kIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWcgPSB1dGlscy50YWdnZWRIYXNoU3luYztcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuaW5pdE5vbmNlKGQsIHRhZyhUQUdTLmF1eCwgcmFuZCkpO1xuICAgICAgICBjb25zdCB7IFIsIHJ4LCBrIH0gPSB0aGlzLmZpbmFsaXplTm9uY2UodGFnKFRBR1Mubm9uY2UsIHQsIHB4LCBtKSk7XG4gICAgICAgIGNvbnN0IGUgPSBzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUodGFnKFRBR1MuY2hhbGxlbmdlLCByeCwgcHgsIG0pKTtcbiAgICAgICAgY29uc3Qgc2lnID0gdGhpcy5maW5hbGl6ZVNpZyhSLCBrLCBlLCBkKTtcbiAgICAgICAgaWYgKCFzY2hub3JyVmVyaWZ5U3luYyhzaWcsIG0sIHB4KSlcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIHNpZztcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBzY2hub3JyU2lnbihtc2csIHByaXZLZXksIGF1eFJhbmQpIHtcbiAgICByZXR1cm4gbmV3IEludGVybmFsU2Nobm9yclNpZ25hdHVyZShtc2csIHByaXZLZXksIGF1eFJhbmQpLmNhbGMoKTtcbn1cbmZ1bmN0aW9uIHNjaG5vcnJTaWduU3luYyhtc2csIHByaXZLZXksIGF1eFJhbmQpIHtcbiAgICByZXR1cm4gbmV3IEludGVybmFsU2Nobm9yclNpZ25hdHVyZShtc2csIHByaXZLZXksIGF1eFJhbmQpLmNhbGNTeW5jKCk7XG59XG5mdW5jdGlvbiBpbml0U2Nobm9yclZlcmlmeShzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmxpY0tleSkge1xuICAgIGNvbnN0IHJhdyA9IHNpZ25hdHVyZSBpbnN0YW5jZW9mIFNjaG5vcnJTaWduYXR1cmU7XG4gICAgY29uc3Qgc2lnID0gcmF3ID8gc2lnbmF0dXJlIDogU2Nobm9yclNpZ25hdHVyZS5mcm9tSGV4KHNpZ25hdHVyZSk7XG4gICAgaWYgKHJhdylcbiAgICAgICAgc2lnLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc2lnLFxuICAgICAgICBtOiBlbnN1cmVCeXRlcyhtZXNzYWdlKSxcbiAgICAgICAgUDogbm9ybWFsaXplUHVibGljS2V5KHB1YmxpY0tleSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZpbmFsaXplU2Nobm9yclZlcmlmeShyLCBQLCBzLCBlKSB7XG4gICAgY29uc3QgUiA9IFBvaW50LkJBU0UubXVsdGlwbHlBbmRBZGRVbnNhZmUoUCwgbm9ybWFsaXplUHJpdmF0ZUtleShzKSwgbW9kKC1lLCBDVVJWRS5uKSk7XG4gICAgaWYgKCFSIHx8ICFSLmhhc0V2ZW5ZKCkgfHwgUi54ICE9PSByKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5hc3luYyBmdW5jdGlvbiBzY2hub3JyVmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyByLCBzLCBtLCBQIH0gPSBpbml0U2Nobm9yclZlcmlmeShzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmxpY0tleSk7XG4gICAgICAgIGNvbnN0IGUgPSBzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUoYXdhaXQgdXRpbHMudGFnZ2VkSGFzaChUQUdTLmNoYWxsZW5nZSwgbnVtVG8zMmIociksIFAudG9SYXdYKCksIG0pKTtcbiAgICAgICAgcmV0dXJuIGZpbmFsaXplU2Nobm9yclZlcmlmeShyLCBQLCBzLCBlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBzY2hub3JyVmVyaWZ5U3luYyhzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmxpY0tleSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgciwgcywgbSwgUCB9ID0gaW5pdFNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpO1xuICAgICAgICBjb25zdCBlID0gc2Nobm9yckNoYWxsZW5nZUZpbmFsaXplKHV0aWxzLnRhZ2dlZEhhc2hTeW5jKFRBR1MuY2hhbGxlbmdlLCBudW1UbzMyYihyKSwgUC50b1Jhd1goKSwgbSkpO1xuICAgICAgICByZXR1cm4gZmluYWxpemVTY2hub3JyVmVyaWZ5KHIsIFAsIHMsIGUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU2hhRXJyb3IpXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBzY2hub3JyID0ge1xuICAgIFNpZ25hdHVyZTogU2Nobm9yclNpZ25hdHVyZSxcbiAgICBnZXRQdWJsaWNLZXk6IHNjaG5vcnJHZXRQdWJsaWNLZXksXG4gICAgc2lnbjogc2Nobm9yclNpZ24sXG4gICAgdmVyaWZ5OiBzY2hub3JyVmVyaWZ5LFxuICAgIHNpZ25TeW5jOiBzY2hub3JyU2lnblN5bmMsXG4gICAgdmVyaWZ5U3luYzogc2Nobm9yclZlcmlmeVN5bmMsXG59O1xuUG9pbnQuQkFTRS5fc2V0V2luZG93U2l6ZSg4KTtcbmNvbnN0IGNyeXB0byA9IHtcbiAgICBub2RlOiBub2RlQ3J5cHRvLFxuICAgIHdlYjogdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmICdjcnlwdG8nIGluIHNlbGYgPyBzZWxmLmNyeXB0byA6IHVuZGVmaW5lZCxcbn07XG5jb25zdCBUQUdTID0ge1xuICAgIGNoYWxsZW5nZTogJ0JJUDAzNDAvY2hhbGxlbmdlJyxcbiAgICBhdXg6ICdCSVAwMzQwL2F1eCcsXG4gICAgbm9uY2U6ICdCSVAwMzQwL25vbmNlJyxcbn07XG5jb25zdCBUQUdHRURfSEFTSF9QUkVGSVhFUyA9IHt9O1xuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICAgIGJ5dGVzVG9IZXgsXG4gICAgaGV4VG9CeXRlcyxcbiAgICBjb25jYXRCeXRlcyxcbiAgICBtb2QsXG4gICAgaW52ZXJ0LFxuICAgIGlzVmFsaWRQcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZVByaXZhdGVLZXkocHJpdmF0ZUtleSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2JpZ2ludFRvMzJCeXRlczogbnVtVG8zMmIsXG4gICAgX25vcm1hbGl6ZVByaXZhdGVLZXk6IG5vcm1hbGl6ZVByaXZhdGVLZXksXG4gICAgaGFzaFRvUHJpdmF0ZUtleTogKGhhc2gpID0+IHtcbiAgICAgICAgaGFzaCA9IGVuc3VyZUJ5dGVzKGhhc2gpO1xuICAgICAgICBjb25zdCBtaW5MZW4gPSBncm91cExlbiArIDg7XG4gICAgICAgIGlmIChoYXNoLmxlbmd0aCA8IG1pbkxlbiB8fCBoYXNoLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsaWQgYnl0ZXMgb2YgcHJpdmF0ZSBrZXkgYXMgcGVyIEZJUFMgMTg2YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtID0gbW9kKGJ5dGVzVG9OdW1iZXIoaGFzaCksIENVUlZFLm4gLSBfMW4pICsgXzFuO1xuICAgICAgICByZXR1cm4gbnVtVG8zMmIobnVtKTtcbiAgICB9LFxuICAgIHJhbmRvbUJ5dGVzOiAoYnl0ZXNMZW5ndGggPSAzMikgPT4ge1xuICAgICAgICBpZiAoY3J5cHRvLndlYikge1xuICAgICAgICAgICAgcmV0dXJuIGNyeXB0by53ZWIuZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3J5cHRvLm5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmFuZG9tQnl0ZXMgfSA9IGNyeXB0by5ub2RlO1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShyYW5kb21CeXRlcyhieXRlc0xlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSByYW5kb21CeXRlcyBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmFuZG9tUHJpdmF0ZUtleTogKCkgPT4gdXRpbHMuaGFzaFRvUHJpdmF0ZUtleSh1dGlscy5yYW5kb21CeXRlcyhncm91cExlbiArIDgpKSxcbiAgICBwcmVjb21wdXRlKHdpbmRvd1NpemUgPSA4LCBwb2ludCA9IFBvaW50LkJBU0UpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gcG9pbnQgPT09IFBvaW50LkJBU0UgPyBwb2ludCA6IG5ldyBQb2ludChwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgY2FjaGVkLl9zZXRXaW5kb3dTaXplKHdpbmRvd1NpemUpO1xuICAgICAgICBjYWNoZWQubXVsdGlwbHkoXzNuKTtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9LFxuICAgIHNoYTI1NjogYXN5bmMgKC4uLm1lc3NhZ2VzKSA9PiB7XG4gICAgICAgIGlmIChjcnlwdG8ud2ViKSB7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjcnlwdG8ud2ViLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBjb25jYXRCeXRlcyguLi5tZXNzYWdlcykpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3J5cHRvLm5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gY3J5cHRvLm5vZGU7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgnc2hhMjU2Jyk7XG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKChtKSA9PiBoYXNoLnVwZGF0ZShtKSk7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGhhc2guZGlnZXN0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSBzaGEyNTYgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGhtYWNTaGEyNTY6IGFzeW5jIChrZXksIC4uLm1lc3NhZ2VzKSA9PiB7XG4gICAgICAgIGlmIChjcnlwdG8ud2ViKSB7XG4gICAgICAgICAgICBjb25zdCBja2V5ID0gYXdhaXQgY3J5cHRvLndlYi5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBrZXksIHsgbmFtZTogJ0hNQUMnLCBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IH0sIGZhbHNlLCBbJ3NpZ24nXSk7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gY29uY2F0Qnl0ZXMoLi4ubWVzc2FnZXMpO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3J5cHRvLndlYi5zdWJ0bGUuc2lnbignSE1BQycsIGNrZXksIG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3J5cHRvLm5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY3JlYXRlSG1hYyB9ID0gY3J5cHRvLm5vZGU7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gY3JlYXRlSG1hYygnc2hhMjU2Jywga2V5KTtcbiAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2goKG0pID0+IGhhc2gudXBkYXRlKG0pKTtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oaGFzaC5kaWdlc3QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIGhtYWMtc2hhMjU2IGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzaGEyNTZTeW5jOiB1bmRlZmluZWQsXG4gICAgaG1hY1NoYTI1NlN5bmM6IHVuZGVmaW5lZCxcbiAgICB0YWdnZWRIYXNoOiBhc3luYyAodGFnLCAuLi5tZXNzYWdlcykgPT4ge1xuICAgICAgICBsZXQgdGFnUCA9IFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ107XG4gICAgICAgIGlmICh0YWdQID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ0ggPSBhd2FpdCB1dGlscy5zaGEyNTYoVWludDhBcnJheS5mcm9tKHRhZywgKGMpID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuICAgICAgICAgICAgdGFnUCA9IGNvbmNhdEJ5dGVzKHRhZ0gsIHRhZ0gpO1xuICAgICAgICAgICAgVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXSA9IHRhZ1A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWxzLnNoYTI1Nih0YWdQLCAuLi5tZXNzYWdlcyk7XG4gICAgfSxcbiAgICB0YWdnZWRIYXNoU3luYzogKHRhZywgLi4ubWVzc2FnZXMpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBfc2hhMjU2U3luYyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBTaGFFcnJvcignc2hhMjU2U3luYyBpcyB1bmRlZmluZWQsIHlvdSBuZWVkIHRvIHNldCBpdCcpO1xuICAgICAgICBsZXQgdGFnUCA9IFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ107XG4gICAgICAgIGlmICh0YWdQID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ0ggPSBfc2hhMjU2U3luYyhVaW50OEFycmF5LmZyb20odGFnLCAoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4gICAgICAgICAgICB0YWdQID0gY29uY2F0Qnl0ZXModGFnSCwgdGFnSCk7XG4gICAgICAgICAgICBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddID0gdGFnUDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3NoYTI1NlN5bmModGFnUCwgLi4ubWVzc2FnZXMpO1xuICAgIH0sXG4gICAgX0phY29iaWFuUG9pbnQ6IEphY29iaWFuUG9pbnQsXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXModXRpbHMsIHtcbiAgICBzaGEyNTZTeW5jOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc2hhMjU2U3luYztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgICAgaWYgKCFfc2hhMjU2U3luYylcbiAgICAgICAgICAgICAgICBfc2hhMjU2U3luYyA9IHZhbDtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGhtYWNTaGEyNTZTeW5jOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfaG1hY1NoYTI1NlN5bmM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICAgIGlmICghX2htYWNTaGEyNTZTeW5jKVxuICAgICAgICAgICAgICAgIF9obWFjU2hhMjU2U3luYyA9IHZhbDtcbiAgICAgICAgfSxcbiAgICB9LFxufSk7XG4iLCJpbXBvcnQgeyBiZWNoMzIgfSBmcm9tICdiZWNoMzInO1xuXG5jb25zdCB1dGY4RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKVxuY29uc3QgaGV4ZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNTYgfSwgKHYsIGkpID0+IGkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpO1xuXG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICBsZXQgYnl0ZXMgPSBbXTtcbiAgZm9yIChsZXQgYyA9IDA7IGMgPCBoZXgubGVuZ3RoOyBjICs9IDIpXG4gICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb3RlSWQoaGV4SWQpIHtcbiAgY29uc3QgYmIgPSBoZXhUb0J5dGVzKGhleElkKTtcbiAgY29uc3Qgd29yZHMgPSBiZWNoMzIudG9Xb3JkcyhiYik7XG4gIHJldHVybiBiZWNoMzIuZW5jb2RlKCdub3RlJywgd29yZHMsIDEyMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROcHViKGhleFB1YmtleSkge1xuICBjb25zdCBiYiA9IGhleFRvQnl0ZXMoaGV4UHVia2V5KTtcbiAgY29uc3Qgd29yZHMgPSBiZWNoMzIudG9Xb3JkcyhiYik7XG4gIHJldHVybiBiZWNoMzIuZW5jb2RlKCducHViJywgd29yZHMsIDEyMCk7XG59XG5cbmZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcykge1xuICByZXR1cm4gYmVjaDMyLmZyb21Xb3Jkcyh3b3JkcylcbiAgICAubWFwKChieXRlcykgPT4gYnl0ZXMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOb3RlSWQobm90ZUlkKSB7XG4gIGNvbnN0IHIgPSBiZWNoMzIuZGVjb2RlKG5vdGVJZCwgMTIwKTtcbiAgaWYgKHIucHJlZml4ICE9IFwibm90ZVwiKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIGZyb21Xb3JkcyhyLndvcmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnB1YihucHViKSB7XG4gIGNvbnN0IHIgPSBiZWNoMzIuZGVjb2RlKG5wdWIsIDEyMCk7XG4gIGlmIChyLnByZWZpeCAhPSBcIm5wdWJcIikgcmV0dXJuIFwiXCI7XG4gIHJldHVybiBmcm9tV29yZHMoci53b3Jkcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5wcm9maWxlKG5wcm9maWxlKSB7XG4gIGNvbnN0IHIgPSBiZWNoMzIuZGVjb2RlKG5wcm9maWxlLCAzMDApO1xuICBpZiAoci5wcmVmaXggIT0gXCJucHJvZmlsZVwiKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYmVjaDMyLmZyb21Xb3JkcyhyLndvcmRzKSlcbiAgY29uc3QgdGx2ID0gcGFyc2VUTFYoZGF0YSk7XG4gIGlmICghdGx2WzBdPy5bMF0pIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBUTFYgMCBmb3IgbnByb2ZpbGUnKVxuICBpZiAodGx2WzBdWzBdLmxlbmd0aCAhPT0gMzIpIHRocm93IG5ldyBFcnJvcignVExWIDAgc2hvdWxkIGJlIDMyIGJ5dGVzJylcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICducHJvZmlsZScsXG4gICAgZGF0YToge1xuICAgICAgcHVia2V5OiBieXRlc1RvSGV4KHRsdlswXVswXSksXG4gICAgICByZWxheXM6IHRsdlsxXSA/IHRsdlsxXS5tYXAoZCA9PiB1dGY4RGVjb2Rlci5kZWNvZGUoZCkpIDogW11cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmFkZHIobmFkZHIpIHtcblxuICBpZiAoIW5hZGRyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgciA9IGJlY2gzMi5kZWNvZGUobmFkZHIsIDMwMClcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGJlY2gzMi5mcm9tV29yZHMoci53b3JkcykpXG4gIGNvbnN0IHRsdiA9IHBhcnNlVExWKGRhdGEpO1xuXG4gIGlmICghdGx2WzBdPy5bMF0pIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBUTFYgMCBmb3IgbmFkZHInKVxuICBpZiAoIXRsdlsyXT8uWzBdKSB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgVExWIDIgZm9yIG5hZGRyJylcbiAgaWYgKHRsdlsyXVswXS5sZW5ndGggIT09IDMyKSB0aHJvdyBuZXcgRXJyb3IoJ1RMViAyIHNob3VsZCBiZSAzMiBieXRlcycpXG4gIGlmICghdGx2WzNdPy5bMF0pIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBUTFYgMyBmb3IgbmFkZHInKVxuICBpZiAodGx2WzNdWzBdLmxlbmd0aCAhPT0gNCkgdGhyb3cgbmV3IEVycm9yKCdUTFYgMyBzaG91bGQgYmUgNCBieXRlcycpXG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbmFkZHInLFxuICAgIGRhdGE6IHtcbiAgICAgIGlkZW50aWZpZXI6IHV0ZjhEZWNvZGVyLmRlY29kZSh0bHZbMF1bMF0pLFxuICAgICAgcHVia2V5OiBieXRlc1RvSGV4KHRsdlsyXVswXSksXG4gICAgICBraW5kOiBwYXJzZUludChieXRlc1RvSGV4KHRsdlszXVswXSksIDE2KSxcbiAgICAgIHJlbGF5czogdGx2WzFdID8gdGx2WzFdLm1hcChkID0+IHV0ZjhEZWNvZGVyLmRlY29kZShkKSkgOiBbXVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TnB1YihucHViKSB7XG4gIHJldHVybiBgJHtucHViLnNsaWNlKFxuICAgIDAsXG4gICAgMTJcbiAgKX0uLi4ke25wdWIuc2xpY2UoLTQpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXROb3RlSWQobm90ZUlkKSB7XG4gIHJldHVybiBgJHtub3RlSWQuc2xpY2UoXG4gICAgMCxcbiAgICAxMCxcbiAgKX0uLi4ke25vdGVJZC5zbGljZSgtNCl9YDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0WmFwQW1vdW50KGEpIHtcbiAgYSAvPSAxMDAwO1xuICBpZiAoYSA+PSAxMDAwMDAwKSByZXR1cm4gKE1hdGgucm91bmQoYSAvIDEwMDAwMCkgLyAxMCkgKyBcIk1cIjtcbiAgaWYgKGEgPj0gMTAwMCkgcmV0dXJuIChNYXRoLnJvdW5kKGEgLyAxMDApIC8gMTApICsgXCJLXCI7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRMVihkYXRhKSB7XG4gIGxldCByZXN1bHQgPSB7fVxuICBsZXQgcmVzdCA9IGRhdGFcbiAgd2hpbGUgKHJlc3QubGVuZ3RoID4gMCkge1xuICAgIGxldCB0ID0gcmVzdFswXVxuICAgIGxldCBsID0gcmVzdFsxXVxuICAgIGxldCB2ID0gcmVzdC5zbGljZSgyLCAyICsgbClcbiAgICByZXN0ID0gcmVzdC5zbGljZSgyICsgbClcbiAgICBpZiAodi5sZW5ndGggPCBsKSBjb250aW51ZVxuICAgIHJlc3VsdFt0XSA9IHJlc3VsdFt0XSB8fCBbXVxuICAgIHJlc3VsdFt0XS5wdXNoKHYpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBieXRlc1RvSGV4KHVpbnQ4YSkge1xuICAvLyBwcmUtY2FjaGluZyBpbXByb3ZlcyB0aGUgc3BlZWQgNnhcbiAgaWYgKCEodWludDhhIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICBsZXQgaGV4ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdWludDhhLmxlbmd0aDsgaSsrKSB7XG4gICAgaGV4ICs9IGhleGVzW3VpbnQ4YVtpXV07XG4gIH1cbiAgcmV0dXJuIGhleDtcbn1cbiIsImltcG9ydHtvcHRpb25zIGFzIG59ZnJvbVwicHJlYWN0XCI7dmFyIHQscix1LGksbz0wLGY9W10sYz1bXSxlPW4uX19iLGE9bi5fX3Isdj1uLmRpZmZlZCxsPW4uX19jLG09bi51bm1vdW50O2Z1bmN0aW9uIGQodCx1KXtuLl9faCYmbi5fX2gocix0LG98fHUpLG89MDt2YXIgaT1yLl9fSHx8KHIuX19IPXtfXzpbXSxfX2g6W119KTtyZXR1cm4gdD49aS5fXy5sZW5ndGgmJmkuX18ucHVzaCh7X19WOmN9KSxpLl9fW3RdfWZ1bmN0aW9uIGgobil7cmV0dXJuIG89MSxzKEIsbil9ZnVuY3Rpb24gcyhuLHUsaSl7dmFyIG89ZCh0KyssMik7aWYoby50PW4sIW8uX19jJiYoby5fXz1baT9pKHUpOkIodm9pZCAwLHUpLGZ1bmN0aW9uKG4pe3ZhciB0PW8uX19OP28uX19OWzBdOm8uX19bMF0scj1vLnQodCxuKTt0IT09ciYmKG8uX19OPVtyLG8uX19bMV1dLG8uX19jLnNldFN0YXRlKHt9KSl9XSxvLl9fYz1yLCFyLnUpKXt2YXIgZj1mdW5jdGlvbihuLHQscil7aWYoIW8uX19jLl9fSClyZXR1cm4hMDt2YXIgdT1vLl9fYy5fX0guX18uZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuLl9fY30pO2lmKHUuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIW4uX19OfSkpcmV0dXJuIWN8fGMuY2FsbCh0aGlzLG4sdCxyKTt2YXIgaT0hMTtyZXR1cm4gdS5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKG4uX19OKXt2YXIgdD1uLl9fWzBdO24uX189bi5fX04sbi5fX049dm9pZCAwLHQhPT1uLl9fWzBdJiYoaT0hMCl9fSksISghaSYmby5fX2MucHJvcHM9PT1uKSYmKCFjfHxjLmNhbGwodGhpcyxuLHQscikpfTtyLnU9ITA7dmFyIGM9ci5zaG91bGRDb21wb25lbnRVcGRhdGUsZT1yLmNvbXBvbmVudFdpbGxVcGRhdGU7ci5jb21wb25lbnRXaWxsVXBkYXRlPWZ1bmN0aW9uKG4sdCxyKXtpZih0aGlzLl9fZSl7dmFyIHU9YztjPXZvaWQgMCxmKG4sdCxyKSxjPXV9ZSYmZS5jYWxsKHRoaXMsbix0LHIpfSxyLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mfXJldHVybiBvLl9fTnx8by5fX31mdW5jdGlvbiBwKHUsaSl7dmFyIG89ZCh0KyssMyk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19ILl9faC5wdXNoKG8pKX1mdW5jdGlvbiB5KHUsaSl7dmFyIG89ZCh0KyssNCk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19oLnB1c2gobykpfWZ1bmN0aW9uIF8obil7cmV0dXJuIG89NSxGKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBBKG4sdCxyKXtvPTYseShmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KG4odCgpKSxmdW5jdGlvbigpe3JldHVybiBuKG51bGwpfSk6bj8obi5jdXJyZW50PXQoKSxmdW5jdGlvbigpe3JldHVybiBuLmN1cnJlbnQ9bnVsbH0pOnZvaWQgMH0sbnVsbD09cj9yOnIuY29uY2F0KG4pKX1mdW5jdGlvbiBGKG4scil7dmFyIHU9ZCh0KyssNyk7cmV0dXJuIHoodS5fX0gscik/KHUuX19WPW4oKSx1Lmk9cix1Ll9faD1uLHUuX19WKTp1Ll9ffWZ1bmN0aW9uIFQobix0KXtyZXR1cm4gbz04LEYoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gcShuKXt2YXIgdT1yLmNvbnRleHRbbi5fX2NdLGk9ZCh0KyssOSk7cmV0dXJuIGkuYz1uLHU/KG51bGw9PWkuX18mJihpLl9fPSEwLHUuc3ViKHIpKSx1LnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIHgodCxyKXtuLnVzZURlYnVnVmFsdWUmJm4udXNlRGVidWdWYWx1ZShyP3IodCk6dCl9ZnVuY3Rpb24gUChuKXt2YXIgdT1kKHQrKywxMCksaT1oKCk7cmV0dXJuIHUuX189bixyLmNvbXBvbmVudERpZENhdGNofHwoci5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuLHQpe3UuX18mJnUuX18obix0KSxpWzFdKG4pfSksW2lbMF0sZnVuY3Rpb24oKXtpWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiBWKCl7dmFyIG49ZCh0KyssMTEpO2lmKCFuLl9fKXtmb3IodmFyIHU9ci5fX3Y7bnVsbCE9PXUmJiF1Ll9fbSYmbnVsbCE9PXUuX187KXU9dS5fXzt2YXIgaT11Ll9fbXx8KHUuX19tPVswLDBdKTtuLl9fPVwiUFwiK2lbMF0rXCItXCIraVsxXSsrfXJldHVybiBuLl9ffWZ1bmN0aW9uIGIoKXtmb3IodmFyIHQ7dD1mLnNoaWZ0KCk7KWlmKHQuX19QJiZ0Ll9fSCl0cnl7dC5fX0guX19oLmZvckVhY2goayksdC5fX0guX19oLmZvckVhY2godyksdC5fX0guX19oPVtdfWNhdGNoKHIpe3QuX19ILl9faD1bXSxuLl9fZShyLHQuX192KX19bi5fX2I9ZnVuY3Rpb24obil7cj1udWxsLGUmJmUobil9LG4uX19yPWZ1bmN0aW9uKG4pe2EmJmEobiksdD0wO3ZhciBpPShyPW4uX19jKS5fX0g7aSYmKHU9PT1yPyhpLl9faD1bXSxyLl9faD1bXSxpLl9fLmZvckVhY2goZnVuY3Rpb24obil7bi5fX04mJihuLl9fPW4uX19OKSxuLl9fVj1jLG4uX19OPW4uaT12b2lkIDB9KSk6KGkuX19oLmZvckVhY2goayksaS5fX2guZm9yRWFjaCh3KSxpLl9faD1bXSx0PTApKSx1PXJ9LG4uZGlmZmVkPWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJihvLl9fSC5fX2gubGVuZ3RoJiYoMSE9PWYucHVzaChvKSYmaT09PW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwoKGk9bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpfHxqKShiKSksby5fX0guX18uZm9yRWFjaChmdW5jdGlvbihuKXtuLmkmJihuLl9fSD1uLmkpLG4uX19WIT09YyYmKG4uX189bi5fX1YpLG4uaT12b2lkIDAsbi5fX1Y9Y30pKSx1PXI9bnVsbH0sbi5fX2M9ZnVuY3Rpb24odCxyKXtyLnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goayksdC5fX2g9dC5fX2guZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiFuLl9ffHx3KG4pfSl9Y2F0Y2godSl7ci5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pfSkscj1bXSxuLl9fZSh1LHQuX192KX19KSxsJiZsKHQscil9LG4udW5tb3VudD1mdW5jdGlvbih0KXttJiZtKHQpO3ZhciByLHU9dC5fX2M7dSYmdS5fX0gmJih1Ll9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3RyeXtrKG4pfWNhdGNoKG4pe3I9bn19KSx1Ll9fSD12b2lkIDAsciYmbi5fX2Uocix1Ll9fdikpfTt2YXIgZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ZnVuY3Rpb24gaihuKXt2YXIgdCxyPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpLGcmJmNhbmNlbEFuaW1hdGlvbkZyYW1lKHQpLHNldFRpbWVvdXQobil9LHU9c2V0VGltZW91dChyLDEwMCk7ZyYmKHQ9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpKX1mdW5jdGlvbiBrKG4pe3ZhciB0PXIsdT1uLl9fYztcImZ1bmN0aW9uXCI9PXR5cGVvZiB1JiYobi5fX2M9dm9pZCAwLHUoKSkscj10fWZ1bmN0aW9uIHcobil7dmFyIHQ9cjtuLl9fYz1uLl9fKCkscj10fWZ1bmN0aW9uIHoobix0KXtyZXR1cm4hbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQhPT1uW3JdfSl9ZnVuY3Rpb24gQihuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fWV4cG9ydHtUIGFzIHVzZUNhbGxiYWNrLHEgYXMgdXNlQ29udGV4dCx4IGFzIHVzZURlYnVnVmFsdWUscCBhcyB1c2VFZmZlY3QsUCBhcyB1c2VFcnJvckJvdW5kYXJ5LFYgYXMgdXNlSWQsQSBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlLHkgYXMgdXNlTGF5b3V0RWZmZWN0LEYgYXMgdXNlTWVtbyxzIGFzIHVzZVJlZHVjZXIsXyBhcyB1c2VSZWYsaCBhcyB1c2VTdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnR7b3B0aW9ucyBhcyByfWZyb21cInByZWFjdFwiO2V4cG9ydHtGcmFnbWVudH1mcm9tXCJwcmVhY3RcIjt2YXIgXz0wO2Z1bmN0aW9uIG8obyxlLG4sdCxmLGwpe3ZhciBzLHUsYT17fTtmb3IodSBpbiBlKVwicmVmXCI9PXU/cz1lW3VdOmFbdV09ZVt1XTt2YXIgaT17dHlwZTpvLHByb3BzOmEsa2V5Om4scmVmOnMsX19rOm51bGwsX186bnVsbCxfX2I6MCxfX2U6bnVsbCxfX2Q6dm9pZCAwLF9fYzpudWxsLF9faDpudWxsLGNvbnN0cnVjdG9yOnZvaWQgMCxfX3Y6LS1fLF9fc291cmNlOmYsX19zZWxmOmx9O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG8mJihzPW8uZGVmYXVsdFByb3BzKSlmb3IodSBpbiBzKXZvaWQgMD09PWFbdV0mJihhW3VdPXNbdV0pO3JldHVybiByLnZub2RlJiZyLnZub2RlKGkpLGl9ZXhwb3J0e28gYXMganN4LG8gYXMganN4REVWLG8gYXMganN4c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc3hSdW50aW1lLm1vZHVsZS5qcy5tYXBcbiIsImZ1bmN0aW9uIENvcHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdjb3B5SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTguMjUgNy41VjYuMTA4YzAtMS4xMzUuODQ1LTIuMDk4IDEuOTc2LTIuMTkyLjM3My0uMDMuNzQ4LS4wNTcgMS4xMjMtLjA4TTE1Ljc1IDE4SDE4YTIuMjUgMi4yNSAwIDAwMi4yNS0yLjI1VjYuMTA4YzAtMS4xMzUtLjg0NS0yLjA5OC0xLjk3Ni0yLjE5MmE0OC40MjQgNDguNDI0IDAgMDAtMS4xMjMtLjA4TTE1Ljc1IDE4Ljc1di0xLjg3NWEzLjM3NSAzLjM3NSAwIDAwLTMuMzc1LTMuMzc1aC0xLjVhMS4xMjUgMS4xMjUgMCAwMS0xLjEyNS0xLjEyNXYtMS41QTMuMzc1IDMuMzc1IDAgMDA2LjM3NSA3LjVINS4yNW0xMS45LTMuNjY0QTIuMjUxIDIuMjUxIDAgMDAxNSAyLjI1aC0xLjVhMi4yNTEgMi4yNTEgMCAwMC0yLjE1IDEuNTg2bTUuOCAwYy4wNjUuMjEuMS40MzMuMS42NjR2Ljc1aC02VjQuNWMwLS4yMzEuMDM1LS40NTQuMS0uNjY0TTYuNzUgNy41SDQuODc1Yy0uNjIxIDAtMS4xMjUuNTA0LTEuMTI1IDEuMTI1djEyYzAgLjYyMS41MDQgMS4xMjUgMS4xMjUgMS4xMjVoOS43NWMuNjIxIDAgMS4xMjUtLjUwNCAxLjEyNS0xLjEyNVYxNi41YTkgOSAwIDAwLTktOXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weUljb247XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBDb3B5SWNvbiBmcm9tICcuL2ljb25zL2NvcHlJY29uLmpzeCc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS5jc3MnO1xuXG5mdW5jdGlvbiBDb3B5VGV4dCh7IGljb25DbGFzc2VzLCBkaXNwbGF5VGV4dCwgY29weVRleHQgfSkge1xuICBjb25zdCBbYnRuQ2xhc3Nlcywgc2V0QnRuQ2xhc3Nlc10gPSB1c2VTdGF0ZSgnbGlua0NvcHlCdG4nKTtcblxuICBmdW5jdGlvbiBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvcHlUZXh0KTtcbiAgICAgIHNldEJ0bkNsYXNzZXMoYCR7YnRuQ2xhc3Nlc30gZ3JlZW5gKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRCdG5DbGFzc2VzKGJ0bkNsYXNzZXMucmVwbGFjZSgnZ3JlZW4nLCAnJykudHJpbSgpKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29weTogJywgZXJyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxidXR0b24gY2xhc3M9e2J0bkNsYXNzZXN9IG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZCgpfT5cbiAgICAgIDxDb3B5SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz17aWNvbkNsYXNzZXN9IC8+XG5cbiAgICAgIHtkaXNwbGF5VGV4dCAmJiA8c3BhbiBjbGFzcz1cImRpc3BsYXlUZXh0XCI+e2Rpc3BsYXlUZXh0fTwvc3Bhbj59XG4gICAgICA8c3BhbiBjbGFzcz1cImNvcHlUZXh0XCI+e2NvcHlUZXh0fTwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weVRleHQ7XG4iLCJmdW5jdGlvbiBLZXlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdrZXlJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxcmVtXCJcbiAgICAgIGhlaWdodD1cIjFyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTUuNzUgNS4yNWEzIDMgMCAwMTMgM20zIDBhNiA2IDAgMDEtNy4wMjkgNS45MTJjLS41NjMtLjA5Ny0xLjE1OS4wMjYtMS41NjMuNDNMMTAuNSAxNy4yNUg4LjI1djIuMjVINnYyLjI1SDIuMjV2LTIuODE4YzAtLjU5Ny4yMzctMS4xNy42NTktMS41OTFsNi40OTktNi40OTljLjQwNC0uNDA0LjUyNy0xIC40My0xLjU2M0E2IDYgMCAxMTIxLjc1IDguMjV6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleUljb247XG4iLCJmdW5jdGlvbiBOb3N0cmljaEljb24oeyBhZGRpdGlvbmFsQ2xhc3NlcyB9KSB7XG4gIGxldCBjbGFzc2VzID0gJ25vc3RyaWNoSWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcblxuICAgIDxzdmdcbiAgICAgIHdpZHRoPVwiM3JlbVwiXG4gICAgICBoZWlnaHQ9XCIzcmVtXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNjc0IDc2OVwiXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoIGQ9XCJNNTY3LjcyOSAzMjQuOTY3QzU4Mi45NDYgNDI4LjA4NCA0NzUuNzk1IDQ0OS40NjUgNDE1LjAyNyA0NDcuMzE4QzQxMS43MDUgNDQ3LjIgNDA4LjU3IDQ0OC44MTkgNDA2LjYzMSA0NTEuNTE5QzQwMC4zODcgNDYwLjIxNCAzODkuOTU2IDQ3Mi4wMTcgMzgxLjk1OCA0NzIuMDE3QzM3My4xMjcgNDcyLjAxNyAzNjUuMTkxIDQ4OS4yMTcgMzYxLjY3NSA0OTkuNjIxQzM2MS4zNiA1MDAuNTU1IDM2Mi4yNzkgNTAxLjQxNCAzNjMuMjE2IDUwMS4xMUM0NTkuODUyIDQ2OS43MTkgNDk3LjczNyA0NTguOTU0IDUxNC4wNDYgNDYxLjk3NEM1MjcuMTk0IDQ2NC40MDkgNTUxLjc4NSA1MDguNDM4IDU2Mi40MzcgNTMwLjE0OEM1MzUuOTU5IDUzMS42NyA1MjcuMTMzIDUwNy45MzEgNTIxLjA0NiA1MDMuNjdDNTE2LjE3NiA1MDAuMjYxIDUxNC4zNSA1MTUuODQ0IDUxNC4wNDYgNTI0LjA2MUM1MDguMjYzIDUyMS4wMTggNTAwLjk1OSA1MTYuNzU3IDUwMC4zNSA1MDMuNjdDNDk5Ljc0MSA0OTAuNTgzIDQ5My4wNDYgNDkzLjkzMSA0ODcuODcyIDQ5NC41MzlDNDgyLjY5OCA0OTUuMTQ4IDQwMy4yNjMgNTIwLjcxMyAzOTEuMzkzIDUyNC4wNjFDMzc5LjUyMyA1MjcuNDA5IDM2NS44MjggNTMxLjk3NCAzNTQuNTY3IDUzOS44ODdDMzM1LjY5NyA1NDkuMDE4IDMyMy41MjMgNTQyLjYyNiAzMjAuMTc1IDUyNy4xMDVDMzE3LjQ5NyA1MTQuNjg3IDMzNC44ODYgNDc2LjQ4MSAzNDMuOTE1IDQ1OC45M0MzMzIuNzU1IDQ2My4wOSAzMDkuNTg0IDQ3MS41MyAzMDYuMTc1IDQ3Mi4wMTdDMzAyLjg1NCA0NzIuNDkyIDI2MC41NDcgNTA1LjE3MiAyMzguMjAzIDUyMi43MDdDMjM3LjA5MSA1MjMuNTggMjM2LjM4IDUyNC44NDkgMjM2LjEzNCA1MjYuMjQxQzIzMi42MjcgNTQ2LjA1NCAyMjEuMTU3IDU1MS41MTYgMjAxLjE3NSA1NjEuOEMxODUuMTE3IDU3MC4wNjYgMTI4LjgyMiA2NTYuNjg0IDEwMC4yNzIgNzAyLjgwM0M5OC41ODU4IDcwNS41MjYgOTYuMTEyNiA3MDcuNjI5IDkzLjQyMDIgNzA5LjM2M0M3NC45Njg2IDcyMS4yNDkgNTYuMDE3OSA3NTMuMDEzIDQ4LjM5MTUgNzY4LjQ1M0MzNy42Nzg0IDczNy41MzIgNTEuNjM3OSA3MTAuOTMxIDU5Ljk1NjggNzAxLjQ5N0M1Ni4zMDQ2IDY5OC4zMzEgNDcuODg0MyA3MDAuMTc4IDQ0LjEzMDYgNzAxLjQ5N0M1NC40Nzg1IDY2NS44ODggOTAuNjk2MSA2NjUuODg4IDg5LjQ3ODcgNjY1Ljg4OEM5Ni4xNzQ0IDY2MC4xMDUgMTc0LjY5NiA1NDcuOCAxNzYuNTIzIDU0Mi42MjZDMTc4LjMzNiA1MzcuNDg4IDE3NS4zNDYgNTEzLjQzNiAyMTQuOTYyIDUwMC4yODdDMjE1LjQ5NSA1MDAuMTEgMjE2LjAyNCA0OTkuODY2IDIxNi40OTcgNDk5LjU2M0MyNDcuMzA2IDQ3OS44MDIgMjcwLjQyMyA0NDcuODY5IDI3OC4xNzUgNDM0LjI3OEMyMzYuNDYyIDQzMS40MDkgMTg4LjU5NiA0MDcuODE2IDE2NC4zNjYgMzkzLjE1MkMxNTkuODczIDM5MC40MzIgMTU1LjA3NyAzODguMTA1IDE0OS44NzEgMzg3LjQwN0MxMTUuNzY0IDM4Mi44MzUgODEuMzI4NSA0MDQuNzkxIDY3LjU2NTUgNDE3LjIzNUM2MS45NjU1IDQwOS40NDMgNjguMjc1NyAzODYuOCA3Mi4xMzA4IDM3Ni40NTJDNTguNDk1OSAzNzQuNTA0IDM4LjQ0OTUgMzk0LjMwNyAzMC4xMzA2IDQwNC40NTJDMjEuMTIxOCAzOTAuMzMgMjkuMDE0NiAzNjUuMDg5IDM0LjA4NzEgMzU0LjIzNEMxNi4wNjk2IDM1NC43MjEgMy44NTUwOSAzNjIuOTU5IDAgMzY3LjAxN0MxNC45MTMxIDI1NS45MyAxMjguOTg0IDI4OC4yMzcgMTMwLjI2MSAyODkuNzEyQzEyNC4xNzQgMjgzLjM4MiAxMjQuNjgyIDI3NS4xMDQgMTI1LjY5NiAyNzEuNzU2QzE5NC43ODMgMjczLjU4MiAyMjcuMDQ1IDI2Mi4wMTcgMjQ3LjQzNiAyNTAuMTQ3QzQwOC4xMzIgMTYwLjM2NCA0NzcuMzcyIDIxNS40NTEgNTAyLjkzNyAyMjkuMjk5QzUyOC41MDIgMjQzLjE0NyA1NzQuOTE2IDI0OC43NzcgNjA3LjAyNSAyMzUuOTk1QzY0NS4zNzMgMjE4LjY0NyA2MzkuNTk5IDE3My45MyA2MzEuODI5IDE1Ni44NjRDNjIzLjMwNyAxMzguMTQ2IDU3NS4yMiAxMTIuMjc2IDU1OC4xNzYgNzkuNTU5MUM1NDEuMTMzIDQ2Ljg0MjIgNTU1LjgyNSA1LjkzNzg5IDU3NS43MjggMS41MTA2MUM1OTQuODAyIC0yLjczMjEzIDYwNy45NzUgMi4zNzM4MyA2MTguMjg1IDExLjY4OTFDNjI1LjE1OSAxNy44OTk0IDY0NC40NiAyMi4zNDEzIDY1Mi41MjUgMjUuMjMyNkM2NjAuNTkgMjguMTIzOSA2NzMuOTgxIDMxLjkyODMgNjczLjIyMSAzNC4yMTA5QzY3Mi40NiAzNi40OTM1IDY1OS41NDggMzYuMTg4OSA2NTcuNTQ3IDM2LjE4ODlDNjUzLjQzOCAzNi4xODg5IDY0OC41NjggMzYuNzk3NiA2NTMuNDM4IDM5LjA4MDJDNjU5LjI0MyA0MS40MzQ4IDY2OC4wNTMgNDQuODc0NSA2NzIuMDk1IDQ3LjA4OEM2NzIuNTQ5IDQ3LjMzNjYgNjcyLjQ1NCA0Ny45NzkxIDY3MS45NTUgNDguMTE1NkM2NDMuODU4IDU1Ljc5OCA2MTguNzY4IDQwLjExMDggNjAwLjE3NyA1OC4xMDJDNTgxLjMwNyA3Ni4zNjMgNjIxLjQ4MSA5MC4zNjMgNjQyLjE3NyAxMTIuMjc2QzY2Mi44NzMgMTM0LjE4OSA2ODQuMTc3IDE2MC4zNjMgNjY3LjEzNCAyMjAuMDE2QzY1My44NzQgMjY2LjQyNCA1OTguMDkzIDMwNS44NDggNTY5LjY1NCAzMjEuMDQ1QzU2OC4yNTUgMzIxLjc5MyA1NjcuNDk3IDMyMy4zOTggNTY3LjcyOSAzMjQuOTY3WlwiIGZpbGw9XCIjN0EzQkZGXCIvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOb3N0cmljaEljb247XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbmZ1bmN0aW9uIFByb2ZpbGVJbWFnZSh7IHRodW1ibmFpbCwgZnVsbEltYWdlLCBpc1Byb2ZpbGVJbWFnZSA9IHRydWUgfSkge1xuICBjb25zdCBbaXNGdWxsSW1hZ2VMb2FkZWQsIHNldElzRnVsbEltYWdlTG9hZGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZSh0aHVtYm5haWwpO1xuXG4gIGNvbnN0IG9uRXJyb3IgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0Z1bGxJbWFnZUxvYWRlZCkge1xuICAgICAgc2V0SW1hZ2VTcmMoZnVsbEltYWdlKTtcbiAgICAgIHNldElzRnVsbEltYWdlTG9hZGVkKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbWFnZVNyYyhudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGltYWdlU3JjID8gKFxuICAgIDxpbWcgY2xhc3NOYW1lPXtpc1Byb2ZpbGVJbWFnZSA/IFwicHJvZmlsZUltZyBcIiA6IFwiZm9sbG93ZWRQcm9kaWxlSW1nXCJcbiAgICB9IHNyYz17aW1hZ2VTcmN9IG9uRXJyb3I9e29uRXJyb3J9IC8+XG4gICkgOiAoXG4gICAgPGRpdiBjbGFzcz1cInByb2ZpbGVXaXRob3V0SW1nXCIgLz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZmlsZUltYWdlO1xuIiwiaW1wb3J0IHsgZm9ybWF0TnB1YiwgZ2V0TnB1YiB9IGZyb20gXCIuLi91dGlscy9jb21tb25cIjtcbmltcG9ydCBDb3B5VGV4dCBmcm9tIFwiLi9jb3B5VGV4dC5qc3hcIjtcbmltcG9ydCBLZXlJY29uIGZyb20gXCIuL2ljb25zL2tleUljb24uanN4XCI7XG5pbXBvcnQgTm9zdHJpY2hJY29uIGZyb20gXCIuL2ljb25zL25vc3RyaWNoSWNvbi5qc3hcIjtcbmltcG9ydCBQcm9maWxlSW1hZ2UgZnJvbSBcIi4vcHJvZmlsZUltYWdlLmpzeFwiO1xuXG5mdW5jdGlvbiBQcm9maWxlKHsgcHJvZmlsZVBrZXksIHByb2ZpbGUsIG9wdGlvbnMgfSkge1xuICBsZXQgY2FjaGVkUHJvZmlsZVBpY3R1cmUsIGVuY29kZWRQcm9maWxlUGtleSwgdHJ1bmNhdGVkUHJvZmlsZVBrZXk7XG4gIGlmIChwcm9maWxlUGtleSkge1xuICAgIGVuY29kZWRQcm9maWxlUGtleSA9IGdldE5wdWIocHJvZmlsZVBrZXkpO1xuICAgIHRydW5jYXRlZFByb2ZpbGVQa2V5ID0gYCR7Zm9ybWF0TnB1YihlbmNvZGVkUHJvZmlsZVBrZXkpfWA7XG4gICAgY2FjaGVkUHJvZmlsZVBpY3R1cmUgPSBgaHR0cHM6Ly9tZWRpYS5ub3N0ci5iYW5kL3RodW1icy8ke3Byb2ZpbGVQa2V5LnNsaWNlKFxuICAgICAgLTRcbiAgICApfS8ke3Byb2ZpbGVQa2V5fS1waWN0dXJlLTY0YDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkUHJvZmlsZVwiPlxuICAgICAge2NhY2hlZFByb2ZpbGVQaWN0dXJlICYmIHByb2ZpbGUucGljdHVyZSA/IChcbiAgICAgICAgPFByb2ZpbGVJbWFnZVxuICAgICAgICAgIHRodW1ibmFpbD17Y2FjaGVkUHJvZmlsZVBpY3R1cmV9XG4gICAgICAgICAgZnVsbEltYWdlPXtwcm9maWxlLnBpY3R1cmV9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVXaXRob3V0SW1nXCIgLz5cbiAgICAgICl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVEZXRhaWxzXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZmlsZU5hbWVcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIlxuICAgICAgICAgICAgaHJlZj17YGh0dHBzOi8vbm9zdHIuYmFuZC8ke2VuY29kZWRQcm9maWxlUGtleX1gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9maWxlPy5kaXNwbGF5X25hbWUgfHwgcHJvZmlsZT8ubmFtZSB8fCBcIkxvYWRpbmcuLi5cIn1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVQa2V5XCI+XG4gICAgICAgICAgPEtleUljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwa2V5XCI+e3RydW5jYXRlZFByb2ZpbGVQa2V5IHx8IFwibnB1Yi4uLlwifTwvc3Bhbj5cbiAgICAgICAgICA8Q29weVRleHQgaWNvbkNsYXNzZXM9XCJ3LTQgaC00XCIgY29weVRleHQ9e2VuY29kZWRQcm9maWxlUGtleX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAge29wdGlvbnMgJiYgIW9wdGlvbnMuaGlkZU5vc3RyaWNoID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vc3RyaWNoTGlua1wiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgICAgICBocmVmPXtgaHR0cHM6Ly9uanVtcC5tZWB9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJsaW5rTGlua1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPE5vc3RyaWNoSWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogbnVsbH1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZmlsZTtcbiIsImZ1bmN0aW9uIEJvbHRJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdib2x0SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTMuNzUgMTMuNWwxMC41LTExLjI1TDEyIDEwLjVoOC4yNUw5Ljc1IDIxLjc1IDEyIDEzLjVIMy43NXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9sdEljb247XG4iLCJmdW5jdGlvbiBIZWFydEljb24oeyBhZGRpdGlvbmFsQ2xhc3NlcyB9KSB7XG4gIGxldCBjbGFzc2VzID0gJ2hlYXJ0SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHdpZHRoPVwiMS4yNXJlbVwiXG4gICAgICBoZWlnaHQ9XCIxLjI1cmVtXCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTIxIDguMjVjMC0yLjQ4NS0yLjA5OS00LjUtNC42ODgtNC41LTEuOTM1IDAtMy41OTcgMS4xMjYtNC4zMTIgMi43MzMtLjcxNS0xLjYwNy0yLjM3Ny0yLjczMy00LjMxMy0yLjczM0M1LjEgMy43NSAzIDUuNzY1IDMgOC4yNWMwIDcuMjIgOSAxMiA5IDEyczktNC43OCA5LTEyelwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFydEljb247XG4iLCJmdW5jdGlvbiBMaW5rSWNvbih7IGFkZGl0aW9uYWxDbGFzc2VzIH0pIHtcbiAgbGV0IGNsYXNzZXMgPSAnbGlua0ljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0xMy4xOSA4LjY4OGE0LjUgNC41IDAgMDExLjI0MiA3LjI0NGwtNC41IDQuNWE0LjUgNC41IDAgMDEtNi4zNjQtNi4zNjRsMS43NTctMS43NTdtMTMuMzUtLjYyMmwxLjc1Ny0xLjc1N2E0LjUgNC41IDAgMDAtNi4zNjQtNi4zNjRsLTQuNSA0LjVhNC41IDQuNSAwIDAwMS4yNDIgNy4yNDRcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbmV4cG9ydCBkZWZhdWx0IExpbmtJY29uO1xuIiwiZnVuY3Rpb24gUmVwbHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBseUljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0yMC4yNSA4LjUxMWMuODg0LjI4NCAxLjUgMS4xMjggMS41IDIuMDk3djQuMjg2YzAgMS4xMzYtLjg0NyAyLjEtMS45OCAyLjE5My0uMzQuMDI3LS42OC4wNTItMS4wMi4wNzJ2My4wOTFsLTMtM2MtMS4zNTQgMC0yLjY5NC0uMDU1LTQuMDItLjE2M2EyLjExNSAyLjExNSAwIDAxLS44MjUtLjI0Mm05LjM0NS04LjMzNGEyLjEyNiAyLjEyNiAwIDAwLS40NzYtLjA5NSA0OC42NCA0OC42NCAwIDAwLTguMDQ4IDBjLTEuMTMxLjA5NC0xLjk3NiAxLjA1Ny0xLjk3NiAyLjE5MnY0LjI4NmMwIC44MzcuNDYgMS41OCAxLjE1NSAxLjk1MW05LjM0NS04LjMzNFY2LjYzN2MwLTEuNjIxLTEuMTUyLTMuMDI2LTIuNzYtMy4yMzVBNDguNDU1IDQ4LjQ1NSAwIDAwMTEuMjUgM2MtMi4xMTUgMC00LjE5OC4xMzctNi4yNC40MDItMS42MDguMjA5LTIuNzYgMS42MTQtMi43NiAzLjIzNXY2LjIyNmMwIDEuNjIxIDEuMTUyIDMuMDI2IDIuNzYgMy4yMzUuNTc3LjA3NSAxLjE1Ny4xNCAxLjc0LjE5NFYyMWw0LjE1NS00LjE1NVwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZXBseUljb247XG4iLCJmdW5jdGlvbiBSZXBvc3RJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBvc3RJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTYuMDIzIDkuMzQ4aDQuOTkydi0uMDAxTTIuOTg1IDE5LjY0NHYtNC45OTJtMCAwaDQuOTkybS00Ljk5MyAwbDMuMTgxIDMuMTgzYTguMjUgOC4yNSAwIDAwMTMuODAzLTMuN000LjAzMSA5Ljg2NWE4LjI1IDguMjUgMCAwMTEzLjgwMy0zLjdsMy4xODEgMy4xODJtMC00Ljk5MXY0Ljk5XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlcG9zdEljb247XG4iLCJpbXBvcnQgeyBmb3JtYXRaYXBBbW91bnQsIGdldE5vdGVJZCB9IGZyb20gXCIuLi91dGlscy9jb21tb25cIjtcbmltcG9ydCBDb3B5VGV4dCBmcm9tIFwiLi9jb3B5VGV4dC5qc3hcIjtcbmltcG9ydCBCb2x0SWNvbiBmcm9tIFwiLi9pY29ucy9ib2x0SWNvbi5qc3hcIjtcbmltcG9ydCBIZWFydEljb24gZnJvbSBcIi4vaWNvbnMvaGVhcnRJY29uLmpzeFwiO1xuaW1wb3J0IExpbmtJY29uIGZyb20gXCIuL2ljb25zL2xpbmtJY29uLmpzeFwiO1xuaW1wb3J0IFJlcGx5SWNvbiBmcm9tIFwiLi9pY29ucy9yZXBseUljb24uanN4XCI7XG5pbXBvcnQgUmVwb3N0SWNvbiBmcm9tIFwiLi9pY29ucy9yZXBvc3RJY29uLmpzeFwiO1xuXG5mdW5jdGlvbiBNZXRhKHtcbiAgbm90ZSxcbiAgcHJvZmlsZXNMaXN0LFxuICByZXBsaWVzQ291bnQsXG4gIHJlcG9zdHNDb3VudCxcbiAgbGlrZXNDb3VudCxcbiAgemFwQW1vdW50LFxuICBvcHRpb25zLFxufSkge1xuICBsZXQgZGF0ZSwgZW5jb2RlZElkLCBmb3JtYXR0ZWREYXRlLCBmb3JtYXR0ZWRaYXBBbW91bnQ7XG5cbiAgbGV0IGNyZWF0ZWRBdCA9IG5vdGVcbiAgICA/IG5vdGUuY3JlYXRlZF9hdFxuICAgIDogcHJvZmlsZXNMaXN0XG4gICAgICA/IHByb2ZpbGVzTGlzdC5jcmVhdGVkX2F0XG4gICAgICA6IG51bGw7XG4gIGlmIChjcmVhdGVkQXQpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoY3JlYXRlZEF0ICogMTAwMCk7XG4gICAgZm9ybWF0dGVkRGF0ZSA9IGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKFwiZW4tVVNcIiwge1xuICAgICAgaG91cjEyOiB0cnVlLFxuICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgIGRheTogJ251bWVyaWMnLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKG5vdGUgJiYgbm90ZS5pZCkge1xuICAgIGVuY29kZWRJZCA9IGdldE5vdGVJZChub3RlLmlkKTtcbiAgfVxuICBpZiAocHJvZmlsZXNMaXN0KSB7XG4gICAgZW5jb2RlZElkID0gcHJvZmlsZXNMaXN0LmlkO1xuICB9XG5cbiAgZm9ybWF0dGVkWmFwQW1vdW50ID0gZm9ybWF0WmFwQW1vdW50KHphcEFtb3VudCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRNZXRhXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmREYXRlXCI+e2Zvcm1hdHRlZERhdGV9PC9kaXY+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZEludGVyYWN0aW9uc1wiPlxuICAgICAgICB7b3B0aW9ucz8uaGlkZUNvdW50ZXJzID8gbnVsbCA6IDw+XG4gICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMuc2hvd1phcHMgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiIHRpdGxlPVwiVG90YWwgc2F0cyB6YXBwZWRcIj5cbiAgICAgICAgICAgIDxCb2x0SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTVcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiemFwQW1vdW50XCI+e2Zvcm1hdHRlZFphcEFtb3VudH08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludGVyYWN0aW9uQ29udGFpbmVyXCIgdGl0bGU9XCJOdW1iZXIgb2YgcmVwbGllc1wiPlxuICAgICAgICAgIDxSZXBseUljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZXBsaWVzQ291bnRcIj57cmVwbGllc0NvdW50fTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIiB0aXRsZT1cIk51bWJlciBvZiByZXBvc3RzXCI+XG4gICAgICAgICAgPFJlcG9zdEljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZXBvc3RzQ291bnRcIj57cmVwb3N0c0NvdW50fTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIiB0aXRsZT1cIk51bWJlciBvZiBsaWtlc1wiPlxuICAgICAgICAgIDxIZWFydEljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsaWtlc0NvdW50XCI+e2xpa2VzQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC8+fVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludGVyYWN0aW9uQ29udGFpbmVyXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCJcbiAgICAgICAgICAgIGhyZWY9e1xuICAgICAgICAgICAgICBub3RlXG4gICAgICAgICAgICAgICAgPyBgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7ZW5jb2RlZElkfWBcbiAgICAgICAgICAgICAgICA6IGBodHRwczovL2xpc3RyLmxvbC9hLyR7cHJvZmlsZXNMaXN0Lm5hZGRyfWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImxpbmtMaW5rXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGlua0ljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01IGhvdmVyOnRleHQtZ3JheS02MDBcIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZGlzcGxheVRleHRcIj5PcGVuPC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMuc2hvd0NvcHlBZGRyID8gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIj5cbiAgICAgICAgICAgIDxDb3B5VGV4dFxuICAgICAgICAgICAgICBpY29uQ2xhc3Nlcz1cInctNSBoLTVcIlxuICAgICAgICAgICAgICBkaXNwbGF5VGV4dD17bm90ZSA/IFwiQ29weSBOb3RlIElEXCIgOiBcIkNvcHkgSURcIn1cbiAgICAgICAgICAgICAgY29weVRleHQ9e25vdGUgPyBub3RlIDogcHJvZmlsZXNMaXN0Lm5hZGRyfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWV0YTtcbiIsImV4cG9ydCBjb25zdCBJTUFHRV9GSUxFX0VYVEVOU0lPTlMgPSBbXCIuanBnXCIsIFwiLmpwZWdcIiwgXCIucG5nXCIsIFwiLndlYnBcIiwgXCIuZ2lmXCJdO1xuZXhwb3J0IGNvbnN0IFZJREVPX0ZJTEVfRVhURU5TSU9OUyA9IFtcIi5tb3ZcIiwgXCIubXA0XCJdO1xuZXhwb3J0IGNvbnN0IFlPVVRVQkVfS0VZX1dPUkRTID0gW1wieW91dHViZVwiXTtcblxuZXhwb3J0IGNvbnN0IEtJTkRfTUVUQSA9IDA7XG5leHBvcnQgY29uc3QgS0lORF9OT1RFID0gMTtcbmV4cG9ydCBjb25zdCBLSU5EX0NPTlRBQ1RfTElTVCA9IDM7XG5leHBvcnQgY29uc3QgS0lORF9SRVBPU1QgPSA2O1xuZXhwb3J0IGNvbnN0IEtJTkRfUkVBQ1RJT04gPSA3O1xuZXhwb3J0IGNvbnN0IEtJTkRfWkFQID0gOTczNTtcbmV4cG9ydCBjb25zdCBLSU5EX1BST0ZJTEVfTElTVCA9IDMwMDAwOyIsImltcG9ydCBQcm9maWxlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3Byb2ZpbGUuanN4XCI7XG5pbXBvcnQgTWV0YSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9tZXRhLmpzeFwiO1xuaW1wb3J0IHtLSU5EX0NPTlRBQ1RfTElTVH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9jb25maWdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvZmlsZXNMaXN0KHtzdGF0ZSwgcHJvcHN9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJub3N0ckVtYmVkQ2FyZFwiPlxuICAgICAgPFByb2ZpbGVcbiAgICAgICAgcHJvZmlsZVBrZXk9eyBzdGF0ZT8uaWQuZGF0YS5wdWJrZXkgfVxuICAgICAgICBwcm9maWxlPXsgc3RhdGU/LnByb2ZpbGUgfVxuICAgICAgICBvcHRpb25zPXsgcHJvcHM/Lm9wdGlvbnMgfVxuICAgICAgLz5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMyBjbGFzc05hbWU9XCJjYXJkVGl0bGVcIj5cbiAgICAgICAgICB7IHN0YXRlPy5raW5kICE9PSBLSU5EX0NPTlRBQ1RfTElTVCAmJiBzdGF0ZT8ucHJvZmlsZXNMaXN0Lm5hbWVcbiAgICAgICAgICAgID8gc3RhdGU/LnByb2ZpbGVzTGlzdC5uYW1lXG4gICAgICAgICAgICA6IHN0YXRlPy5wcm9maWxlc0xpc3QuZCB9XG4gICAgICAgICAgeyBzdGF0ZT8ua2luZCA9PT0gS0lORF9DT05UQUNUX0xJU1QgJiYgXCJGb2xsb3dpbmcgXCIgfShcbiAgICAgICAgICB7IHN0YXRlPy50YWdnZWRQcm9maWxlcyA/IHN0YXRlPy5jb3VudFRhZ2dlZFByb2ZpbGVzIDogMCB9KVxuICAgICAgICA8L2gzPlxuICAgICAgICB7IHN0YXRlPy5raW5kICE9PSBLSU5EX0NPTlRBQ1RfTElTVCAmJiAoXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwiY2FyZERlc2NyaXB0aW9uXCI+eyBzdGF0ZT8ucHJvZmlsZXNMaXN0LmRlc2NyaXB0aW9uIH08L3A+XG4gICAgICAgICkgfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRMaXN0XCI+XG4gICAgICAgICAgeyBPYmplY3Qua2V5cyhzdGF0ZT8udGFnZ2VkUHJvZmlsZXMpLm1hcCgocHJvZmlsZVBrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXYga2V5PXsgcHJvZmlsZVBrZXkgKyBcInRhZ2dlZFByb2ZpbGVcIiB9PlxuICAgICAgICAgICAgICAgIDxQcm9maWxlXG4gICAgICAgICAgICAgICAgICBwcm9maWxlUGtleT17IHByb2ZpbGVQa2V5IH1cbiAgICAgICAgICAgICAgICAgIHByb2ZpbGU9eyBzdGF0ZT8udGFnZ2VkUHJvZmlsZXNbcHJvZmlsZVBrZXldIH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSkgfVxuICAgICAgICAgIHsgc3RhdGU/LmNvdW50VGFnZ2VkUHJvZmlsZXMgPiAwICYmXG4gICAgICAgICAgc3RhdGU/LmNvdW50VGFnZ2VkUHJvZmlsZXMgPlxuICAgICAgICAgIE9iamVjdC5rZXlzKHN0YXRlPy50YWdnZWRQcm9maWxlcykubGVuZ3RoID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaWZmUHJvZmlsZXNcIj5cbiAgICAgICAgICAgICAgQW5kIHsgZ2V0RGlmZihzdGF0ZSkgfSBtb3JlIHByb2ZpbGVzLlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IG51bGwgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgeyBzdGF0ZT8ucHJvZmlsZXNMaXN0LmVycm9yICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRDb250ZW50IG5lLXRleHQtcmVkLTgwMFwiPlxuICAgICAgICAgICAgeyBzdGF0ZT8ucHJvZmlsZXNMaXN0LmNvbnRlbnQgfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIH1cbiAgICAgIDwvZGl2PlxuICAgICAgPE1ldGFcbiAgICAgICAgcHJvZmlsZXNMaXN0PXsgc3RhdGU/LnByb2ZpbGVzTGlzdCB9XG4gICAgICAgIGxpa2VzQ291bnQ9eyBzdGF0ZT8ubGlrZXNDb3VudCB9XG4gICAgICAgIHJlcGxpZXNDb3VudD17IHN0YXRlPy5yZXBsaWVzQ291bnQgfVxuICAgICAgICByZXBvc3RzQ291bnQ9eyBzdGF0ZT8ucmVwb3N0c0NvdW50IH1cbiAgICAgICAgemFwQW1vdW50PXsgc3RhdGU/LnphcEFtb3VudCB9XG4gICAgICAgIG9wdGlvbnM9eyBwcm9wcz8ub3B0aW9ucyB9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIGdldERpZmYoc3RhdGUpIHtcbiAgbGV0IGRpZmY7XG4gIGlmIChPYmplY3Qua2V5cyhzdGF0ZT8udGFnZ2VkUHJvZmlsZXMpLmxlbmd0aCA+IDAgJiYgc3RhdGU/LmNvdW50VGFnZ2VkUHJvZmlsZXMpIHtcbiAgICBkaWZmID0gc3RhdGU/LmNvdW50VGFnZ2VkUHJvZmlsZXMgLSBPYmplY3Qua2V5cyhzdGF0ZT8udGFnZ2VkUHJvZmlsZXMpLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gZGlmZjtcbn1cbiIsImZ1bmN0aW9uIEZvbGxvd2Vyc0ljb24oeyBhZGRpdGlvbmFsQ2xhc3NlcyB9KSB7XG4gIGxldCBjbGFzc2VzID0gJ2ZvbGxvd2Vyc0ljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG5cbiAgICAgIDxzdmdcbiAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgIHdpZHRoPVwiMS4yNXJlbVwiXG4gICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgICA+XG4gICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0xNSAxOS4xMjhhOS4zOCA5LjM4IDAgMDAyLjYyNS4zNzIgOS4zMzcgOS4zMzcgMCAwMDQuMTIxLS45NTIgNC4xMjUgNC4xMjUgMCAwMC03LjUzMy0yLjQ5M00xNSAxOS4xMjh2LS4wMDNjMC0xLjExMy0uMjg1LTIuMTYtLjc4Ni0zLjA3TTE1IDE5LjEyOHYuMTA2QTEyLjMxOCAxMi4zMTggMCAwMTguNjI0IDIxYy0yLjMzMSAwLTQuNTEyLS42NDUtNi4zNzQtMS43NjZsLS4wMDEtLjEwOWE2LjM3NSA2LjM3NSAwIDAxMTEuOTY0LTMuMDdNMTIgNi4zNzVhMy4zNzUgMy4zNzUgMCAxMS02Ljc1IDAgMy4zNzUgMy4zNzUgMCAwMTYuNzUgMHptOC4yNSAyLjI1YTIuNjI1IDIuNjI1IDAgMTEtNS4yNSAwIDIuNjI1IDIuNjI1IDAgMDE1LjI1IDB6XCJcbiAgICAgICAvPlxuICAgICAgPC9zdmc+XG5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9sbG93ZXJzSWNvbjtcbiIsImltcG9ydCB7IGZvcm1hdFphcEFtb3VudCwgZ2V0TnB1YiB9IGZyb20gXCIuLi91dGlscy9jb21tb25cIjtcbmltcG9ydCBDb3B5VGV4dCBmcm9tIFwiLi9jb3B5VGV4dC5qc3hcIjtcbmltcG9ydCBCb2x0SWNvbiBmcm9tIFwiLi9pY29ucy9ib2x0SWNvbi5qc3hcIjtcbmltcG9ydCBGb2xsb3dlcnNJY29uIGZyb20gXCIuL2ljb25zL2ZvbGxvd2Vyc0ljb24uanN4XCI7XG5pbXBvcnQgTGlua0ljb24gZnJvbSBcIi4vaWNvbnMvbGlua0ljb24uanN4XCI7XG5cbmZ1bmN0aW9uIFByb2ZpbGVNZXRhKHsgcHJvZmlsZSwgZm9sbG93ZXJzQ291bnQsIHphcEFtb3VudCwgb3B0aW9ucyB9KSB7XG4gIGxldCBucHViLCBmb3JtYXR0ZWRaYXBBbW91bnQ7XG5cbiAgaWYgKHByb2ZpbGUgJiYgcHJvZmlsZS5wdWJrZXkpIHtcbiAgICBucHViID0gZ2V0TnB1Yihwcm9maWxlLnB1YmtleSk7XG4gICAgZm9ybWF0dGVkWmFwQW1vdW50ID0gZm9ybWF0WmFwQW1vdW50KHphcEFtb3VudCk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZE1ldGFcIj5cbiAgICAgIDxociAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkSW50ZXJhY3Rpb25zXCI+XG4gICAgICAgIHtvcHRpb25zPy5oaWRlQ291bnRlcnMgPyBudWxsIDogPD5cbiAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5zaG93WmFwcyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImludGVyYWN0aW9uQ29udGFpbmVyXCIgdGl0bGU9XCJUb3RhbCBzYXRzIHphcHBlZFwiPlxuICAgICAgICAgICAgPEJvbHRJY29uIGFkZGl0aW9uYWxDbGFzc2VzPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ6YXBBbW91bnRcIj57Zm9ybWF0dGVkWmFwQW1vdW50fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIiB0aXRsZT1cIk51bWJlciBvZiBmb2xsb3dlcnNcIj5cbiAgICAgICAgICA8Rm9sbG93ZXJzSWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTVcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZvbGxvd2Vyc0NvdW50XCI+e2ZvbGxvd2Vyc0NvdW50fTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPn1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiPlxuICAgICAgICAgIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIiBocmVmPXtgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7bnB1Yn1gfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibGlua0xpbmtcIj5cbiAgICAgICAgICAgIDxMaW5rSWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTUgaG92ZXI6dGV4dC1ncmF5LTYwMFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkaXNwbGF5VGV4dFwiPk9wZW48L3NwYW4+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5zaG93Q29weUFkZHIgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPENvcHlUZXh0XG4gICAgICAgICAgICAgIGljb25DbGFzc2VzPVwidy01IGgtNVwiXG4gICAgICAgICAgICAgIGRpc3BsYXlUZXh0PVwiQ29weSBOcHViXCJcbiAgICAgICAgICAgICAgY29weVRleHQ9e25wdWJ9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlTWV0YTtcbiIsImltcG9ydCB7IGdldE5wdWIgfSBmcm9tIFwiLi4vdXRpbHMvY29tbW9uXCI7XG5pbXBvcnQgUHJvZmlsZUltYWdlIGZyb20gXCIuL3Byb2ZpbGVJbWFnZS5qc3hcIjtcblxuY29uc3QgUHJvZmlsZUZvbGxvd3MgPSAoeyBmb2xsb3dzID0gW10sIG9wdGlvbnMgfSkgPT4ge1xuICAgIGlmICghb3B0aW9ucz8uc2hvd0ZvbGxvd2luZykgcmV0dXJuIDw+PC8+XG5cbiAgICBjb25zdCBnZXRDYWNoZWRJbWFnZSA9IChwdWJrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGBodHRwczovL21lZGlhLm5vc3RyLmJhbmQvdGh1bWJzLyR7cHVia2V5LnNsaWNlKC00KX0vJHtwdWJrZXl9LXBpY3R1cmUtNjRgXG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkRm9sbG93cyA9IGZvbGxvd3Muc2xpY2UoMCwgMTApLm1hcChmb2xsb3cgPT4ge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5wYXJzZShmb2xsb3cuY29udGVudClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBmb2xsb3c/LmlkLFxuICAgICAgICAgICAgbnB1Ykxpbms6IGBodHRwczovL25vc3RyLmJhbmQvJHtnZXROcHViKGZvbGxvdz8ucHVia2V5KX1gLFxuICAgICAgICAgICAgZGlzcGxheV9uYW1lOiBjb250ZW50Py5kaXNwbGF5X25hbWUsXG4gICAgICAgICAgICBwaWN0dXJlOiBjb250ZW50Py5waWN0dXJlLFxuICAgICAgICAgICAgY2FjaGVkSW1hZ2U6IGdldENhY2hlZEltYWdlKGZvbGxvdz8ucHVia2V5KSxcbiAgICAgICAgICAgIG5hbWU6IGNvbnRlbnQ/Lm5hbWVcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBmaWx0ZXJQcm9maWxlcyA9IHBhcnNlZEZvbGxvd3MuZmlsdGVyKHByb2ZpbGUgPT4gcHJvZmlsZS5uYW1lICYmIHByb2ZpbGUuZGlzcGxheV9uYW1lKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZS1mbGV4IG5lLWdhcC02IG5lLWZsZXgtd3JhcCBuZS1pdGVtcy1jZW50ZXIgbmUtbXQtOFwiPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuZS1saXN0LW5vbmUgbmUtcC0wIG5lLWZsZXggbmUtbXMtWzI1cHhdIG5lLW0tMCBuZS1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRm9sbG93cy5tYXAoZm9sbG93ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtmb2xsb3c/LmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT0nbmUtaW5saW5lLWJsb2NrJyByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj17Zm9sbG93Lm5wdWJMaW5rfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZUltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxJbWFnZT17Zm9sbG93Py5waWN0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw9e2ZvbGxvdz8uY2FjaGVkSW1hZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJvZmlsZUltYWdlPXtmYWxzZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwibmUtbS0wIG5lLWZvbnQtYm9sZCBuZS10ZXh0LWxnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBGb2xsb3dzIHtmb2xsb3dzLmxlbmd0aH0gcHJvZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZS1tLTAgbmUtdGV4dC1zbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgSW5jbHVkaW5nIHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzc05hbWU9J25lLXRleHQtYmxhY2snIGhyZWY9e2ZpbHRlclByb2ZpbGVzWzBdPy5ucHViTGlua30+e2ZpbHRlclByb2ZpbGVzWzBdPy5kaXNwbGF5X25hbWV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAge2ZpbHRlclByb2ZpbGVzWzFdID8gJywgJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzTmFtZT0nbmUtdGV4dC1ibGFjaycgaHJlZj17ZmlsdGVyUHJvZmlsZXNbMV0/Lm5wdWJMaW5rfT57ZmlsdGVyUHJvZmlsZXNbMV0/LmRpc3BsYXlfbmFtZX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZmlsdGVyUHJvZmlsZXNbMl0gPyAnIGFuZCAnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSByZWw9XCJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3NOYW1lPSduZS10ZXh0LWJsYWNrJyBocmVmPXtmaWx0ZXJQcm9maWxlc1syXT8ubnB1Ykxpbmt9PntmaWx0ZXJQcm9maWxlc1syXT8uZGlzcGxheV9uYW1lfTwvYT5cblxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGVGb2xsb3dzIiwiaW1wb3J0IFByb2ZpbGVNZXRhIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3Byb2ZpbGVNZXRhLmpzeFwiO1xuaW1wb3J0IFByb2ZpbGVGb2xsb3dzIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3Byb2ZpbGVGb2xsb3dzLmpzeFwiO1xuaW1wb3J0IFByb2ZpbGVDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wcm9maWxlLmpzeCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvZmlsZSh7c3RhdGUsIHByb3BzfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibm9zdHJFbWJlZENhcmRcIj5cbiAgICAgICAgPFByb2ZpbGVDb21wb25lbnRcbiAgICAgICAgICBwcm9maWxlUGtleT17c3RhdGU/LmlkfVxuICAgICAgICAgIHByb2ZpbGU9e3N0YXRlPy5wcm9maWxlfVxuICAgICAgICAgIG9wdGlvbnM9e3Byb3BzPy5vcHRpb25zfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAgIHN0YXRlPy5wcm9maWxlLmVycm9yXG4gICAgICAgICAgICAgID8gXCJjYXJkQ29udGVudCBuZS10ZXh0LXJlZC04MDBcIlxuICAgICAgICAgICAgICA6IFwiY2FyZENvbnRlbnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHtzdGF0ZT8ucHJvZmlsZT8ud2Vic2l0ZSA/IChcbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBXZWJzaXRlOntcIiBcIn1cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBocmVmPXtzdGF0ZT8ucHJvZmlsZT8ud2Vic2l0ZX1cbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3N0YXRlPy5wcm9maWxlPy53ZWJzaXRlfVxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICApfVxuICAgICAgICAgIHtzdGF0ZT8ucHJvZmlsZT8uYWJvdXQgfHwgXCJMb2FkaW5nLi4uXCJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7XG4gICAgICAgICAgQm9vbGVhbihzdGF0ZT8uZm9sbG93cy5sZW5ndGgpICYmIDxQcm9maWxlRm9sbG93cyBmb2xsb3dzPXtzdGF0ZT8uZm9sbG93c30gb3B0aW9ucz17cHJvcHM/Lm9wdGlvbnN9IC8+XG4gICAgICAgIH1cbiAgICAgICAgPFByb2ZpbGVNZXRhXG4gICAgICAgICAgcHJvZmlsZT17c3RhdGU/LnByb2ZpbGV9XG4gICAgICAgICAgZm9sbG93ZXJzQ291bnQ9e3N0YXRlPy5mb2xsb3dlcnNDb3VudH1cbiAgICAgICAgICB6YXBBbW91bnQ9e3N0YXRlPy56YXBBbW91bnR9XG4gICAgICAgICAgb3B0aW9ucz17cHJvcHM/Lm9wdGlvbnN9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgKVxufVxuIiwiXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWmFwKHtzdGF0ZX0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vc3RyRW1iZWRDYXJkXCI+XG4gICAgICBaYXAgY29udGVudDoge0pTT04uc3RyaW5naWZ5KHN0YXRlPy5ldmVudCl9XG4gICAgPC9kaXY+XG4gIClcbn0iLCJpbXBvcnQge2Zvcm1hdE5vdGVJZCwgZm9ybWF0TnB1YiwgZ2V0Tm90ZUlkLCBnZXROcHViLCBwYXJzZU5wcm9maWxlLCBwYXJzZU5wdWJ9IGZyb20gXCIuL2NvbW1vblwiO1xuaW1wb3J0IHtJTUFHRV9GSUxFX0VYVEVOU0lPTlMsIFZJREVPX0ZJTEVfRVhURU5TSU9OUywgWU9VVFVCRV9LRVlfV09SRFN9IGZyb20gXCIuLi9jb25maWcvY29uZmlnXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDb250ZW50KHN0YXRlKSB7XG4gIGlmICghc3RhdGU/LmV2ZW50LmNvbnRlbnQpIHJldHVybiBcIlwiO1xuXG4gIGNvbnN0IGZvcm1hdEV2ZW50TGluayA9IChub3RlT3JOYWRkcikgPT4ge1xuICAgIGNvbnN0IGxhYmVsID0gZm9ybWF0Tm90ZUlkKG5vdGVPck5hZGRyKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgIGhyZWY9eyBgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7IG5vdGVPck5hZGRyIH1gIH1cbiAgICAgID5cbiAgICAgICAgeyBsYWJlbCB9XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBmb3JtYXRQcm9maWxlTGluayA9IChucHViLCBwdWJrZXkpID0+IHtcbiAgICBsZXQgbGFiZWwgPSBmb3JtYXROcHViKG5wdWIpO1xuICAgIGlmIChwdWJrZXkgaW4gc3RhdGU/LnRhZ2dlZFByb2ZpbGVzKSB7XG4gICAgICBjb25zdCB0cCA9IHN0YXRlPy50YWdnZWRQcm9maWxlc1twdWJrZXldO1xuICAgICAgbGFiZWwgPSB0cD8ubmFtZSB8fCB0cD8uZGlzcGxheV9uYW1lIHx8IGxhYmVsO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgIGhyZWY9eyBgaHR0cHM6Ly9ub3N0ci5iYW5kLyR7IG5wdWIgfWAgfVxuICAgICAgPlxuICAgICAgICBAeyBsYWJlbCB9XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBub3RlID0gc3RhdGU/LmV2ZW50O1xuXG4gIGNvbnN0IE1lbnRpb25SZWdleCA9IC8oI1xcW1xcZCtcXF0pL2dpO1xuXG4gIC8vIGZpcnN0IC0gc3BsaXQgYnkgI1tkXSBtZW50aW9uc1xuICBjb25zdCBmcmFnbWVudHMgPSBub3RlLmNvbnRlbnQuc3BsaXQoTWVudGlvblJlZ2V4KS5tYXAoKG1hdGNoKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hUYWcgPSBtYXRjaC5tYXRjaCgvI1xcWyhcXGQrKVxcXS8pO1xuICAgIGlmIChtYXRjaFRhZyAmJiBtYXRjaFRhZy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IGlkeCA9IHBhcnNlSW50KG1hdGNoVGFnWzFdKTtcbiAgICAgIGlmIChpZHggPCBub3RlLnRhZ3MubGVuZ3RoICYmIG5vdGUudGFnc1tpZHhdLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIGNvbnN0IHJlZiA9IG5vdGUudGFnc1tpZHhdO1xuICAgICAgICBzd2l0Y2ggKHJlZlswXSkge1xuICAgICAgICAgIGNhc2UgXCJwXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRQcm9maWxlTGluayhnZXROcHViKHJlZlsxXSksIHJlZlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRFdmVudExpbmsoZ2V0Tm90ZUlkKHJlZlsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBub3QgYWRkaW5nIHN1cHBvcnQgZm9yICdhJyAtIHRvbyBtdWNoIGNvZGUgdG8gZm9ybWF0IHRoZSBuYWRkcixcbiAgICAgICAgICAvLyBhbmQgdGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgc28gbGV0J3MgaG9wZSB3ZSB3b24ndCBuZWVkIHRoaXNcbiAgICAgICAgICBjYXNlIFwidFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgICAgICAgICAgaHJlZj17IGBodHRwczovL25vc3RyLmJhbmQvP3E9JTIzJHsgcmVmWzFdIH1gIH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICN7IHJlZlsxXSB9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHVuc3VwcG9ydGVkICNbZF0gcmVmXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG4gICAgLy8gbm93IHRyeSBzcGxpdHRpbmcgYnkgbm9zdHI6IGxpbmtzXG4gICAgcmV0dXJuIG1hdGNoLnNwbGl0KC8obm9zdHI6W2EtejAtOV0rKS9naSkubWFwKChuKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaE5vc3RyID0gbi5tYXRjaCgvbm9zdHI6KFthLXowLTldKykvKTtcbiAgICAgIGlmIChtYXRjaE5vc3RyICYmIG1hdGNoTm9zdHIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBtYXRjaE5vc3RyWzFdLnN0YXJ0c1dpdGgoXCJub3RlMVwiKSB8fFxuICAgICAgICAgIG1hdGNoTm9zdHJbMV0uc3RhcnRzV2l0aChcIm5ldmVudDFcIikgfHxcbiAgICAgICAgICBtYXRjaE5vc3RyWzFdLnN0YXJ0c1dpdGgoXCJuYWRkcjFcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdEV2ZW50TGluayhtYXRjaE5vc3RyWzFdKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaE5vc3RyWzFdLnN0YXJ0c1dpdGgoXCJucHViMVwiKSkge1xuICAgICAgICAgIGNvbnN0IG5wdWIgPSBtYXRjaE5vc3RyWzFdO1xuICAgICAgICAgIGNvbnN0IHB1YmtleSA9IHBhcnNlTnB1YihtYXRjaE5vc3RyWzFdKTtcbiAgICAgICAgICBpZiAocHVia2V5KVxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFByb2ZpbGVMaW5rKG5wdWIsIHB1YmtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hOb3N0clsxXS5zdGFydHNXaXRoKFwibnByb2ZpbGUxXCIpKSB7XG4gICAgICAgICAgY29uc3Qge3R5cGUsIGRhdGF9ID0gcGFyc2VOcHJvZmlsZShtYXRjaE5vc3RyWzFdKTtcbiAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgbnB1YiA9IGdldE5wdWIoZGF0YS5wdWJrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFByb2ZpbGVMaW5rKG5wdWIsIGRhdGEucHVia2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bnN1cHBvcnRlZCBvciBiYWQgbm9zdHI6IGxpbmtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmFsbHksIHNwbGl0IGJ5IHVybHNcbiAgICAgIGNvbnN0IHVybFJlZ2V4ID1cbiAgICAgICAgLygoPzpodHRwfGZ0cHxodHRwcyk6XFwvXFwvKD86W1xcdys/LlxcdytdKSsoPzpbYS16QS1aMC05fiFAIyQlXiYqKClfXFwtPStcXFxcLz8uOjsnLF0qKT8oPzpbLUEtWmEtejAtOSsmQCMvJT1+X3xdKSkvaTtcbiAgICAgIHJldHVybiBuLnNwbGl0KHVybFJlZ2V4KS5tYXAoKGEpID0+IHtcbiAgICAgICAgaWYgKGEubWF0Y2goL15odHRwcz86XFwvXFwvLykpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0TGluayhhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnRzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaW5rKGEpIHtcbiAgaWYgKGlzVmlkZW8oYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkQ29udGVudE1lZGlhXCI+XG4gICAgICAgIDx2aWRlbyBzcmM9eyBhIH1cbiAgICAgICAgICAgICAgIGNvbnRyb2xzPjwvdmlkZW8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKGlzSW1hZ2UoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkQ29udGVudE1lZGlhXCI+XG4gICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY2FyZENvbnRlbnRJbWFnZVwiXG4gICAgICAgICAgICAgc3JjPXsgYSB9XG4gICAgICAgICAgICAgYWx0PVwiXCI+PC9pbWc+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKGlzWW91dHViZShhKSkge1xuICAgIGlmIChhLmluY2x1ZGVzKFwiL3dhdGNoXCIpKSB7XG4gICAgICBhID0gYS5yZXBsYWNlKFwiL3dhdGNoXCIsIFwiL2VtYmVkXCIpO1xuICAgICAgYSA9IGEucmVwbGFjZShcIj92PVwiLCBcIi9cIik7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRDb250ZW50TWVkaWFcIj5cbiAgICAgICAgPGlmcmFtZSBzcmM9eyBhIH0+PC9pZnJhbWU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiXG4gICAgICAgICBocmVmPXsgYSB9PlxuICAgICAgICB7IGEgfVxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbWFnZShhKSB7XG4gIGNvbnN0IGxpbmsgPSBzcGxpdExpbmsoY2hhbmdlTGlua1JlZ2lzdGVyKGEpLCAwKTtcbiAgcmV0dXJuIGlzQW55RW5kV2l0aChsaW5rLCBJTUFHRV9GSUxFX0VYVEVOU0lPTlMpO1xufVxuXG5mdW5jdGlvbiBpc1ZpZGVvKGEpIHtcbiAgY29uc3QgbGluayA9IHNwbGl0TGluayhjaGFuZ2VMaW5rUmVnaXN0ZXIoYSksIDApO1xuICByZXR1cm4gaXNBbnlFbmRXaXRoKGxpbmssIFZJREVPX0ZJTEVfRVhURU5TSU9OUyk7XG59XG5cbmZ1bmN0aW9uIGlzWW91dHViZShhKSB7XG4gIGNvbnN0IGxpbmsgPSBzcGxpdExpbmsoY2hhbmdlTGlua1JlZ2lzdGVyKGEpLCAwKTtcbiAgcmV0dXJuIGlzQW55Q29udGFpbnMobGluaywgWU9VVFVCRV9LRVlfV09SRFMpO1xufVxuXG5mdW5jdGlvbiBpc0FueUVuZFdpdGgobGluaywgZXh0ZW5zaW9ucykge1xuICByZXR1cm4gZXh0ZW5zaW9ucy5zb21lKGZ1bmN0aW9uIChleHRlbnNpb24pIHtcbiAgICByZXR1cm4gbGluay5lbmRzV2l0aChleHRlbnNpb24pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNBbnlDb250YWlucyhsaW5rLCBrZXlXb3Jkcykge1xuICByZXR1cm4ga2V5V29yZHMuc29tZShmdW5jdGlvbiAoa2V5V29yZCkge1xuICAgIHJldHVybiBsaW5rLmluY2x1ZGVzKGtleVdvcmQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlTGlua1JlZ2lzdGVyKGEpIHtcbiAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gc3BsaXRMaW5rKGxpbmssIGVsZW1lbnROdW1iZXIpIHtcbiAgY29uc3QgbGlua0FycmF5ID0gbGluay5zcGxpdChcIj9cIik7XG4gIGlmIChsaW5rQXJyYXkubGVuZ3RoID4gZWxlbWVudE51bWJlcikge1xuICAgIHJldHVybiBsaW5rQXJyYXlbZWxlbWVudE51bWJlcl07XG4gIH1cbiAgcmV0dXJuIGxpbms7XG59IiwiaW1wb3J0IFByb2ZpbGVDb21wb25lbnQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvcHJvZmlsZS5qc3hcIjtcbmltcG9ydCBNZXRhIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL21ldGEuanN4XCI7XG5pbXBvcnQge2Zvcm1hdENvbnRlbnR9IGZyb20gXCIuLi8uLi91dGlscy9mb3JtYXRDb250ZW50XCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90ZSh7c3RhdGUsIHByb3BzfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibm9zdHJFbWJlZENhcmRcIj5cbiAgICAgIDxQcm9maWxlQ29tcG9uZW50XG4gICAgICAgIHByb2ZpbGVQa2V5PXsgc3RhdGU/LnByb2ZpbGVQa2V5IH1cbiAgICAgICAgcHJvZmlsZT17IHN0YXRlPy5wcm9maWxlIH1cbiAgICAgICAgb3B0aW9ucz17IHByb3BzPy5vcHRpb25zIH1cbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgc3RhdGU/LmV2ZW50LmVycm9yXG4gICAgICAgICAgICA/IFwiY2FyZENvbnRlbnQgbmUtdGV4dC1yZWQtODAwXCJcbiAgICAgICAgICAgIDogXCJjYXJkQ29udGVudFwiXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAgeyBmb3JtYXRDb250ZW50KHN0YXRlKSB9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxNZXRhXG4gICAgICAgIG5vdGU9eyBzdGF0ZT8uZXZlbnQgfVxuICAgICAgICBsaWtlc0NvdW50PXsgc3RhdGU/Lmxpa2VzQ291bnQgfVxuICAgICAgICByZXBsaWVzQ291bnQ9eyBzdGF0ZT8ucmVwbGllc0NvdW50IH1cbiAgICAgICAgcmVwb3N0c0NvdW50PXsgc3RhdGU/LnJlcG9zdHNDb3VudCB9XG4gICAgICAgIHphcEFtb3VudD17IHN0YXRlPy56YXBBbW91bnQgfVxuICAgICAgICBvcHRpb25zPXsgcHJvcHM/Lm9wdGlvbnMgfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuIiwiaW1wb3J0ICogYXMgc2VjcCBmcm9tIFwiQG5vYmxlL3NlY3AyNTZrMVwiO1xuaW1wb3J0IHtkZWNvZGV9IGZyb20gXCJsaWdodC1ib2x0MTEtZGVjb2RlclwiO1xuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7cGFyc2VOYWRkciwgcGFyc2VOb3RlSWQsIHBhcnNlTnB1Yix9IGZyb20gXCIuLi91dGlscy9jb21tb25cIjtcbmltcG9ydCBQcm9maWxlc0xpc3QgZnJvbSBcIi4vY29tcG9uZW50cy9Qcm9maWxlc0xpc3QuanN4XCI7XG5pbXBvcnQgUHJvZmlsZSBmcm9tIFwiLi9jb21wb25lbnRzL1Byb2ZpbGUuanN4XCI7XG5pbXBvcnQge0tJTkRfQ09OVEFDVF9MSVNULCBLSU5EX01FVEEsIEtJTkRfTk9URSwgS0lORF9QUk9GSUxFX0xJU1QsIEtJTkRfWkFQfSBmcm9tIFwiLi4vY29uZmlnL2NvbmZpZ1wiO1xuaW1wb3J0IFphcCBmcm9tIFwiLi9jb21wb25lbnRzL1phcC5qc3hcIjtcbmltcG9ydCBOb3RlIGZyb20gXCIuL2NvbXBvbmVudHMvTm90ZS5qc3hcIjtcblxuY2xhc3MgTm9zdHJFbWJlZCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgbGV0IGlkID0gcHJvcHMuaWQ7IC8vIGhleCBldmVudCBpZCBieSBkZWZhdWx0XG4gICAgbGV0IGtpbmQgPSBLSU5EX05PVEU7IC8vIGRlZmF1bHQgZm9yIGZldGNoRXZlbnRcbiAgICBpZiAocHJvcHMuaWQuc3RhcnRzV2l0aChcIm5wdWIxXCIpKSB7XG4gICAgICBpZCA9IHBhcnNlTnB1Yihwcm9wcy5pZCk7XG4gICAgICBraW5kID0gS0lORF9NRVRBOyAvLyBmZXRjaFByb2ZpbGVcbiAgICB9IGVsc2UgaWYgKHByb3BzLmlkLnN0YXJ0c1dpdGgoXCJub3RlMVwiKSkge1xuICAgICAgaWQgPSBwYXJzZU5vdGVJZChwcm9wcy5pZCk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5pZC5zdGFydHNXaXRoKFwibmFkZHJcIikpIHtcbiAgICAgIGlkID0gcGFyc2VOYWRkcihwcm9wcy5pZCk7XG4gICAgICBraW5kID0gS0lORF9DT05UQUNUX0xJU1Q7IC8vIGRlZmF1bHQgZm9yIGZldGNoTmFkZHJcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaWQsXG4gICAgICBraW5kLFxuICAgICAgcmVsYXk6IHByb3BzLnJlbGF5LFxuICAgICAgZXZlbnQ6IHt9LCAvLyByYXcgc291cmNlIGV2ZW50XG4gICAgICBwcm9maWxlOiB7fSwgLy8gYXV0aG9yIG9mIHRoZSBjdXJyZW50IGV2ZW50XG4gICAgICBwcm9maWxlc0xpc3Q6IHt9LCAvLyAzLCAzMDAwMCBldGNcbiAgICAgIHRhZ2dlZFByb2ZpbGVzOiB7fSxcbiAgICAgIGZvbGxvd3M6IFtdLFxuICAgICAgcHJvZmlsZVBrZXk6IFwiXCIsXG4gICAgICBsaWtlc0NvdW50OiAwLFxuICAgICAgcmVwb3N0c0NvdW50OiAwLFxuICAgICAgcmVwbGllc0NvdW50OiAwLFxuICAgICAgemFwQW1vdW50OiAwLFxuICAgICAgZm9sbG93ZXJzQ291bnQ6IDAsXG4gICAgICBjb3VudFRhZ2dlZFByb2ZpbGVzOiAwLFxuICAgIH07XG4gIH1cblxuICBzaGEyNTYoc3RyaW5nKSB7XG4gICAgY29uc3QgdXRmOCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHJpbmcpO1xuICAgIHJldHVybiBzZWNwLnV0aWxzLnNoYTI1Nih1dGY4KS50aGVuKChoYXNoQnVmZmVyKSA9PiB7XG4gICAgICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTtcbiAgICAgIHJldHVybiBoYXNoQXJyYXlcbiAgICAgICAgLm1hcCgoYnl0ZXMpID0+IGJ5dGVzLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpXG4gICAgICAgIC5qb2luKFwiXCIpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0Tm9zdHJFdmVudElEKG0pIHtcbiAgICBjb25zdCBhID0gWzAsIG0ucHVia2V5LCBtLmNyZWF0ZWRfYXQsIG0ua2luZCwgbS50YWdzLCBtLmNvbnRlbnRdO1xuICAgIGNvbnN0IHMgPSBKU09OLnN0cmluZ2lmeShhKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zaGEyNTYocyk7XG4gIH1cblxuICB2ZXJpZnlOb3N0clNpZ25hdHVyZShldmVudCkge1xuICAgIHJldHVybiBzZWNwLnNjaG5vcnIudmVyaWZ5KGV2ZW50LnNpZywgZXZlbnQuaWQsIGV2ZW50LnB1YmtleSk7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZU5vc3RyRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuaWQgIT09IChhd2FpdCB0aGlzLmdldE5vc3RyRXZlbnRJRChldmVudCkpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBldmVudC5jb250ZW50ICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBldmVudC5jcmVhdGVkX2F0ICE9PSBcIm51bWJlclwiKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnQudGFncykpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50LnRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0YWcgPSBldmVudC50YWdzW2ldO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhZykpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFnLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFnW2pdID09PSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBpc1ZhbGlkRXZlbnQoZXYpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZXYuaWQgJiZcbiAgICAgIGV2LnB1YmtleSAmJlxuICAgICAgZXYuc2lnICYmXG4gICAgICAoYXdhaXQgdGhpcy52YWxpZGF0ZU5vc3RyRXZlbnQoZXYpKSAmJlxuICAgICAgdGhpcy52ZXJpZnlOb3N0clNpZ25hdHVyZShldilcbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSAoc29ja2V0KSA9PiB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUua2luZCkge1xuICAgICAgICBjYXNlIEtJTkRfTUVUQTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaFByb2ZpbGUoe3NvY2tldCwgcHJvZmlsZVBrZXk6IHRoaXMuc3RhdGUuaWR9KTtcbiAgICAgICAgY2FzZSBLSU5EX05PVEU6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hFdmVudCh7c29ja2V0LCBub3RlSWQ6IHRoaXMuc3RhdGUuaWR9KTtcbiAgICAgICAgY2FzZSBLSU5EX0NPTlRBQ1RfTElTVDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaE5hZGRyKHtzb2NrZXQsIGRhdGE6IHRoaXMuc3RhdGUuaWQuZGF0YX0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIXdpbmRvdy5fX25vc3RyRW1iZWQpIHdpbmRvdy5fX25vc3RyRW1iZWQgPSB7c29ja2V0czoge319O1xuXG4gICAgbGV0IHNvY2tldCA9IG51bGw7XG4gICAgaWYgKHRoaXMuc3RhdGUucmVsYXkgaW4gd2luZG93Ll9fbm9zdHJFbWJlZC5zb2NrZXRzKSB7XG4gICAgICBzb2NrZXQgPSB3aW5kb3cuX19ub3N0ckVtYmVkLnNvY2tldHNbdGhpcy5zdGF0ZS5yZWxheV07XG4gICAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT0gMSlcbiAgICAgICAgLy8gb3BlblxuICAgICAgICBzdGFydChzb2NrZXQpO1xuICAgICAgZWxzZSBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT0gMClcbiAgICAgICAgLy8gY29ubmVjdGluZ1xuICAgICAgICBzb2NrZXQuc3RhcnRzLnB1c2goc3RhcnQpO1xuICAgICAgZWxzZSBzb2NrZXQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChzb2NrZXQpIHJldHVybjtcblxuICAgIHNvY2tldCA9IG5ldyBXZWJTb2NrZXQodGhpcy5zdGF0ZS5yZWxheSk7XG4gICAgd2luZG93Ll9fbm9zdHJFbWJlZC5zb2NrZXRzW3RoaXMuc3RhdGUucmVsYXldID0gc29ja2V0O1xuXG4gICAgc29ja2V0LnN0YXJ0cyA9IFtzdGFydF07XG5cbiAgICBzb2NrZXQub25vcGVuID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYENvbm5lY3RlZCB0byBOb3N0ciByZWxheTogJHsgc29ja2V0LnVybCB9YCk7XG4gICAgICBmb3IgKGNvbnN0IHMgb2Ygc29ja2V0LnN0YXJ0cykgcyhzb2NrZXQpO1xuICAgICAgc29ja2V0LnN0YXJ0cyA9IG51bGw7XG4gICAgfTtcblxuICAgIHNvY2tldC5vbmVycm9yID0gKGV2KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgRmFpbGVkIHRvIGNvbm5lY3QgdG8gTm9zdHIgcmVsYXk6ICR7IHNvY2tldC51cmwgfX1gKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VicyA9IHt9O1xuICAgIHNvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgaWYgKCFkIHx8ICFkLmxlbmd0aCkgdGhyb3cgXCJCYWQgcmVwbHkgZnJvbSByZWxheVwiO1xuXG4gICAgICAgIGlmIChkWzBdID09IFwiTk9USUNFXCIgJiYgZC5sZW5ndGggPT0gMikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90aWNlIGZyb21cIiwgc29ja2V0LnVybCwgZFsxXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gPT0gXCJFT1NFXCIgJiYgZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgaWYgKGRbMV0gaW4gc3Vicykgc3Vic1tkWzFdXS5vbl9ldmVudChudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZFswXSA9PSBcIkNPVU5UXCIgJiYgZC5sZW5ndGggPT0gMykge1xuICAgICAgICAgIGlmIChkWzFdIGluIHN1YnMpIHN1YnNbZFsxXV0ub25fY291bnQoZFsyXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gIT0gXCJFVkVOVFwiIHx8IGQubGVuZ3RoIDwgMykgdGhyb3cgXCJVbmtub3duIHJlcGx5IGZyb20gcmVsYXlcIjtcblxuICAgICAgICBpZiAoZFsxXSBpbiBzdWJzKSBzdWJzW2RbMV1dLm9uX2V2ZW50KGRbMl0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWxheVwiLCBzb2NrZXQudXJsLCBcImJhZCBtZXNzYWdlXCIsIGUsIFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzb2NrZXQuc3Vic2NyaWJlID0gKHt0eXBlLCBzdWIsIG9rLCBlcnJ9KSA9PiB7XG4gICAgICBsZXQgaWQgPSBcImVtYmVkLVwiICsgTWF0aC5yYW5kb20oKTtcbiAgICAgIGNvbnN0IHJlcSA9IFt0eXBlLCBpZCwgc3ViXTtcbiAgICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHJlcSkpO1xuXG4gICAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3ViX2lkID0gaWQ7XG4gICAgICAgIGlkID0gbnVsbDtcbiAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoW1wiQ0xPU0VcIiwgc3ViX2lkXSkpO1xuICAgICAgICBkZWxldGUgc3Vic1tzdWJfaWRdO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgZXZlbnRzID0gW107XG4gICAgICBjb25zdCBxdWV1ZSA9IFtdO1xuXG4gICAgICBjb25zdCBkb25lID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWlkKSByZXR1cm47XG4gICAgICAgIGNsZWFyVGltZW91dCh0byk7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIG9rKGV2ZW50cyk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0byA9IHNldFRpbWVvdXQoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0ZWxsIHJlbGF5IHdlJ3JlIG5vIGxvbmdlciBpbnRlcmVzdGVkXG4gICAgICAgICAgY2xvc2UoKTtcblxuICAgICAgICAgIC8vIG1heWJlIHJlbGF5IHcvbyBFT1NFIHN1cHBvcnQ/XG4gICAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGggfHwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBvbl9ldmVudChudWxsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyKFwidGltZW91dCBvbiByZWxheVwiLCBzb2NrZXQudXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN1Yi5saW1pdCAmJiBzdWIubGltaXQgPT0gMSA/IDIwMDAgOiA2MDAwXG4gICAgICApO1xuXG4gICAgICBjb25zdCBvbl9ldmVudCA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIHF1ZXVlLnB1c2goZSk7XG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAxKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBlID0gcXVldWVbMF07XG4gICAgICAgICAgaWYgKGUgJiYgKGF3YWl0IHRoaXMuaXNWYWxpZEV2ZW50KGUpKSkgZXZlbnRzLnB1c2goZSk7XG4gICAgICAgICAgcXVldWUuc2hpZnQoKTsgLy8gZGVxdWV1ZSBhZnRlciB3ZSd2ZSBhd2FpdGVkXG4gICAgICAgICAgaWYgKCFlIHx8IChzdWIubGltaXQgJiYgc3ViLmxpbWl0ID09IGV2ZW50cy5sZW5ndGgpKSB7XG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoMCwgcXVldWUubGVuZ3RoKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgb25fY291bnQgPSBhc3luYyAoZSkgPT4ge1xuICAgICAgICBpZiAodHlwZSAhPSBcIkNPVU5UXCIpIHJldHVybjsgLy8gbWlzYmVoYXZpbmcgcmVsYXlcbiAgICAgICAgZXZlbnRzLnB1c2goZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHN1YnNbaWRdID0ge29rLCBlcnIsIG9uX2V2ZW50LCBvbl9jb3VudH07XG4gICAgfTtcblxuICAgIHNvY2tldC5saXN0RXZlbnRzID0gKHtzdWIsIG9rLCBlcnJ9KSA9PiB7XG4gICAgICBzb2NrZXQuc3Vic2NyaWJlKHt0eXBlOiBcIlJFUVwiLCBzdWIsIG9rLCBlcnJ9KTtcbiAgICB9O1xuXG4gICAgc29ja2V0LmNvdW50RXZlbnRzID0gKHtzdWIsIG9rLCBlcnJ9KSA9PiB7XG4gICAgICBzb2NrZXQuc3Vic2NyaWJlKHtcbiAgICAgICAgdHlwZTogXCJDT1VOVFwiLFxuICAgICAgICBzdWIsXG4gICAgICAgIG9rOiAoZXZlbnRzKSA9PiB7XG4gICAgICAgICAgb2soZXZlbnRzLmxlbmd0aCA/IGV2ZW50c1swXSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBlcnIsXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZ2V0RXZlbnQoe3NvY2tldCwgc3ViLCBvaywgZXJyfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc3ViLmxpbWl0ID0gMTtcbiAgICAgIHNvY2tldC5saXN0RXZlbnRzKHtcbiAgICAgICAgc3ViLFxuICAgICAgICBvazogKGV2ZW50cykgPT4ge1xuICAgICAgICAgIG9rKGV2ZW50cyA/IGV2ZW50c1swXSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBlcnIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGxpc3RFdmVudHMoe3NvY2tldCwgc3VifSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc29ja2V0Lmxpc3RFdmVudHMoe3N1Yiwgb2ssIGVycn0pO1xuICAgIH0pO1xuICB9XG5cbiAgY291bnRFdmVudHMoe3NvY2tldCwgc3VifSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc29ja2V0LmNvdW50RXZlbnRzKHtzdWIsIG9rLCBlcnJ9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZldGNoRXZlbnQoe3NvY2tldCwgbm90ZUlkfSkge1xuICAgIGNvbnN0IHN1YiA9IHtpZHM6IFtub3RlSWRdfTtcbiAgICB0aGlzLmdldEV2ZW50KHtzb2NrZXQsIHN1Yn0pXG4gICAgICAudGhlbigoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIGtpbmQ6IGV2ZW50LmtpbmQsXG4gICAgICAgICAgICBwcm9maWxlUGtleTogZXZlbnQucHVia2V5LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZmV0Y2hQcm9maWxlKHtzb2NrZXQsIHByb2ZpbGVQa2V5OiBldmVudC5wdWJrZXl9KTtcbiAgICAgICAgICBpZiAoZXZlbnQua2luZCA9PSBLSU5EX05PVEUpIHtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hNZXRhKHtzb2NrZXQsIG5vdGVJZH0pO1xuICAgICAgICAgICAgdGhpcy5mZXRjaFRhZ3Moe3NvY2tldCwgdGFnczogZXZlbnQudGFnc30pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2luZCA9PSBLSU5EX1pBUCkge1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBXZSBjYW4ndCBmaW5kIHRoYXQgbm90ZSBvbiB0aGlzIHJlbGF5XCIpO1xuICAgICAgICAgIHRocm93IFwiRXZlbnQgbm90IGZvdW5kXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBmZXRjaGluZyBub3RlOiAkeyBlcnJvciB9YCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICBpZDogbm90ZUlkLFxuICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICBcIlNvcnJ5LCB3ZSB3ZXJlbid0IGFibGUgdG8gZmluZCBhbmQgcGFyc2UgdGhpcyBub3RlIG9uIHRoZSBzcGVjaWZpZWQgcmVsYXkuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZldGNoUHJvZmlsZSh7c29ja2V0LCBwcm9maWxlUGtleX0pIHtcbiAgICBjb25zdCBzdWIgPSB7a2luZHM6IFtLSU5EX01FVEFdLCBhdXRob3JzOiBbcHJvZmlsZVBrZXldfTtcbiAgICB0aGlzLmdldEV2ZW50KHtzb2NrZXQsIHN1Yn0pXG4gICAgICAudGhlbigoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgbGV0IHBhcnNlZFByb2ZpbGUgPSBKU09OLnBhcnNlKGV2ZW50LmNvbnRlbnQpO1xuICAgICAgICAgIHBhcnNlZFByb2ZpbGUucHVia2V5ID0gcHJvZmlsZVBrZXk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7cHJvZmlsZVBrZXksIHByb2ZpbGU6IHBhcnNlZFByb2ZpbGV9KTtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5raW5kID09IEtJTkRfTUVUQSkge1xuICAgICAgICAgICAgdGhpcy5mZXRjaFByb2ZpbGVNZXRhKHtzb2NrZXQsIHB1YmtleTogcHJvZmlsZVBrZXl9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnM/LnNob3dGb2xsb3dpbmcpIHRoaXMuZmV0Y2hGb2xsb3dzKHtzb2NrZXQsIHB1YmtleTogcHJvZmlsZVBrZXl9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIkV2ZW50IG5vdCBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgcHJvZmlsZTogJHsgZXJyb3IgfWApO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwcm9maWxlOiB7XG4gICAgICAgICAgICBwdWJrZXk6IHByb2ZpbGVQa2V5LFxuICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICBhYm91dDpcbiAgICAgICAgICAgICAgXCJTb3JyeSwgd2Ugd2VyZW4ndCBhYmxlIHRvIGZpbmQgdGhpcyBwcm9maWxlIG9uIHRoZSBzcGVjaWZpZWQgcmVsYXkuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZldGNoRm9sbG93cyh7c29ja2V0LCBwdWJrZXl9KSB7XG4gICAgY29uc3Qgc3ViID0ge1xuICAgICAga2luZHM6IFtLSU5EX0NPTlRBQ1RfTElTVF0sXG4gICAgICBhdXRob3JzOiBbcHVia2V5XVxuICAgIH1cbiAgICBsZXQgZm9sbG93ZWRQdWJrZXlzID0gW11cbiAgICB0aGlzLmdldEV2ZW50KHtzb2NrZXQsIHN1Yn0pXG4gICAgICAudGhlbihldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50Py50YWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgICAgIGlmICh0YWdbMF0gPT09IFwicFwiKSB7XG4gICAgICAgICAgICAgIGZvbGxvd2VkUHVia2V5cy5wdXNoKHRhZ1sxXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuZmV0Y2hGb2xsb3dQcm9maWxlcyh7c29ja2V0LCBwdWJrZXlzOiBmb2xsb3dlZFB1YmtleXN9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IFwiRXZlbnQgbm90IGZvdW5kXCI7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIGZvbGxvd3M6ICR7IGVycm9yIH1gKTtcbiAgICB9KVxuICB9XG5cbiAgZmV0Y2hGb2xsb3dQcm9maWxlcyh7c29ja2V0LCBwdWJrZXlzfSkge1xuICAgIGNvbnN0IHN1YiA9IHtcbiAgICAgIGtpbmRzOiBbS0lORF9NRVRBXSxcbiAgICAgIGF1dGhvcnM6IHB1YmtleXNcbiAgICB9XG4gICAgdGhpcy5saXN0RXZlbnRzKHtzb2NrZXQsIHN1Yn0pLnRoZW4oZXZlbnRzID0+IHtcbiAgICAgIGlmIChldmVudHMpIHRoaXMuc2V0U3RhdGUoe2ZvbGxvd3M6IGV2ZW50c30pXG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgZm9sbG93IHByb2ZpbGVzOiAkeyBlcnJvciB9YCk7XG4gICAgfSlcbiAgfVxuXG4gIGZldGNoTmFkZHIoe3NvY2tldCwgZGF0YX0pIHtcbiAgICBjb25zdCBzdWIgPSB7XG4gICAgICBraW5kczogW2RhdGEua2luZF0sXG4gICAgICBcIiNkXCI6IFtkYXRhLmlkZW50aWZpZXJdLFxuICAgICAgYXV0aG9yczogW2RhdGEucHVia2V5XSxcbiAgICB9O1xuICAgIHRoaXMuZ2V0RXZlbnQoe3NvY2tldCwgc3VifSlcbiAgICAgIC50aGVuKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtldmVudCwga2luZDogZXZlbnQua2luZH0pO1xuICAgICAgICAgIHRoaXMuZmV0Y2hQcm9maWxlKHtzb2NrZXQsIHByb2ZpbGVQa2V5OiBldmVudC5wdWJrZXl9KTtcbiAgICAgICAgICBpZiAoZXZlbnQua2luZCA9PSBLSU5EX0NPTlRBQ1RfTElTVCB8fCBldmVudC5raW5kID09IEtJTkRfUFJPRklMRV9MSVNUKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9maWxlc0xpc3RPYmogPSB0aGlzLmdldFByb2ZpbGVzTGlzdE9iaihldmVudC50YWdzKTtcbiAgICAgICAgICAgIHByb2ZpbGVzTGlzdE9iai5jcmVhdGVkX2F0ID0gZXZlbnQuY3JlYXRlZF9hdDtcbiAgICAgICAgICAgIHByb2ZpbGVzTGlzdE9iai5pZCA9IGAkeyBkYXRhLmtpbmQgfTokeyBkYXRhLnB1YmtleSB9OiR7IGRhdGEuaWRlbnRpZmllciB9YDtcbiAgICAgICAgICAgIHByb2ZpbGVzTGlzdE9iai5uYWRkciA9IHRoaXMucHJvcHMuaWQ7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtwcm9maWxlc0xpc3Q6IHByb2ZpbGVzTGlzdE9ian0pO1xuICAgICAgICAgICAgdGhpcy5mZXRjaFRhZ3Moe3NvY2tldCwgdGFnczogZXZlbnQudGFnc30pO1xuICAgICAgICAgICAgdGhpcy5mZXRjaE1ldGEoe3NvY2tldCwgZGF0YX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIkV2ZW50IG5vdCBmb3VuZFwiO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgZXZlbnQgYnkgbmFkZHI6ICR7IGVycm9yIH1gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcHJvZmlsZXNMaXN0OiB7XG4gICAgICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICAgIFwiU29ycnksIHdlIHdlcmVuJ3QgYWJsZSB0byBmaW5kIHRoaXMgZXZlbnQgb24gdGhlIHNwZWNpZmllZCByZWxheS5cIixcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hUYWdzKHtzb2NrZXQsIHRhZ3N9KSB7XG4gICAgY29uc3Qgc3ViID0ge2tpbmRzOiBbS0lORF9NRVRBXSwgYXV0aG9yczogW119O1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IHQgb2YgdGFncykge1xuICAgICAgaWYgKHN1Yi5hdXRob3JzLmxlbmd0aCA8IDEwMCkge1xuICAgICAgICBpZiAodC5sZW5ndGggPj0gMiAmJiB0WzBdID09IFwicFwiKSB7XG4gICAgICAgICAgc3ViLmF1dGhvcnMucHVzaCh0WzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodC5sZW5ndGggPj0gMiAmJiB0WzBdID09IFwicFwiKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICBjb3VudFRhZ2dlZFByb2ZpbGVzOiBzdGF0ZS5jb3VudFRhZ2dlZFByb2ZpbGVzICsgY291bnQsXG4gICAgfSkpO1xuXG4gICAgaWYgKCFzdWIuYXV0aG9ycy5sZW5ndGgpIHJldHVybjtcblxuICAgIHRoaXMubGlzdEV2ZW50cyh7c29ja2V0LCBzdWJ9KVxuICAgICAgLnRoZW4oKGV2ZW50cykgPT4ge1xuICAgICAgICBjb25zdCB0YWdnZWRQcm9maWxlcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcCA9IEpTT04ucGFyc2UoZXZlbnQuY29udGVudCk7XG4gICAgICAgICAgICB0YWdnZWRQcm9maWxlc1tldmVudC5wdWJrZXldID0gcDtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGJhZCBldmVudCBjb250ZW50XCIsIGUsIGV2ZW50LmNvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHt0YWdnZWRQcm9maWxlc30pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nIHRhZ2dlZCBwcm9maWxlczogJHsgZXJyb3IgfWApO1xuICAgICAgfSk7XG4gIH1cblxuICBnZXRQcm9maWxlc0xpc3RPYmoodGFncykge1xuICAgIGxldCBwcm9maWxlc0xpc3QgPSB7fTtcblxuICAgIHRhZ3MuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBpZiAodGFnICYmIHRhZ1swXSkge1xuICAgICAgICBpZiAodGFnWzBdID09PSBcIm5hbWVcIikge1xuICAgICAgICAgIHByb2ZpbGVzTGlzdC5uYW1lID0gdGFnWzFdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdbMF0gPT09IFwiZFwiKSB7XG4gICAgICAgICAgcHJvZmlsZXNMaXN0LmQgPSB0YWdbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZ1swXSA9PT0gXCJkZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgcHJvZmlsZXNMaXN0LmRlc2NyaXB0aW9uID0gdGFnWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb2ZpbGVzTGlzdDtcbiAgfVxuXG4gIGdldFphcEFtb3VudChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoY29uc3QgdCBvZiBlLnRhZ3MpIHtcbiAgICAgICAgaWYgKHQubGVuZ3RoID49IDIgJiYgdFswXSA9PSBcImJvbHQxMVwiKSB7XG4gICAgICAgICAgY29uc3QgYiA9IGRlY29kZSh0WzFdKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgYi5zZWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBcImFtb3VudFwiKSByZXR1cm4gcGFyc2VJbnQocy52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgYmFkIHphcFwiLCBlciwgZSk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgb25MaXN0TWV0YUV2ZW50cyhldmVudHMpIHtcbiAgICBmb3IgKGxldCBub3RlRXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICBzd2l0Y2ggKG5vdGVFdmVudFtcImtpbmRcIl0pIHtcbiAgICAgICAgY2FzZSBLSU5EX1JFUE9TVDpcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIHJlcG9zdHNDb3VudDogc3RhdGUucmVwb3N0c0NvdW50ICsgMSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgS0lORF9SRUFDVElPTjpcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIGxpa2VzQ291bnQ6IHN0YXRlLmxpa2VzQ291bnQgKyAxLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBLSU5EX05PVEU6XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgICAgICByZXBsaWVzQ291bnQ6IHN0YXRlLnJlcGxpZXNDb3VudCArIDEsXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEtJTkRfWkFQOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgemFwQW1vdW50OiBzdGF0ZS56YXBBbW91bnQgKyB0aGlzLmdldFphcEFtb3VudChub3RlRXZlbnQpLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gbm90ZSBraW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZldGNoTWV0YSh7c29ja2V0LCBub3RlSWQsIGRhdGF9KSB7XG4gICAgaWYodGhpcy5wcm9wcy5vcHRpb25zPy5oaWRlQ291bnRlcnMpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChzb2NrZXQudXJsLmluY2x1ZGVzKFwid3NzOi8vcmVsYXkubm9zdHIuYmFuZFwiKSlcbiAgICAgIHJldHVybiB0aGlzLmZldGNoTWV0YUNvdW50KHtzb2NrZXQsIG5vdGVJZCwgZGF0YX0pO1xuICAgIGVsc2UgcmV0dXJuIHRoaXMuZmV0Y2hNZXRhTGlzdCh7c29ja2V0LCBub3RlSWQsIGRhdGF9KTtcbiAgfVxuXG4gIGZldGNoTWV0YUNvdW50KHtzb2NrZXQsIG5vdGVJZCwgZGF0YX0pIHtcbiAgICBjb25zdCBnZXRTdWIgPSAoa2luZCkgPT4ge1xuICAgICAgaWYgKG5vdGVJZCkge1xuICAgICAgICByZXR1cm4ge2tpbmRzOiBba2luZF0sIFwiI2VcIjogW25vdGVJZF19O1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmRzOiBba2luZF0sXG4gICAgICAgICAgXCIjYVwiOiBbYCR7IGRhdGEua2luZCB9OiR7IGRhdGEucHVia2V5IH06JHsgZGF0YS5pZGVudGlmaWVyIH1gXSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jb3VudEV2ZW50cyh7c29ja2V0LCBzdWI6IGdldFN1YihLSU5EX05PVEUpfSkudGhlbigoYykgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgIHJlcGxpZXNDb3VudDogYyA/IGMuY291bnQgOiAwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRoaXMuY291bnRFdmVudHMoe3NvY2tldCwgc3ViOiBnZXRTdWIoS0lORF9SRVBPU1QpfSkudGhlbigoYykgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgIHJlcG9zdHNDb3VudDogYyA/IGMuY291bnQgOiAwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRoaXMuY291bnRFdmVudHMoe3NvY2tldCwgc3ViOiBnZXRTdWIoS0lORF9SRUFDVElPTil9KS50aGVuKChjKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgbGlrZXNDb3VudDogYyA/IGMuY291bnQgOiAwLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRoaXMubGlzdEV2ZW50cyh7c29ja2V0LCBzdWI6IGdldFN1YihLSU5EX1pBUCl9KS50aGVuKChldmVudHMpID0+IHtcbiAgICAgIHRoaXMub25MaXN0TWV0YUV2ZW50cyhldmVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hNZXRhTGlzdCh7c29ja2V0LCBub3RlSWQsIGRhdGF9KSB7XG4gICAgY29uc3Qgc3ViID0gdGhpcy5nZXRTdWJPbkZldGNoTWV0YUxpc3Qoe25vdGVJZCwgZGF0YX0pO1xuXG4gICAgdGhpcy5saXN0RXZlbnRzKHtzb2NrZXQsIHN1Yn0pLnRoZW4oKGV2ZW50cykgPT4ge1xuICAgICAgdGhpcy5vbkxpc3RNZXRhRXZlbnRzKGV2ZW50cyk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRTdWJPbkZldGNoTWV0YUxpc3Qoe25vdGVJZCwgZGF0YX0pIHtcbiAgICBpZiAobm90ZUlkKSB7XG4gICAgICByZXR1cm4ge2tpbmRzOiBbS0lORF9OT1RFLCBLSU5EX1JFUE9TVCwgS0lORF9SRUFDVElPTiwgS0lORF9aQVBdLCBcIiNlXCI6IFtub3RlSWRdfTtcbiAgICB9XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmRzOiBbS0lORF9OT1RFLCBLSU5EX1JFUE9TVCwgS0lORF9SRUFDVElPTiwgS0lORF9aQVBdLFxuICAgICAgICBcIiNhXCI6IFtgJHsgZGF0YS5raW5kIH06JHsgZGF0YS5wdWJrZXkgfTokeyBkYXRhLmlkZW50aWZpZXIgfWBdLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBvbkxpc3RQcm9maWxlTWV0YUV2ZW50cyhldmVudHMpIHtcbiAgICBmb3IgKGxldCBlIG9mIGV2ZW50cykge1xuICAgICAgc3dpdGNoIChlW1wia2luZFwiXSkge1xuICAgICAgICBjYXNlIEtJTkRfQ09OVEFDVF9MSVNUOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgZm9sbG93ZXJzQ291bnQ6IHN0YXRlLmZvbGxvd2Vyc0NvdW50ICsgMSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgS0lORF9aQVA6XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgICAgICB6YXBBbW91bnQ6IHN0YXRlLnphcEFtb3VudCArIHRoaXMuZ2V0WmFwQW1vdW50KGUpLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gZXZlbnQga2luZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmZXRjaFByb2ZpbGVNZXRhQ291bnQoe3NvY2tldCwgcHVia2V5fSkge1xuICAgIGNvbnN0IGdldFN1YiA9IChraW5kKSA9PiB7XG4gICAgICByZXR1cm4ge2tpbmRzOiBba2luZF0sIFwiI3BcIjogW3B1YmtleV19O1xuICAgIH07XG4gICAgdGhpcy5jb3VudEV2ZW50cyh7c29ja2V0LCBzdWI6IGdldFN1YihLSU5EX0NPTlRBQ1RfTElTVCl9KS50aGVuKChjKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgZm9sbG93ZXJzQ291bnQ6IGMgPyBjLmNvdW50IDogMCxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICB0aGlzLmxpc3RFdmVudHMoe3NvY2tldCwgc3ViOiBnZXRTdWIoS0lORF9aQVApfSkudGhlbigoZXZlbnRzKSA9PiB7XG4gICAgICB0aGlzLm9uTGlzdFByb2ZpbGVNZXRhRXZlbnRzKGV2ZW50cyk7XG4gICAgfSk7XG4gIH1cblxuICBmZXRjaFByb2ZpbGVNZXRhTGlzdCh7c29ja2V0LCBwdWJrZXl9KSB7XG4gICAgY29uc3Qgc3ViID0ge2tpbmRzOiBbS0lORF9DT05UQUNUX0xJU1QsIEtJTkRfWkFQXSwgXCIjcFwiOiBbcHVia2V5XX07XG4gICAgdGhpcy5saXN0RXZlbnRzKHtzb2NrZXQsIHN1Yn0pLnRoZW4oKGV2ZW50cykgPT4ge1xuICAgICAgdGhpcy5vbkxpc3RQcm9maWxlTWV0YUV2ZW50cyhldmVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hQcm9maWxlTWV0YSh7c29ja2V0LCBwdWJrZXl9KSB7XG4gICAgY29uc29sZS5sb2codGhpcy5wcm9wcy5vcHRpb25zPy5oaWRlQ291bnRlcnMpXG4gICAgaWYodGhpcy5wcm9wcy5vcHRpb25zPy5oaWRlQ291bnRlcnMpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChzb2NrZXQudXJsLmluY2x1ZGVzKFwid3NzOi8vcmVsYXkubm9zdHIuYmFuZFwiKSlcbiAgICAgIHJldHVybiB0aGlzLmZldGNoUHJvZmlsZU1ldGFDb3VudCh7c29ja2V0LCBwdWJrZXl9KTtcbiAgICBlbHNlIHJldHVybiB0aGlzLmZldGNoUHJvZmlsZU1ldGFMaXN0KHtzb2NrZXQsIHB1YmtleX0pO1xuICB9XG5cblxuICByZW5kZXIoKSB7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlLmtpbmQpIHtcbiAgICAgIGNhc2UgS0lORF9NRVRBOlxuICAgICAgICByZXR1cm4gPFByb2ZpbGUgcHJvcHM9eyB0aGlzLnByb3BzIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlPXsgdGhpcy5zdGF0ZSB9Lz5cbiAgICAgIGNhc2UgS0lORF9DT05UQUNUX0xJU1Q6XG4gICAgICBjYXNlIEtJTkRfUFJPRklMRV9MSVNUOlxuICAgICAgICByZXR1cm4gPFByb2ZpbGVzTGlzdCBwcm9wcz17IHRoaXMucHJvcHMgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZT17IHRoaXMuc3RhdGUgfS8+XG4gICAgICBjYXNlIEtJTkRfWkFQOlxuICAgICAgICByZXR1cm4gPFphcCBzdGF0ZT17IHRoaXMuc3RhdGUgfS8+XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gPE5vdGUgcHJvcHM9eyB0aGlzLnByb3BzIH1cbiAgICAgICAgICAgICAgICAgICAgIHN0YXRlPXsgdGhpcy5zdGF0ZSB9Lz5cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9zdHJFbWJlZDtcbiIsImltcG9ydCB7IGgsIHJlbmRlciB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgTm9zdHJFbWJlZCBmcm9tICcuL21haW4vTm9zdHJFbWJlZC5qc3gnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChpZCwgd3JhcHBlciwgcmVsYXksIG9wdGlvbnMpIHtcblxuICBpZiAoIXJlbGF5KVxuICAgIHJlbGF5ID0gJ3dzczovL3JlbGF5Lm5vc3RyLmJhbmQvJztcblxuICBjb25zdCByZW5kZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3cmFwcGVyKVxuICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3cmFwcGVyKVxuICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXG4gIHJlbmRlcihoKE5vc3RyRW1iZWQsIHsgaWQsIHJlbGF5LCBvcHRpb25zIH0pLCByZW5kZXJFbGVtZW50KTtcbn1cbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImFzc2VydE51bWJlciIsIm4iLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRXJyb3IiLCJjaGFpbiIsImFyZ3MiLCJ3cmFwIiwiYSIsImIiLCJjIiwiZW5jb2RlIiwiQXJyYXkiLCJmcm9tIiwicmV2ZXJzZSIsInJlZHVjZSIsImFjYyIsImkiLCJ1bmRlZmluZWQiLCJkZWNvZGUiLCJhbHBoYWJldCIsImRpZ2l0cyIsImlzQXJyYXkiLCJsZW5ndGgiLCJtYXAiLCJpbnB1dCIsImxldHRlciIsImluZGV4IiwiaW5kZXhPZiIsImpvaW4iLCJzZXBhcmF0b3IiLCJ0byIsInNwbGl0IiwicGFkZGluZyIsImJpdHMiLCJjaHIiLCJkYXRhIiwicHVzaCIsImVuZCIsInNsaWNlIiwibm9ybWFsaXplIiwiZm4iLCJjb252ZXJ0UmFkaXgiLCJwb3MiLCJyZXMiLCJmb3JFYWNoIiwiZCIsImNhcnJ5IiwiZG9uZSIsImRpZ2l0IiwiZGlnaXRCYXNlIiwiTWF0aCIsImZsb29yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImJ5dGVzIiwic3RyaW5nVG9CeXRlcyIsInN0ciIsImJ5dGVzVG9TdHJpbmciLCJoZXgiLCJ1dGY4IiwiYmVjaDMybSIsImJlY2gzMiIsImJhc2U1OGNoZWNrIiwiYmFzZTU4eG1yIiwiYmFzZTU4eHJwIiwiYmFzZTU4ZmxpY2tyIiwiYmFzZTU4IiwiYmFzZTY0dXJsIiwiYmFzZTY0IiwiYmFzZTMyY3JvY2tmb3JkIiwiYmFzZTMyaGV4IiwiYmFzZTMyIiwiYmFzZTE2IiwidXRpbHMiLCJnY2QiLCJyYWRpeDJjYXJyeSIsImNvbnZlcnRSYWRpeDIiLCJtYXNrIiwicmFkaXgiLCJudW0iLCJVaW50OEFycmF5IiwicmFkaXgyIiwicmV2UGFkZGluZyIsInVuc2FmZVdyYXBwZXIiLCJhcHBseSIsImUiLCJjaGVja3N1bSIsImxlbiIsInNldCIsInBheWxvYWQiLCJuZXdDaGVja3N1bSIsIm9sZENoZWNrc3VtIiwicyIsInRvVXBwZXJDYXNlIiwicmVwbGFjZSIsImdlbkJhc2U1OCIsImFiYyIsIlhNUl9CTE9DS19MRU4iLCJibG9jayIsInN1YmFycmF5IiwicGFkU3RhcnQiLCJibG9ja0xlbiIsImoiLCJjb25jYXQiLCJzaGEyNTYiLCJCRUNIX0FMUEhBQkVUIiwiUE9MWU1PRF9HRU5FUkFUT1JTIiwiYmVjaDMyUG9seW1vZCIsInByZSIsImNoayIsImJlY2hDaGVja3N1bSIsInByZWZpeCIsIndvcmRzIiwiZW5jb2RpbmdDb25zdCIsImNoYXJDb2RlQXQiLCJ2IiwiZ2VuQmVjaDMyIiwiZW5jb2RpbmciLCJFTkNPRElOR19DT05TVCIsIl93b3JkcyIsImZyb21Xb3JkcyIsInRvV29yZHMiLCJmcm9tV29yZHNVbnNhZmUiLCJsaW1pdCIsIlR5cGVFcnJvciIsImxvd2VyZWQiLCJ0b0xvd2VyQ2FzZSIsInNlcEluZGV4IiwibGFzdEluZGV4T2YiLCJzdW0iLCJlbmRzV2l0aCIsImFjdHVhbExlbmd0aCIsImRlY29kZVRvQnl0ZXMiLCJkZWNvZGVVbnNhZmUiLCJUZXh0RGVjb2RlciIsIlRleHRFbmNvZGVyIiwiQ09ERVJTIiwiY29kZXJUeXBlRXJyb3IiLCJrZXlzIiwidHlwZSIsImhhc093blByb3BlcnR5IiwiQUxQSEFCRVQiLCJBTFBIQUJFVF9NQVAiLCJ6IiwieCIsImNoYXJBdCIsInBvbHltb2RTdGVwIiwicHJlZml4Q2hrIiwiY29udmVydCIsImluQml0cyIsIm91dEJpdHMiLCJwYWQiLCJtYXhWIiwicmVzdWx0IiwiZ2V0TGlicmFyeUZyb21FbmNvZGluZyIsIl9fZGVjb2RlIiwiTElNSVQiLCJ1cHBlcmVkIiwid29yZENoYXJzIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VNYXBwaW5nIiwiREVGQVVMVE5FVFdPUksiLCJwdWJLZXlIYXNoIiwic2NyaXB0SGFzaCIsInZhbGlkV2l0bmVzc1ZlcnNpb25zIiwiVEVTVE5FVFdPUksiLCJSRUdURVNUTkVUV09SSyIsIlNJTU5FVFdPUksiLCJGRUFUVVJFQklUX09SREVSIiwiRElWSVNPUlMiLCJtIiwiQmlnSW50IiwidSIsInAiLCJNQVhfTUlMTElTQVRTIiwiTUlMTElTQVRTX1BFUl9CVEMiLCJUQUdDT0RFUyIsInBheW1lbnRfaGFzaCIsInBheW1lbnRfc2VjcmV0IiwiZGVzY3JpcHRpb24iLCJwYXllZSIsImRlc2NyaXB0aW9uX2hhc2giLCJleHBpcnkiLCJtaW5fZmluYWxfY2x0dl9leHBpcnkiLCJmYWxsYmFja19hZGRyZXNzIiwicm91dGVfaGludCIsImZlYXR1cmVfYml0cyIsIm1ldGFkYXRhIiwiVEFHTkFNRVMiLCJjdXJyZW50TmFtZSIsImN1cnJlbnRDb2RlIiwiVEFHUEFSU0VSUyIsIndvcmRzVG9JbnRCRSIsInJvdXRlcyIsInB1YmtleSIsInNob3J0Q2hhbm5lbElkIiwiZmVlQmFzZU1TYXRzIiwiZmVlUHJvcG9ydGlvbmFsTWlsbGlvbnRocyIsImNsdHZFeHBpcnlEZWx0YSIsInJvdXRlc0J1ZmZlciIsInBhcnNlSW50Iiwic2hvcnRfY2hhbm5lbF9pZCIsImZlZV9iYXNlX21zYXQiLCJmZWVfcHJvcG9ydGlvbmFsX21pbGxpb250aHMiLCJjbHR2X2V4cGlyeV9kZWx0YSIsImJvb2xzIiwid29yZCIsImZpbmFsQXJyIiwiaXRlbUFyciIsImZlYXR1cmVCaXRzIiwiZmVhdHVyZU5hbWUiLCJzdGF0dXMiLCJleHRyYUJpdHMiLCJleHRyYV9iaXRzIiwic3RhcnRfYml0IiwiaGFzX3JlcXVpcmVkIiwiYml0IiwiZ2V0VW5rbm93blBhcnNlciIsInRhZ0NvZGUiLCJNQVhfU0FGRV9JTlRFR0VSIiwidG90YWwiLCJwb3ciLCJocnBUb01pbGxpc2F0IiwiaHJwU3RyaW5nIiwib3V0cHV0U3RyaW5nIiwiZGl2aXNvciIsIm1hdGNoIiwidmFsdWVCTiIsIm1pbGxpc2F0b3NoaXNCTiIsInBheW1lbnRSZXF1ZXN0IiwibmV0d29yayIsInNlY3Rpb25zIiwiZGVjb2RlZCIsImxldHRlcnMiLCJzaWdXb3JkcyIsInByZWZpeE1hdGNoZXMiLCJuYW1lIiwiYmVjaDMyUHJlZml4IiwiY29pbk5ldHdvcmsiLCJtaWxsaXNhdG9zaGlzIiwidGltZXN0YW1wIiwidGFnTmFtZSIsInBhcnNlciIsInRhZ0xlbmd0aCIsInRhZ1dvcmRzIiwidGFnIiwiZXhwIiwiZmluZCIsImdldFZhbHVlIiwicm91dGVfaGludHMiLCJmaWx0ZXIiLCJnZXQiLCJzZWN0aW9uIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZ2V0UHJvdG90eXBlT2YiLCJ0IiwibW9kZSIsInRoZW4iLCJucyIsImNyZWF0ZSIsInIiLCJkZWYiLCJjdXJyZW50IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImtleSIsImRlZmluaXRpb24iLCJvIiwiZW51bWVyYWJsZSIsInByb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJuYyIsImYiLCJoIiwibCIsInkiLCJhcmd1bWVudHMiLCJjaGlsZHJlbiIsImRlZmF1bHRQcm9wcyIsInByb3BzIiwicmVmIiwiX19rIiwiX18iLCJfX2IiLCJfX2UiLCJfX2QiLCJfX2MiLCJfX2giLCJjb25zdHJ1Y3RvciIsIl9fdiIsInZub2RlIiwiY29udGV4dCIsImciLCJ3IiwiX19yIiwiZGVib3VuY2VSZW5kZXJpbmciLCJzb3J0Iiwic2hpZnQiLCJfX1AiLCJMIiwiX19uIiwib3duZXJTVkdFbGVtZW50IiwiTSIsIlAiLCJfIiwiUyIsIkgiLCJJIiwiVCIsIkEiLCJPIiwibmV4dFNpYmxpbmciLCIkIiwiQyIsInEiLCJpbnNlcnRCZWZvcmUiLCJzZXRQcm9wZXJ0eSIsInRlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUF0dHJpYnV0ZSIsImV2ZW50IiwiY29udGV4dFR5cGUiLCJfX0UiLCJyZW5kZXIiLCJCIiwic3ViIiwic3RhdGUiLCJfc2IiLCJfX3MiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJOIiwiZGlmZmVkIiwic29tZSIsImxvY2FsTmFtZSIsIm5vZGVUeXBlIiwiY3JlYXRlRWxlbWVudE5TIiwiaXMiLCJjaGlsZE5vZGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJpbm5lckhUTUwiLCJjaGVja2VkIiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiRCIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJiaW5kIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJfMG4iLCJfMW4iLCJfMm4iLCJfM24iLCJfOG4iLCJDVVJWRSIsImZyZWV6ZSIsIkd4IiwiR3kiLCJiZXRhIiwiZGl2TmVhcmVzdCIsImVuZG8iLCJzcGxpdFNjYWxhciIsImExIiwiYjEiLCJhMiIsImIyIiwiUE9XXzJfMTI4IiwiYzEiLCJjMiIsImsxIiwibW9kIiwiazIiLCJrMW5lZyIsImsybmVnIiwiZmllbGRMZW4iLCJncm91cExlbiIsImNvbXByZXNzZWRMZW4iLCJ1bmNvbXByZXNzZWRMZW4iLCJ3ZWllcnN0cmFzcyIsIngyIiwieDMiLCJVU0VfRU5ET01PUlBISVNNIiwiU2hhRXJyb3IiLCJtZXNzYWdlIiwic3VwZXIiLCJhc3NlcnRKYWNQb2ludCIsIm90aGVyIiwiSmFjb2JpYW5Qb2ludCIsInN0YXRpYyIsIlBvaW50IiwiZXF1YWxzIiwiWkVSTyIsInBvaW50cyIsInRvSW52IiwibnVtcyIsInNjcmF0Y2giLCJsYXN0TXVsdGlwbGllZCIsImludmVydGVkIiwiaW52ZXJ0IiwicmVkdWNlUmlnaHQiLCJpbnZlcnRCYXRjaCIsInRvQWZmaW5lIiwidG9BZmZpbmVCYXRjaCIsImZyb21BZmZpbmUiLCJYMSIsIlkxIiwiWjEiLCJYMiIsIlkyIiwiWjIiLCJaMVoxIiwiWjJaMiIsIlUxIiwiVTIiLCJTMSIsIlMyIiwibmVnYXRlIiwiZG91YmxlIiwieDFiIiwiRSIsIkYiLCJYMyIsIlkzIiwiWjMiLCJhZGQiLCJISCIsIkhISCIsIlYiLCJzdWJ0cmFjdCIsIm11bHRpcGx5VW5zYWZlIiwic2NhbGFyIiwiUDAiLCJub3JtYWxpemVTY2FsYXIiLCJrMXAiLCJrMnAiLCJwcmVjb21wdXRlV2luZG93IiwiVyIsIndpbmRvd3MiLCJ3TkFGIiwiYWZmaW5lUG9pbnQiLCJCQVNFIiwiX1dJTkRPV19TSVpFIiwicHJlY29tcHV0ZXMiLCJwb2ludFByZWNvbXB1dGVzIiwibm9ybWFsaXplWiIsIndpbmRvd1NpemUiLCJtYXhOdW1iZXIiLCJzaGlmdEJ5Iiwib2Zmc2V0Iiwid2JpdHMiLCJvZmZzZXQxIiwib2Zmc2V0MiIsImFicyIsImNvbmQxIiwiY29uZDIiLCJjb25zdFRpbWVOZWdhdGUiLCJtdWx0aXBseSIsInBvaW50IiwiZmFrZSIsImYxcCIsImYycCIsImludloiLCJpczAiLCJpejEiLCJpejIiLCJpejMiLCJheCIsImF5IiwienoiLCJjb25kaXRpb24iLCJuZWciLCJXZWFrTWFwIiwiX3NldFdpbmRvd1NpemUiLCJkZWxldGUiLCJoYXNFdmVuWSIsImlzU2hvcnQiLCJieXRlc1RvTnVtYmVyIiwiaXNWYWxpZEZpZWxkRWxlbWVudCIsIl82biIsIl8xMW4iLCJfMjJuIiwiXzIzbiIsIl80NG4iLCJfODhuIiwiYjMiLCJiNiIsInBvdzIiLCJiOSIsImIxMSIsImIyMiIsImI0NCIsImI4OCIsImIxNzYiLCJiMjIwIiwiYjIyMyIsInQxIiwidDIiLCJydCIsInhjIiwic3FydE1vZCIsImlzWU9kZCIsImFzc2VydFZhbGlkaXR5IiwiZW5zdXJlQnl0ZXMiLCJoZWFkZXIiLCJmcm9tQ29tcHJlc3NlZEhleCIsImZyb21VbmNvbXByZXNzZWRIZXgiLCJwcml2YXRlS2V5Iiwibm9ybWFsaXplUHJpdmF0ZUtleSIsIm1zZ0hhc2giLCJzaWduYXR1cmUiLCJyZWNvdmVyeSIsIm5vcm1hbGl6ZVNpZ25hdHVyZSIsImluY2x1ZGVzIiwidHJ1bmNhdGVIYXNoIiwicmFkaiIsInJpbnYiLCJ1MSIsInUyIiwiUiIsImZyb21IZXgiLCJudW1UbzMyYlN0ciIsIlEiLCJtdWx0aXBseUFuZEFkZFVuc2FmZSIsInRvUmF3Qnl0ZXMiLCJpc0NvbXByZXNzZWQiLCJoZXhUb0J5dGVzIiwidG9IZXgiLCJ0b0hleFgiLCJ0b1Jhd1giLCJtc2ciLCJsZWZ0IiwiYVAiLCJiUSIsInNsaWNlREVSIiwicGFyc2VERVJJbnQiLCJieXRlc1RvSGV4IiwiU2lnbmF0dXJlIiwiYXJyIiwiaGV4VG9OdW1iZXIiLCJzQnl0ZXMiLCJyQnl0ZXNMZWZ0IiwicGFyc2VERVJTaWduYXR1cmUiLCJmcm9tREVSIiwiaXNXaXRoaW5DdXJ2ZU9yZGVyIiwiaGFzSGlnaFMiLCJIQUxGIiwibm9ybWFsaXplUyIsInRvREVSUmF3Qnl0ZXMiLCJ0b0RFUkhleCIsInNIZXgiLCJudW1iZXJUb0hleFVucGFkZGVkIiwickhleCIsInNIZXhMIiwickhleEwiLCJzTGVuIiwickxlbiIsInRvQ29tcGFjdFJhd0J5dGVzIiwidG9Db21wYWN0SGV4IiwiY29uY2F0Qnl0ZXMiLCJhcnJheXMiLCJldmVyeSIsImhleGVzIiwidWludDhhIiwiUE9XXzJfMjU2IiwibnVtVG8zMmIiLCJhcnJheSIsImhleEJ5dGUiLCJieXRlIiwiaXNOYU4iLCJwb3dlciIsIm51bWJlciIsIm1vZHVsbyIsImhhc2giLCJ0cnVuY2F0ZU9ubHkiLCJkZWx0YSIsImJpdHMyaW50XzIiLCJfc2hhMjU2U3luYyIsIl9obWFjU2hhMjU2U3luYyIsIm5vcm1hbGl6ZVB1YmxpY0tleSIsInB1YmxpY0tleSIsImVycm9yIiwiZnJvbUNvbXBhY3QiLCJzY2hub3JyQ2hhbGxlbmdlRmluYWxpemUiLCJjaCIsIlNjaG5vcnJTaWduYXR1cmUiLCJJbnRlcm5hbFNjaG5vcnJTaWduYXR1cmUiLCJhdXhSYW5kIiwicmFuZG9tQnl0ZXMiLCJnZXRTY2FsYXIiLCJweCIsInJhbmQiLCJwcml2IiwiZnJvbVByaXZhdGVLZXkiLCJpbml0Tm9uY2UiLCJ0MGgiLCJmaW5hbGl6ZU5vbmNlIiwiazBoIiwiazAiLCJyeCIsImZpbmFsaXplU2lnIiwiYXN5bmMiLCJ0YWdnZWRIYXNoIiwiVEFHUyIsImF1eCIsImNoYWxsZW5nZSIsInNpZyIsInNjaG5vcnJWZXJpZnkiLCJjYWxjU3luYyIsInRhZ2dlZEhhc2hTeW5jIiwic2Nobm9yclZlcmlmeVN5bmMiLCJpbml0U2Nobm9yclZlcmlmeSIsInJhdyIsImZpbmFsaXplU2Nobm9yclZlcmlmeSIsInNjaG5vcnIiLCJnZXRQdWJsaWNLZXkiLCJzaWduIiwicHJpdktleSIsImNhbGMiLCJ2ZXJpZnkiLCJzaWduU3luYyIsInZlcmlmeVN5bmMiLCJub2RlIiwid2ViIiwic2VsZiIsImNyeXB0byIsIlRBR0dFRF9IQVNIX1BSRUZJWEVTIiwiaXNWYWxpZFByaXZhdGVLZXkiLCJfYmlnaW50VG8zMkJ5dGVzIiwiX25vcm1hbGl6ZVByaXZhdGVLZXkiLCJoYXNoVG9Qcml2YXRlS2V5IiwibWluTGVuIiwiYnl0ZXNMZW5ndGgiLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21Qcml2YXRlS2V5IiwicHJlY29tcHV0ZSIsImNhY2hlZCIsIm1lc3NhZ2VzIiwiYnVmZmVyIiwic3VidGxlIiwiZGlnZXN0IiwiY3JlYXRlSGFzaCIsImhtYWNTaGEyNTYiLCJja2V5IiwiaW1wb3J0S2V5IiwiY3JlYXRlSG1hYyIsInNoYTI1NlN5bmMiLCJobWFjU2hhMjU2U3luYyIsInRhZ1AiLCJ0YWdIIiwiX0phY29iaWFuUG9pbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwidmFsIiwidXRmOERlY29kZXIiLCJzdWJzdHIiLCJnZXROb3RlSWQiLCJoZXhJZCIsImJiIiwiZ2V0TnB1YiIsImhleFB1YmtleSIsInBhcnNlTnB1YiIsIm5wdWIiLCJmb3JtYXROcHViIiwiZm9ybWF0WmFwQW1vdW50Iiwicm91bmQiLCJwYXJzZVRMViIsInJlc3QiLCJfX0giLCJfX1YiLCJfX04iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl9fc291cmNlIiwiX19zZWxmIiwiX3JlZiIsImFkZGl0aW9uYWxDbGFzc2VzIiwiY2xhc3NlcyIsIl9qc3giLCJ4bWxucyIsImZpbGwiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwid2lkdGgiLCJoZWlnaHQiLCJjbGFzcyIsImxvY2FscyIsImljb25DbGFzc2VzIiwiZGlzcGxheVRleHQiLCJjb3B5VGV4dCIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsInVzZVN0YXRlIiwiYnRuQ2xhc3NlcyIsInNldEJ0bkNsYXNzZXMiLCJfanN4cyIsIm9uQ2xpY2siLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJ0cmltIiwiZXJyIiwiY29uc29sZSIsImNvcHlUb0NsaXBib2FyZCIsIkNvcHlJY29uIiwidGh1bWJuYWlsIiwiZnVsbEltYWdlIiwiX3JlZiRpc1Byb2ZpbGVJbWFnZSIsImlzUHJvZmlsZUltYWdlIiwiaXNGdWxsSW1hZ2VMb2FkZWQiLCJzZXRJc0Z1bGxJbWFnZUxvYWRlZCIsIl91c2VTdGF0ZTQiLCJpbWFnZVNyYyIsInNldEltYWdlU3JjIiwiY2xhc3NOYW1lIiwic3JjIiwib25FcnJvciIsImNhY2hlZFByb2ZpbGVQaWN0dXJlIiwiZW5jb2RlZFByb2ZpbGVQa2V5IiwidHJ1bmNhdGVkUHJvZmlsZVBrZXkiLCJwcm9maWxlUGtleSIsInByb2ZpbGUiLCJwaWN0dXJlIiwiUHJvZmlsZUltYWdlIiwicmVsIiwiaHJlZiIsImRpc3BsYXlfbmFtZSIsIktleUljb24iLCJDb3B5VGV4dCIsImhpZGVOb3N0cmljaCIsIk5vc3RyaWNoSWNvbiIsImVuY29kZWRJZCIsImZvcm1hdHRlZERhdGUiLCJmb3JtYXR0ZWRaYXBBbW91bnQiLCJub3RlIiwicHJvZmlsZXNMaXN0IiwicmVwbGllc0NvdW50IiwicmVwb3N0c0NvdW50IiwibGlrZXNDb3VudCIsInphcEFtb3VudCIsImNyZWF0ZWRBdCIsImNyZWF0ZWRfYXQiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiaG91cjEyIiwiaG91ciIsIm1pbnV0ZSIsInllYXIiLCJtb250aCIsImRheSIsImhpZGVDb3VudGVycyIsIl9GcmFnbWVudCIsInNob3daYXBzIiwidGl0bGUiLCJCb2x0SWNvbiIsIlJlcGx5SWNvbiIsIlJlcG9zdEljb24iLCJIZWFydEljb24iLCJuYWRkciIsIkxpbmtJY29uIiwic2hvd0NvcHlBZGRyIiwiSU1BR0VfRklMRV9FWFRFTlNJT05TIiwiVklERU9fRklMRV9FWFRFTlNJT05TIiwiWU9VVFVCRV9LRVlfV09SRFMiLCJLSU5EX1pBUCIsIlByb2ZpbGVzTGlzdCIsIlByb2ZpbGUiLCJraW5kIiwidGFnZ2VkUHJvZmlsZXMiLCJjb3VudFRhZ2dlZFByb2ZpbGVzIiwiZ2V0RGlmZiIsIk1ldGEiLCJkaWZmIiwiZm9sbG93ZXJzQ291bnQiLCJGb2xsb3dlcnNJY29uIiwiX2ZpbHRlclByb2ZpbGVzJCIsIl9maWx0ZXJQcm9maWxlcyQyIiwiX2ZpbHRlclByb2ZpbGVzJDMiLCJfZmlsdGVyUHJvZmlsZXMkNCIsIl9maWx0ZXJQcm9maWxlcyQ1IiwiX2ZpbHRlclByb2ZpbGVzJDYiLCJfcmVmJGZvbGxvd3MiLCJmb2xsb3dzIiwic2hvd0ZvbGxvd2luZyIsInBhcnNlZEZvbGxvd3MiLCJmb2xsb3ciLCJwYXJzZSIsIm5wdWJMaW5rIiwiY2FjaGVkSW1hZ2UiLCJmaWx0ZXJQcm9maWxlcyIsIl9zdGF0ZSRwcm9maWxlIiwiX3N0YXRlJHByb2ZpbGUyIiwiX3N0YXRlJHByb2ZpbGUzIiwiX3N0YXRlJHByb2ZpbGU0IiwiUHJvZmlsZUNvbXBvbmVudCIsIndlYnNpdGUiLCJhYm91dCIsIkJvb2xlYW4iLCJQcm9maWxlRm9sbG93cyIsIlByb2ZpbGVNZXRhIiwiWmFwIiwiZm9ybWF0Q29udGVudCIsImZvcm1hdEV2ZW50TGluayIsIm5vdGVPck5hZGRyIiwibm90ZUlkIiwibGFiZWwiLCJmb3JtYXRQcm9maWxlTGluayIsInRwIiwiZnJhZ21lbnRzIiwibWF0Y2hUYWciLCJpZHgiLCJ0YWdzIiwibWF0Y2hOb3N0ciIsInN0YXJ0c1dpdGgiLCJfcGFyc2VOcHJvZmlsZSIsIm5wcm9maWxlIiwiX3RsdiQiLCJ0bHYiLCJyZWxheXMiLCJwYXJzZU5wcm9maWxlIiwibGluayIsInNwbGl0TGluayIsImNoYW5nZUxpbmtSZWdpc3RlciIsImlzQW55RW5kV2l0aCIsImlzVmlkZW8iLCJjb250cm9scyIsImlzSW1hZ2UiLCJhbHQiLCJrZXlXb3JkcyIsImtleVdvcmQiLCJpc0FueUNvbnRhaW5zIiwiaXNZb3V0dWJlIiwiZm9ybWF0TGluayIsImV4dGVuc2lvbnMiLCJleHRlbnNpb24iLCJlbGVtZW50TnVtYmVyIiwibGlua0FycmF5IiwiTm90ZSIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJPcCIsImhhc093biIsImRlc2MiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ3cml0YWJsZSIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZWplY3QiLCJyZWNvcmQiLCJfdHlwZW9mIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiaXRlciIsIm9iamVjdCIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJfdG9QcmltaXRpdmUiLCJfc2V0UHJvdG90eXBlT2YiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJ2YWx1ZU9mIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwiTmV3VGFyZ2V0IiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJOb3N0ckVtYmVkIiwiX0NvbXBvbmVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9pbmhlcml0cyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2lzVmFsaWRFdmVudCIsIl92YWxpZGF0ZU5vc3RyRXZlbnQiLCJfZ2V0Tm9zdHJFdmVudElEIiwiX3N1cGVyIiwiX3RoaXMiLCJpbnN0YW5jZSIsIl9jbGFzc0NhbGxDaGVjayIsInBhcnNlTm90ZUlkIiwiX3RsdiQyIiwiX3RsdiQzIiwiX3RsdiQ0IiwicGFyc2VOYWRkciIsInJlbGF5Iiwic3RyaW5nIiwic2VjcCIsImhhc2hCdWZmZXIiLCJfY2FsbGVlIiwiX2NvbnRleHQiLCJfeCIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwidDAiLCJnZXROb3N0ckV2ZW50SUQiLCJfeDIiLCJfY2FsbGVlMyIsImV2IiwiX2NvbnRleHQzIiwidmFsaWRhdGVOb3N0ckV2ZW50IiwidmVyaWZ5Tm9zdHJTaWduYXR1cmUiLCJfeDMiLCJfdGhpczIiLCJzdGFydCIsInNvY2tldCIsImZldGNoUHJvZmlsZSIsImZldGNoRXZlbnQiLCJmZXRjaE5hZGRyIiwiX19ub3N0ckVtYmVkIiwic29ja2V0cyIsInJlYWR5U3RhdGUiLCJzdGFydHMiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJsb2ciLCJ1cmwiLCJfc3RlcCIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwib25lcnJvciIsInN1YnMiLCJvbm1lc3NhZ2UiLCJvbl9ldmVudCIsIm9uX2NvdW50Iiwic3Vic2NyaWJlIiwib2siLCJyYW5kb20iLCJyZXEiLCJzZW5kIiwiY2xvc2UiLCJzdWJfaWQiLCJldmVudHMiLCJxdWV1ZSIsIl9yZWYyIiwiX2NhbGxlZTQiLCJfY29udGV4dDQiLCJpc1ZhbGlkRXZlbnQiLCJfeDQiLCJfcmVmMyIsIl9jYWxsZWU1IiwiX2NvbnRleHQ1IiwiX3g1IiwibGlzdEV2ZW50cyIsIl9yZWY0IiwiY291bnRFdmVudHMiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfcmVmOCIsIl9yZWY5IiwiX3RoaXMzIiwiaWRzIiwiZ2V0RXZlbnQiLCJmZXRjaE1ldGEiLCJmZXRjaFRhZ3MiLCJfcmVmMTAiLCJfdGhpczQiLCJraW5kcyIsImF1dGhvcnMiLCJfdGhpczQkcHJvcHMkb3B0aW9ucyIsInBhcnNlZFByb2ZpbGUiLCJmZXRjaFByb2ZpbGVNZXRhIiwiZmV0Y2hGb2xsb3dzIiwiX3JlZjExIiwiX3RoaXM1IiwiZm9sbG93ZWRQdWJrZXlzIiwiZmV0Y2hGb2xsb3dQcm9maWxlcyIsInB1YmtleXMiLCJfcmVmMTIiLCJfdGhpczYiLCJfcmVmMTMiLCJfdGhpczciLCJwcm9maWxlc0xpc3RPYmoiLCJnZXRQcm9maWxlc0xpc3RPYmoiLCJfcmVmMTQiLCJfc3RlcDIiLCJfdGhpczgiLCJfaXRlcmF0b3IyIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJfc3RlcDUiLCJfaXRlcmF0b3I1IiwiZXIiLCJfc3RlcDYiLCJfdGhpczkiLCJfaXRlcmF0b3I2IiwiX2xvb3AiLCJub3RlRXZlbnQiLCJLSU5EX1JFUE9TVCIsIktJTkRfUkVBQ1RJT04iLCJnZXRaYXBBbW91bnQiLCJfcmVmMTUiLCJfdGhpcyRwcm9wcyRvcHRpb25zIiwiZmV0Y2hNZXRhQ291bnQiLCJmZXRjaE1ldGFMaXN0IiwiX3JlZjE2IiwiX3RoaXMxMCIsImdldFN1YiIsIm9uTGlzdE1ldGFFdmVudHMiLCJfcmVmMTciLCJfdGhpczExIiwiZ2V0U3ViT25GZXRjaE1ldGFMaXN0IiwiX3JlZjE4IiwiX3N0ZXA3IiwiX3RoaXMxMiIsIl9pdGVyYXRvcjciLCJfbG9vcDIiLCJfcmVmMTkiLCJfdGhpczEzIiwib25MaXN0UHJvZmlsZU1ldGFFdmVudHMiLCJfcmVmMjAiLCJfdGhpczE0IiwiX3JlZjIxIiwiX3RoaXMkcHJvcHMkb3B0aW9uczIiLCJfdGhpcyRwcm9wcyRvcHRpb25zMyIsImZldGNoUHJvZmlsZU1ldGFDb3VudCIsImZldGNoUHJvZmlsZU1ldGFMaXN0IiwiQ29tcG9uZW50IiwiaW5pdCIsIndyYXBwZXIiLCJyZW5kZXJFbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==